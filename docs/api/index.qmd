# Function reference

## Aggregations



| | |
| --- | --- |
| [agg.any_value](agg.any_value.qmd#duckops.agg.any_value) | Returns the first non-null value from arg. |
| [agg.approx_count_distinct](agg.approx_count_distinct.qmd#duckops.agg.approx_count_distinct) | Gives the approximate count of distintinct elements using HyperLogLog. |
| [agg.approx_quantile](agg.approx_quantile.qmd#duckops.agg.approx_quantile) | Gives the approximate quantile using T-Digest. |
| [agg.arg_max](agg.arg_max.qmd#duckops.agg.arg_max) | Finds the row with the maximum val. Calculates the arg expression at that row. |
| [agg.arg_min](agg.arg_min.qmd#duckops.agg.arg_min) | Finds the row with the minimum val. Calculates the arg expression at that row. |
| [agg.avg](agg.avg.qmd#duckops.agg.avg) | Calculates the average value for all tuples in arg. |
| [agg.bit_and](agg.bit_and.qmd#duckops.agg.bit_and) | Returns the bitwise AND of all bits in a given expression . |
| [agg.bit_or](agg.bit_or.qmd#duckops.agg.bit_or) | Returns the bitwise OR of all bits in a given expression. |
| [agg.bit_xor](agg.bit_xor.qmd#duckops.agg.bit_xor) | Returns the bitwise XOR of all bits in a given expression. |
| [agg.bool_and](agg.bool_and.qmd#duckops.agg.bool_and) | Returns TRUE if every input value is TRUE, otherwise FALSE. |
| [agg.bool_or](agg.bool_or.qmd#duckops.agg.bool_or) | Returns TRUE if any input value is TRUE, otherwise FALSE. |
| [agg.corr](agg.corr.qmd#duckops.agg.corr) | Returns the correlation coefficient for non-null pairs in a group. |
| [agg.count](agg.count.qmd#duckops.agg.count) | Calculates the number of tuples tuples in arg. |
| [agg.covar_pop](agg.covar_pop.qmd#duckops.agg.covar_pop) | Returns the population covariance of input values. |
| [agg.entropy](agg.entropy.qmd#duckops.agg.entropy) | Returns the log-2 entropy of count input-values. |
| [agg.favg](agg.favg.qmd#duckops.agg.favg) | Calculates the average using a more accurate floating point summation (Kahan Sum). |
| [agg.first](agg.first.qmd#duckops.agg.first) | Returns the first value of a column. |
| [agg.fsum](agg.fsum.qmd#duckops.agg.fsum) | Calculates the sum using a more accurate floating point summation (Kahan Sum). |
| [agg.histogram](agg.histogram.qmd#duckops.agg.histogram) | Returns a LIST of STRUCTs with the fields bucket and count. |
| [agg.kurtosis](agg.kurtosis.qmd#duckops.agg.kurtosis) | Returns the excess kurtosis of all input values. |
| [agg.last](agg.last.qmd#duckops.agg.last) | Returns the last value of a column. |
| [agg.list](agg.list.qmd#duckops.agg.list) | Returns a LIST containing all the values of a column. |
| [agg.mad](agg.mad.qmd#duckops.agg.mad) | Returns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL. |
| [agg.max](agg.max.qmd#duckops.agg.max) | Returns the maximum value present in arg. |
| [agg.median](agg.median.qmd#duckops.agg.median) | Returns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value. |
| [agg.min](agg.min.qmd#duckops.agg.min) | Returns the minumum value present in arg. |
| [agg.mode](agg.mode.qmd#duckops.agg.mode) | Returns the most frequent value for the values within x. NULL values are ignored. |
| [agg.product](agg.product.qmd#duckops.agg.product) | Calculates the product of all tuples in arg |
| [agg.quantile_cont](agg.quantile_cont.qmd#duckops.agg.quantile_cont) | Returns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles. |
| [agg.quantile_disc](agg.quantile_disc.qmd#duckops.agg.quantile_disc) | Returns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles. |
| [agg.regr_avgx](agg.regr_avgx.qmd#duckops.agg.regr_avgx) | Returns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable. |
| [agg.regr_avgy](agg.regr_avgy.qmd#duckops.agg.regr_avgy) | Returns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable. |
| [agg.regr_count](agg.regr_count.qmd#duckops.agg.regr_count) | Returns the number of non-null number pairs in a group. |
| [agg.regr_intercept](agg.regr_intercept.qmd#duckops.agg.regr_intercept) | Returns the intercept of the univariate linear regression line for non-null pairs in a group. |
| [agg.regr_r2](agg.regr_r2.qmd#duckops.agg.regr_r2) | Returns the coefficient of determination for non-null pairs in a group. |
| [agg.regr_slope](agg.regr_slope.qmd#duckops.agg.regr_slope) | Returns the slope of the linear regression line for non-null pairs in a group. |
| [agg.regr_sxx](agg.regr_sxx.qmd#duckops.agg.regr_sxx) | - |
| [agg.regr_sxy](agg.regr_sxy.qmd#duckops.agg.regr_sxy) | Returns the population covariance of input values. |
| [agg.regr_syy](agg.regr_syy.qmd#duckops.agg.regr_syy) | - |
| [agg.reservoir_quantile](agg.reservoir_quantile.qmd#duckops.agg.reservoir_quantile) | Gives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size. |
| [agg.skewness](agg.skewness.qmd#duckops.agg.skewness) | Returns the skewness of all input values. |
| [agg.stddev_pop](agg.stddev_pop.qmd#duckops.agg.stddev_pop) | Returns the population standard deviation. |
| [agg.stddev_samp](agg.stddev_samp.qmd#duckops.agg.stddev_samp) | Returns the sample standard deviation. |
| [agg.string_agg](agg.string_agg.qmd#duckops.agg.string_agg) | Concatenates the column string values with a separator |
| [agg.sum](agg.sum.qmd#duckops.agg.sum) | Calculates the sum value for all tuples in arg. |
| [agg.var_pop](agg.var_pop.qmd#duckops.agg.var_pop) | Returns the population variance. |
| [agg.var_samp](agg.var_samp.qmd#duckops.agg.var_samp) | Returns the sample variance of all input values. |

## Blobs



| | |
| --- | --- |
| [blob.decode](blob.decode.qmd#duckops.blob.decode) | Convert blob to varchar. Fails if blob is not valid utf-8. |
| [blob.encode](blob.encode.qmd#duckops.blob.encode) | Convert varchar to blob. Converts utf-8 characters into literal encoding. |
| [blob.octet_length](blob.octet_length.qmd#duckops.blob.octet_length) | Number of bytes in blob |

## Datetime



| | |
| --- | --- |
| [dt.age](dt.age.qmd#duckops.dt.age) | Subtract arguments, resulting in the time difference between the two timestamps |
| [dt.century](dt.century.qmd#duckops.dt.century) | Extracts the century of a timestamp |
| [dt.current_date](dt.current_date.qmd#duckops.dt.current_date) | Current date (at start of current transaction) |
| [dt.current_localtimestamp](dt.current_localtimestamp.qmd#duckops.dt.current_localtimestamp) | Returns a TIMESTAMP whose GMT bin values correspond to local date and time in the current time zone. |
| [dt.date_diff](dt.date_diff.qmd#duckops.dt.date_diff) | The number of partition boundaries between the dates |
| [dt.date_part](dt.date_part.qmd#duckops.dt.date_part) | Get the subfield (equivalent to extract) |
| [dt.date_sub](dt.date_sub.qmd#duckops.dt.date_sub) | The number of complete partitions between the dates |
| [dt.date_trunc](dt.date_trunc.qmd#duckops.dt.date_trunc) | Truncate to specified precision |
| [dt.datediff](dt.datediff.qmd#duckops.dt.datediff) | Alias of date_diff. The number of partition boundaries between the dates |
| [dt.datepart](dt.datepart.qmd#duckops.dt.datepart) | Alias of date_part. Get the subfield (equivalent to extract) |
| [dt.datesub](dt.datesub.qmd#duckops.dt.datesub) | Alias of date_sub. The number of complete partitions between the dates |
| [dt.datetrunc](dt.datetrunc.qmd#duckops.dt.datetrunc) | Alias of date_trunc. Truncate to specified precision |
| [dt.day](dt.day.qmd#duckops.dt.day) | Day |
| [dt.dayname](dt.dayname.qmd#duckops.dt.dayname) | The (English) name of the weekday |
| [dt.dayofmonth](dt.dayofmonth.qmd#duckops.dt.dayofmonth) | Day (synonym) |
| [dt.dayofweek](dt.dayofweek.qmd#duckops.dt.dayofweek) | Numeric weekday (Sunday = 0, Saturday = 6) |
| [dt.dayofyear](dt.dayofyear.qmd#duckops.dt.dayofyear) | Numeric ISO weekday (Monday = 1, Sunday = 7) |
| [dt.decade](dt.decade.qmd#duckops.dt.decade) | Decade (year / 10) |
| [dt.epoch](dt.epoch.qmd#duckops.dt.epoch) | Converts a timestamp to the seconds since the epoch |
| [dt.epoch_ms](dt.epoch_ms.qmd#duckops.dt.epoch_ms) | Converts ms since epoch to a timestamp |
| [dt.era](dt.era.qmd#duckops.dt.era) | Calendar era |
| [dt.generate_series](dt.generate_series.qmd#duckops.dt.generate_series) | Generate a table of timestamps in the closed range, stepping by the interval |
| [dt.get_current_time](dt.get_current_time.qmd#duckops.dt.get_current_time) | Current time (start of current transaction) |
| [dt.get_current_timestamp](dt.get_current_timestamp.qmd#duckops.dt.get_current_timestamp) | Current date and time (start of current transaction) |
| [dt.hour](dt.hour.qmd#duckops.dt.hour) | Hours |
| [dt.isodow](dt.isodow.qmd#duckops.dt.isodow) | Numeric ISO weekday (Monday = 1, Sunday = 7) |
| [dt.isoyear](dt.isoyear.qmd#duckops.dt.isoyear) | ISO Year number (Starts on Monday of week containing Jan 4th) |
| [dt.last_day](dt.last_day.qmd#duckops.dt.last_day) | The last day of the corresponding month in the date |
| [dt.make_date](dt.make_date.qmd#duckops.dt.make_date) | The date for the given parts |
| [dt.make_time](dt.make_time.qmd#duckops.dt.make_time) | The time for the given parts |
| [dt.make_timestamp](dt.make_timestamp.qmd#duckops.dt.make_timestamp) | The timestamp for the given parts |
| [dt.make_timestamptz](dt.make_timestamptz.qmd#duckops.dt.make_timestamptz) | The timestamp with time zone for the given parts in the current time zone |
| [dt.microsecond](dt.microsecond.qmd#duckops.dt.microsecond) | Sub-minute microseconds |
| [dt.millennium](dt.millennium.qmd#duckops.dt.millennium) | Millennium |
| [dt.millisecond](dt.millisecond.qmd#duckops.dt.millisecond) | Sub-minute milliseconds |
| [dt.minute](dt.minute.qmd#duckops.dt.minute) | Minutes |
| [dt.month](dt.month.qmd#duckops.dt.month) | Month |
| [dt.monthname](dt.monthname.qmd#duckops.dt.monthname) | The (English) name of the month |
| [dt.now](dt.now.qmd#duckops.dt.now) | Current date and time (start of current transaction) |
| [dt.quarter](dt.quarter.qmd#duckops.dt.quarter) | Quarter |
| [dt.range](dt.range.qmd#duckops.dt.range) | Generate a table of timestamps in the half open range, stepping by the interval |
| [dt.second](dt.second.qmd#duckops.dt.second) | Seconds |
| [dt.strftime](dt.strftime.qmd#duckops.dt.strftime) | Converts a date to a string according to the format string |
| [dt.strptime](dt.strptime.qmd#duckops.dt.strptime) | Converts string to timestamp according to the format string |
| [dt.time_bucket](dt.time_bucket.qmd#duckops.dt.time_bucket) | Truncate date by the specified interval bucket_width. Buckets are aligned relative to origin date. origin defaults to 2000-01-03 for buckets that don’t include a month or year interval, and to 2000-01-01 for month and year buckets. |
| [dt.timezone](dt.timezone.qmd#duckops.dt.timezone) | Use the date parts of the timestamp in GMT to construct a timestamp in the given time zone. Effectively, the argument is a “local” time. |
| [dt.timezone_hour](dt.timezone_hour.qmd#duckops.dt.timezone_hour) | Time zone offset hour portion |
| [dt.timezone_minute](dt.timezone_minute.qmd#duckops.dt.timezone_minute) | Time zone offset minutes portion |
| [dt.to_days](dt.to_days.qmd#duckops.dt.to_days) | Construct a day interval |
| [dt.to_hours](dt.to_hours.qmd#duckops.dt.to_hours) | Construct a hour interval |
| [dt.to_microseconds](dt.to_microseconds.qmd#duckops.dt.to_microseconds) | Construct a microsecond interval |
| [dt.to_milliseconds](dt.to_milliseconds.qmd#duckops.dt.to_milliseconds) | Construct a millisecond interval |
| [dt.to_minutes](dt.to_minutes.qmd#duckops.dt.to_minutes) | Construct a minute interval |
| [dt.to_months](dt.to_months.qmd#duckops.dt.to_months) | Construct a month interval |
| [dt.to_seconds](dt.to_seconds.qmd#duckops.dt.to_seconds) | Construct a second interval |
| [dt.to_timestamp](dt.to_timestamp.qmd#duckops.dt.to_timestamp) | Converts sec since epoch to a timestamp |
| [dt.to_years](dt.to_years.qmd#duckops.dt.to_years) | Construct a year interval |
| [dt.today](dt.today.qmd#duckops.dt.today) | Current date (start of current transaction) |
| [dt.transaction_timestamp](dt.transaction_timestamp.qmd#duckops.dt.transaction_timestamp) | Current date and time (start of current transaction) |
| [dt.week](dt.week.qmd#duckops.dt.week) | ISO Week |
| [dt.weekday](dt.weekday.qmd#duckops.dt.weekday) | Numeric weekday synonym (Sunday = 0, Saturday = 6) |
| [dt.weekofyear](dt.weekofyear.qmd#duckops.dt.weekofyear) | ISO Week (synonym) |
| [dt.year](dt.year.qmd#duckops.dt.year) | Year |
| [dt.yearweek](dt.yearweek.qmd#duckops.dt.yearweek) | BIGINT of combined ISO Year number and 2-digit version of ISO Week number |

## JSON



| | |
| --- | --- |
| [json.array_to_json](json.array_to_json.qmd#duckops.json.array_to_json) | Alias for to_json that only accepts LIST |
| [json.from_json](json.from_json.qmd#duckops.json.from_json) | Alias for json_transform |
| [json.from_json_strict](json.from_json_strict.qmd#duckops.json.from_json_strict) | Alias for json_transform_strict |
| [json.json_array](json.json_array.qmd#duckops.json.json_array) | Create a JSON array from any number of values |
| [json.json_array_length](json.json_array_length.qmd#duckops.json.json_array_length) | Return the number of elements in the JSON array json, or 0 if it is not a JSON array. If path is specified, return the number of elements in the JSON array at the given path. If path is a LIST, the result will be LIST of array lengths |
| [json.json_contains](json.json_contains.qmd#duckops.json.json_contains) | Returns true if json_needle is contained in json_haystack. Both parameters are of JSON type, but json_needle can also be a numeric value or a string, however the string must be wrapped in double quotes |
| [json.json_extract](json.json_extract.qmd#duckops.json.json_extract) | Extract JSON from json at the given path. If path is a LIST, the result will be a LIST of JSON |
| [json.json_extract_string](json.json_extract_string.qmd#duckops.json.json_extract_string) | Extract VARCHAR from json at the given path. If path is a LIST, the result will be a LIST of VARCHAR |
| [json.json_keys](json.json_keys.qmd#duckops.json.json_keys) | Returns the keys of json as a LIST of VARCHAR, if json is a JSON object. If path is specified, return the keys of the JSON object at the given path. If path is a LIST, the result will be LIST of LIST of VARCHAR |
| [json.json_merge_patch](json.json_merge_patch.qmd#duckops.json.json_merge_patch) | Merge two json documents together |
| [json.json_object](json.json_object.qmd#duckops.json.json_object) | Create a JSON object from any number of key, value pairs |
| [json.json_quote](json.json_quote.qmd#duckops.json.json_quote) | Alias for to_json |
| [json.json_structure](json.json_structure.qmd#duckops.json.json_structure) | Return the structure of json. Throws an error if the structure is inconsistent (incompatible types in an array) |
| [json.json_transform](json.json_transform.qmd#duckops.json.json_transform) | Transform json according to the specified structure |
| [json.json_transform_strict](json.json_transform_strict.qmd#duckops.json.json_transform_strict) | Same as json_transform, but throws an error when type casting fails |
| [json.json_type](json.json_type.qmd#duckops.json.json_type) | Return the type of the supplied json, which is one of OBJECT, ARRAY, BIGINT, UBIGINT, VARCHAR, BOOLEAN, NULL. If path is specified, return the type of the element at the given path. If path is a LIST, the result will be LIST of types |
| [json.json_valid](json.json_valid.qmd#duckops.json.json_valid) | Return whether json is valid JSON |
| [json.row_to_json](json.row_to_json.qmd#duckops.json.row_to_json) | Alias for to_json that only accepts STRUCT |
| [json.to_json](json.to_json.qmd#duckops.json.to_json) | Create JSON from a value of any type. Our LIST is converted to a JSON array, and our STRUCT and MAP are converted to a JSON object |

## Nested



| | |
| --- | --- |
| [nested.array_aggr](nested.array_aggr.qmd#duckops.nested.array_aggr) | Alias for list_aggregate. |
| [nested.array_aggregate](nested.array_aggregate.qmd#duckops.nested.array_aggregate) | Alias for list_aggregate. |
| [nested.array_apply](nested.array_apply.qmd#duckops.nested.array_apply) | Alias for list_transform. |
| [nested.array_cat](nested.array_cat.qmd#duckops.nested.array_cat) | Alias for list_concat. |
| [nested.array_concat](nested.array_concat.qmd#duckops.nested.array_concat) | Alias for list_concat. |
| [nested.array_contains](nested.array_contains.qmd#duckops.nested.array_contains) | Alias for list_contains. |
| [nested.array_distinct](nested.array_distinct.qmd#duckops.nested.array_distinct) | Alias for list_distinct. |
| [nested.array_filter](nested.array_filter.qmd#duckops.nested.array_filter) | Alias for list_filter. |
| [nested.array_has](nested.array_has.qmd#duckops.nested.array_has) | Alias for list_contains. |
| [nested.array_indexof](nested.array_indexof.qmd#duckops.nested.array_indexof) | Alias for list_position. |
| [nested.array_length](nested.array_length.qmd#duckops.nested.array_length) | Alias for len. |
| [nested.array_position](nested.array_position.qmd#duckops.nested.array_position) | Alias for list_position. |
| [nested.array_reverse_sort](nested.array_reverse_sort.qmd#duckops.nested.array_reverse_sort) | Alias for list_reverse_sort. |
| [nested.array_sort](nested.array_sort.qmd#duckops.nested.array_sort) | Alias for list_sort. |
| [nested.array_transform](nested.array_transform.qmd#duckops.nested.array_transform) | Alias for list_transform. |
| [nested.array_unique](nested.array_unique.qmd#duckops.nested.array_unique) | Alias for list_unique. |
| [nested.cardinality](nested.cardinality.qmd#duckops.nested.cardinality) | Return the size of the map (or the number of entries in the map). |
| [nested.element_at](nested.element_at.qmd#duckops.nested.element_at) | Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned. |
| [nested.len](nested.len.qmd#duckops.nested.len) | Return the length of the list. |
| [nested.list_aggr](nested.list_aggr.qmd#duckops.nested.list_aggr) | Alias for list_aggregate. |
| [nested.list_aggregate](nested.list_aggregate.qmd#duckops.nested.list_aggregate) | Executes the aggregate function name on the elements of list. See the List Aggregates section for more details. |
| [nested.list_apply](nested.list_apply.qmd#duckops.nested.list_apply) | Alias for list_transform. |
| [nested.list_cat](nested.list_cat.qmd#duckops.nested.list_cat) | Alias for list_concat. |
| [nested.list_concat](nested.list_concat.qmd#duckops.nested.list_concat) | Concatenates two lists. |
| [nested.list_contains](nested.list_contains.qmd#duckops.nested.list_contains) | Returns true if the list contains the element. |
| [nested.list_distinct](nested.list_distinct.qmd#duckops.nested.list_distinct) | Removes all duplicates and NULLs from a list. Does not preserve the original order. |
| [nested.list_filter](nested.list_filter.qmd#duckops.nested.list_filter) | Constructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions section for more details. |
| [nested.list_has](nested.list_has.qmd#duckops.nested.list_has) | Alias for list_contains. |
| [nested.list_indexof](nested.list_indexof.qmd#duckops.nested.list_indexof) | Alias for list_position. |
| [nested.list_pack](nested.list_pack.qmd#duckops.nested.list_pack) | Alias for list_value. |
| [nested.list_position](nested.list_position.qmd#duckops.nested.list_position) | Returns the index of the element if the list contains the element. |
| [nested.list_reverse_sort](nested.list_reverse_sort.qmd#duckops.nested.list_reverse_sort) | Sorts the elements of the list in reverse order. See the Sorting Lists section for more details about the null sorting order. |
| [nested.list_slice](nested.list_slice.qmd#duckops.nested.list_slice) | Extract a sublist using slice conventions. NULLs are interpreted as the bounds of the LIST. Negative values are accepted. |
| [nested.list_sort](nested.list_sort.qmd#duckops.nested.list_sort) | Sorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the null sorting order. |
| [nested.list_transform](nested.list_transform.qmd#duckops.nested.list_transform) | Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details. |
| [nested.list_unique](nested.list_unique.qmd#duckops.nested.list_unique) | Counts the unique elements of a list. |
| [nested.list_value](nested.list_value.qmd#duckops.nested.list_value) | Create a LIST containing the argument values. |
| [nested.map](nested.map.qmd#duckops.nested.map) | Returns an empty map. |
| [nested.map_extract](nested.map_extract.qmd#duckops.nested.map_extract) | Alias of element_at. Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned. |
| [nested.map_from_entries](nested.map_from_entries.qmd#duckops.nested.map_from_entries) | Returns a map created from the entries of the array |
| [nested.row](nested.row.qmd#duckops.nested.row) | Create a STRUCT containing the argument values. If the values are column references, the entry name will be the column name; otherwise it will be the string 'vN' where N is the (1-based) position of the argument. |
| [nested.struct_extract](nested.struct_extract.qmd#duckops.nested.struct_extract) | Extract the named entry from the struct. |
| [nested.struct_insert](nested.struct_insert.qmd#duckops.nested.struct_insert) | Add field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s). |
| [nested.struct_pack](nested.struct_pack.qmd#duckops.nested.struct_pack) | Create a STRUCT containing the argument values. The entry name will be the bound variable name. |
| [nested.union_extract](nested.union_extract.qmd#duckops.nested.union_extract) | Extract the value with the named tags from the union. NULL if the tag is not currently selected |
| [nested.union_tag](nested.union_tag.qmd#duckops.nested.union_tag) | Retrieve the currently selected tag of the union as an Enum. |
| [nested.union_value](nested.union_value.qmd#duckops.nested.union_value) | Create a single member UNION containing the argument value. The tag of the value will be the bound variable name. |

## Numeric



| | |
| --- | --- |
| [num.abs](num.abs.qmd#duckops.num.abs) | absolute value |
| [num.acos](num.acos.qmd#duckops.num.acos) | computes the arccosine of x |
| [num.asin](num.asin.qmd#duckops.num.asin) | computes the arcsine of x |
| [num.atan](num.atan.qmd#duckops.num.atan) | computes the arctangent of x |
| [num.atan2](num.atan2.qmd#duckops.num.atan2) | computes the arctangent (x, y) |
| [num.bit_count](num.bit_count.qmd#duckops.num.bit_count) | returns the number of bits that are set |
| [num.cbrt](num.cbrt.qmd#duckops.num.cbrt) | returns the cube root of the number |
| [num.ceil](num.ceil.qmd#duckops.num.ceil) | rounds the number up |
| [num.ceiling](num.ceiling.qmd#duckops.num.ceiling) | rounds the number up. Alias of ceil. |
| [num.chr](num.chr.qmd#duckops.num.chr) | returns a character which is corresponding the ASCII code value or Unicode code point |
| [num.cos](num.cos.qmd#duckops.num.cos) | computes the cosine of x |
| [num.cot](num.cot.qmd#duckops.num.cot) | computes the cotangent of x |
| [num.degrees](num.degrees.qmd#duckops.num.degrees) | converts radians to degrees |
| [num.even](num.even.qmd#duckops.num.even) | round to next even number by rounding away from zero. |
| [num.factorial](num.factorial.qmd#duckops.num.factorial) | See ! operator. Computes the product of the current integer and all integers below it |
| [num.floor](num.floor.qmd#duckops.num.floor) | rounds the number down |
| [num.gamma](num.gamma.qmd#duckops.num.gamma) | interpolation of (x-1) factorial (so decimal inputs are allowed) |
| [num.greatest](num.greatest.qmd#duckops.num.greatest) | selects the largest value |
| [num.isfinite](num.isfinite.qmd#duckops.num.isfinite) | Returns true if the floating point value is finite, false otherwise |
| [num.isinf](num.isinf.qmd#duckops.num.isinf) | Returns true if the floating point value is infinite, false otherwise |
| [num.isnan](num.isnan.qmd#duckops.num.isnan) | Returns true if the floating point value is not a number, false otherwise |
| [num.least](num.least.qmd#duckops.num.least) | selects the smallest value |
| [num.lgamma](num.lgamma.qmd#duckops.num.lgamma) | computes the log of the gamma function. |
| [num.ln](num.ln.qmd#duckops.num.ln) | computes the natural logarithm of x |
| [num.log](num.log.qmd#duckops.num.log) | computes the 10-log of x |
| [num.log10](num.log10.qmd#duckops.num.log10) | alias of log. computes the 10-log of x |
| [num.log2](num.log2.qmd#duckops.num.log2) | computes the 2-log of x |
| [num.nextafter](num.nextafter.qmd#duckops.num.nextafter) | return the next floating point value after x in the direction of y |
| [num.pi](num.pi.qmd#duckops.num.pi) | returns the value of pi |
| [num.pow](num.pow.qmd#duckops.num.pow) | computes x to the power of y |
| [num.power](num.power.qmd#duckops.num.power) | Alias of pow. computes x to the power of y |
| [num.radians](num.radians.qmd#duckops.num.radians) | converts degrees to radians |
| [num.random](num.random.qmd#duckops.num.random) | returns a random number between 0 and 1 |
| [num.round](num.round.qmd#duckops.num.round) | round to s decimal places |
| [num.setseed](num.setseed.qmd#duckops.num.setseed) | sets the seed to be used for the random function |
| [num.sign](num.sign.qmd#duckops.num.sign) | returns the sign of x as -1, 0 or 1 |
| [num.signbit](num.signbit.qmd#duckops.num.signbit) | returns whether the signbit is set or not |
| [num.sin](num.sin.qmd#duckops.num.sin) | computes the sin of x |
| [num.sqrt](num.sqrt.qmd#duckops.num.sqrt) | returns the square root of the number |
| [num.tan](num.tan.qmd#duckops.num.tan) | computes the tangent of x |
| [num.xor](num.xor.qmd#duckops.num.xor) | bitwise XOR |

## String



| | |
| --- | --- |
| [str.array_extract](str.array_extract.qmd#duckops.str.array_extract) | Extract a single character using a (1-based) index. |
| [str.array_slice](str.array_slice.qmd#duckops.str.array_slice) | Extract a string using slice conventions. NULLs are interpreted as the bounds of the string. Negative values are accepted. |
| [str.ascii](str.ascii.qmd#duckops.str.ascii) | Returns an integer that represents the Unicode code point of the first character of the string |
| [str.bar](str.bar.qmd#duckops.str.bar) | Draw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80. |
| [str.base64](str.base64.qmd#duckops.str.base64) | Convert a blob to a base64 encoded string. Alias of to_base64. |
| [str.bit_length](str.bit_length.qmd#duckops.str.bit_length) | Number of bits in a string. |
| [str.concat](str.concat.qmd#duckops.str.concat) | Concatenate many strings together |
| [str.concat_ws](str.concat_ws.qmd#duckops.str.concat_ws) | Concatenate strings together separated by the specified separator |
| [str.contains](str.contains.qmd#duckops.str.contains) | Return true if search_string is found within string |
| [str.editdist3](str.editdist3.qmd#duckops.str.editdist3) | Alias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different. |
| [str.format](str.format.qmd#duckops.str.format) | Formats a string using fmt syntax |
| [str.from_base64](str.from_base64.qmd#duckops.str.from_base64) | Convert a base64 encoded string to a character string. |
| [str.hamming](str.hamming.qmd#duckops.str.hamming) | The number of positions with different characters for 2 strings of equal length. Different case is considered different. |
| [str.hash](str.hash.qmd#duckops.str.hash) | Returns an integer with the hash of the value |
| [str.instr](str.instr.qmd#duckops.str.instr) | Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found. |
| [str.jaccard](str.jaccard.qmd#duckops.str.jaccard) | The Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1. |
| [str.jaro_similarity](str.jaro_similarity.qmd#duckops.str.jaro_similarity) | The Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1. |
| [str.jaro_winkler_similarity](str.jaro_winkler_similarity.qmd#duckops.str.jaro_winkler_similarity) | The Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1. |
| [str.lcase](str.lcase.qmd#duckops.str.lcase) | Alias of lower. Convert string to lower case |
| [str.left](str.left.qmd#duckops.str.left) | Extract the left-most count characters |
| [str.left_grapheme](str.left_grapheme.qmd#duckops.str.left_grapheme) | Extract the left-most grapheme clusters |
| [str.length](str.length.qmd#duckops.str.length) | Number of characters in string |
| [str.length_grapheme](str.length_grapheme.qmd#duckops.str.length_grapheme) | Number of grapheme clusters in string |
| [str.levenshtein](str.levenshtein.qmd#duckops.str.levenshtein) | The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different. |
| [str.like_escape](str.like_escape.qmd#duckops.str.like_escape) | Returns true if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string. |
| [str.list_element](str.list_element.qmd#duckops.str.list_element) | An alias for array_extract. |
| [str.list_extract](str.list_extract.qmd#duckops.str.list_extract) | An alias for array_extract. |
| [str.lower](str.lower.qmd#duckops.str.lower) | Convert string to lower case |
| [str.lpad](str.lpad.qmd#duckops.str.lpad) | Pads the string with the character from the left until it has count characters |
| [str.ltrim](str.ltrim.qmd#duckops.str.ltrim) | Removes any spaces from the left side of the string |
| [str.md5](str.md5.qmd#duckops.str.md5) | Returns the MD5 hash of the value |
| [str.mismatches](str.mismatches.qmd#duckops.str.mismatches) | The number of positions with different characters for 2 strings of equal length. Different case is considered different. |
| [str.nfc_normalize](str.nfc_normalize.qmd#duckops.str.nfc_normalize) | Convert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not. |
| [str.not_like_escape](str.not_like_escape.qmd#duckops.str.not_like_escape) | Returns false if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string. |
| [str.ord](str.ord.qmd#duckops.str.ord) | Return ASCII character code of the leftmost character in a string. |
| [str.position](str.position.qmd#duckops.str.position) | Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found. |
| [str.prefix](str.prefix.qmd#duckops.str.prefix) | Return true if string starts with search_string. |
| [str.printf](str.printf.qmd#duckops.str.printf) | Formats a string using printf syntax |
| [str.regexp_extract](str.regexp_extract.qmd#duckops.str.regexp_extract) | Split the string along the regex and extract first occurrence of group |
| [str.regexp_full_match](str.regexp_full_match.qmd#duckops.str.regexp_full_match) | Returns true if the entire string matches the regex (see Pattern Matching) |
| [str.regexp_matches](str.regexp_matches.qmd#duckops.str.regexp_matches) | Returns true if a part of string matches the regex (see Pattern Matching) |
| [str.regexp_replace](str.regexp_replace.qmd#duckops.str.regexp_replace) | Replaces the first occurrence of regex with the replacement, use 'g' modifier to replace all occurrences instead (see Pattern Matching) |
| [str.regexp_split_to_array](str.regexp_split_to_array.qmd#duckops.str.regexp_split_to_array) | Alias of string_split_regex. Splits the string along the regex |
| [str.repeat](str.repeat.qmd#duckops.str.repeat) | Repeats the string count number of times |
| [str.replace](str.replace.qmd#duckops.str.replace) | Replaces any occurrences of the source with target in string |
| [str.reverse](str.reverse.qmd#duckops.str.reverse) | Reverses the string |
| [str.right](str.right.qmd#duckops.str.right) | Extract the right-most count characters |
| [str.right_grapheme](str.right_grapheme.qmd#duckops.str.right_grapheme) | Extract the right-most count grapheme clusters |
| [str.rpad](str.rpad.qmd#duckops.str.rpad) | Pads the string with the character from the right until it has count characters |
| [str.rtrim](str.rtrim.qmd#duckops.str.rtrim) | Removes any spaces from the right side of the string |
| [str.starts_with](str.starts_with.qmd#duckops.str.starts_with) | Return true if string begins with search_string |
| [str.str_split](str.str_split.qmd#duckops.str.str_split) | Alias of string_split. Splits the string along the separator |
| [str.str_split_regex](str.str_split_regex.qmd#duckops.str.str_split_regex) | Alias of string_split_regex. Splits the string along the regex |
| [str.string_split](str.string_split.qmd#duckops.str.string_split) | Splits the string along the separator |
| [str.string_split_regex](str.string_split_regex.qmd#duckops.str.string_split_regex) | Splits the string along the regex |
| [str.string_to_array](str.string_to_array.qmd#duckops.str.string_to_array) | Alias of string_split. Splits the string along the separator |
| [str.strip_accents](str.strip_accents.qmd#duckops.str.strip_accents) | Strips accents from string |
| [str.strlen](str.strlen.qmd#duckops.str.strlen) | Number of bytes in string |
| [str.strpos](str.strpos.qmd#duckops.str.strpos) | Alias of instr. Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found. |
| [str.substr](str.substr.qmd#duckops.str.substr) | Alias of substring. Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string. |
| [str.substring](str.substring.qmd#duckops.str.substring) | Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string. |
| [str.substring_grapheme](str.substring_grapheme.qmd#duckops.str.substring_grapheme) | Extract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string. |
| [str.suffix](str.suffix.qmd#duckops.str.suffix) | Return true if string ends with search_string. |
| [str.to_base64](str.to_base64.qmd#duckops.str.to_base64) | Convert a blob to a base64 encoded string. Alias of base64. |
| [str.trim](str.trim.qmd#duckops.str.trim) | Removes any spaces from either side of the string |
| [str.ucase](str.ucase.qmd#duckops.str.ucase) | Alias of upper. Convert string to upper case |
| [str.unicode](str.unicode.qmd#duckops.str.unicode) | Returns the unicode code of the first character of the string |
| [str.upper](str.upper.qmd#duckops.str.upper) | Convert string to upper case |

## Unknown



| | |
| --- | --- |
| [unknown.add](unknown.add.qmd#duckops.unknown.add) | \| duckdb example \| result \| |
| [unknown.arbitrary](unknown.arbitrary.qmd#duckops.unknown.arbitrary) | \| duckdb example \| result \| |
| [unknown.argmax](unknown.argmax.qmd#duckops.unknown.argmax) | \| duckdb example \| result \| |
| [unknown.argmin](unknown.argmin.qmd#duckops.unknown.argmin) | \| duckdb example \| result \| |
| [unknown.array_agg](unknown.array_agg.qmd#duckops.unknown.array_agg) | \| duckdb example \| result \| |
| [unknown.bit_position](unknown.bit_position.qmd#duckops.unknown.bit_position) | \| duckdb example \| result \| |
| [unknown.combine](unknown.combine.qmd#duckops.unknown.combine) | \| duckdb example \| result \| |
| [unknown.constant_or_null](unknown.constant_or_null.qmd#duckops.unknown.constant_or_null) | \| duckdb example \| result \| |
| [unknown.count_star](unknown.count_star.qmd#duckops.unknown.count_star) | \| duckdb example \| result \| |
| [unknown.covar_samp](unknown.covar_samp.qmd#duckops.unknown.covar_samp) | \| duckdb example \| result \| |
| [unknown.current_database](unknown.current_database.qmd#duckops.unknown.current_database) | \| duckdb example \| result \| |
| [unknown.current_localtime](unknown.current_localtime.qmd#duckops.unknown.current_localtime) | \| duckdb example \| result \| |
| [unknown.current_query](unknown.current_query.qmd#duckops.unknown.current_query) | \| duckdb example \| result \| |
| [unknown.divide](unknown.divide.qmd#duckops.unknown.divide) | \| duckdb example \| result \| |
| [unknown.enum_code](unknown.enum_code.qmd#duckops.unknown.enum_code) | \| duckdb example \| result \| |
| [unknown.enum_first](unknown.enum_first.qmd#duckops.unknown.enum_first) | \| duckdb example \| result \| |
| [unknown.enum_last](unknown.enum_last.qmd#duckops.unknown.enum_last) | \| duckdb example \| result \| |
| [unknown.enum_range](unknown.enum_range.qmd#duckops.unknown.enum_range) | \| duckdb example \| result \| |
| [unknown.enum_range_boundary](unknown.enum_range_boundary.qmd#duckops.unknown.enum_range_boundary) | \| duckdb example \| result \| |
| [unknown.excel_text](unknown.excel_text.qmd#duckops.unknown.excel_text) | \| duckdb example \| result \| |
| [unknown.exp](unknown.exp.qmd#duckops.unknown.exp) | \| duckdb example \| result \| |
| [unknown.finalize](unknown.finalize.qmd#duckops.unknown.finalize) | \| duckdb example \| result \| |
| [unknown.flatten](unknown.flatten.qmd#duckops.unknown.flatten) | \| duckdb example \| result \| |
| [unknown.get_bit](unknown.get_bit.qmd#duckops.unknown.get_bit) | \| duckdb example \| result \| |
| [unknown.group_concat](unknown.group_concat.qmd#duckops.unknown.group_concat) | \| duckdb example \| result \| |
| [unknown.ilike_escape](unknown.ilike_escape.qmd#duckops.unknown.ilike_escape) | \| duckdb example \| result \| |
| [unknown.json_extract_path](unknown.json_extract_path.qmd#duckops.unknown.json_extract_path) | \| duckdb example \| result \| |
| [unknown.json_extract_path_text](unknown.json_extract_path_text.qmd#duckops.unknown.json_extract_path_text) | \| duckdb example \| result \| |
| [unknown.kahan_sum](unknown.kahan_sum.qmd#duckops.unknown.kahan_sum) | \| duckdb example \| result \| |
| [unknown.max_by](unknown.max_by.qmd#duckops.unknown.max_by) | \| duckdb example \| result \| |
| [unknown.md5_number](unknown.md5_number.qmd#duckops.unknown.md5_number) | \| duckdb example \| result \| |
| [unknown.md5_number_lower](unknown.md5_number_lower.qmd#duckops.unknown.md5_number_lower) | \| duckdb example \| result \| |
| [unknown.md5_number_upper](unknown.md5_number_upper.qmd#duckops.unknown.md5_number_upper) | \| duckdb example \| result \| |
| [unknown.mean](unknown.mean.qmd#duckops.unknown.mean) | \| duckdb example \| result \| |
| [unknown.min_by](unknown.min_by.qmd#duckops.unknown.min_by) | \| duckdb example \| result \| |
| [unknown.mod](unknown.mod.qmd#duckops.unknown.mod) | \| duckdb example \| result \| |
| [unknown.multiply](unknown.multiply.qmd#duckops.unknown.multiply) | \| duckdb example \| result \| |
| [unknown.not_ilike_escape](unknown.not_ilike_escape.qmd#duckops.unknown.not_ilike_escape) | \| duckdb example \| result \| |
| [unknown.quantile](unknown.quantile.qmd#duckops.unknown.quantile) | \| duckdb example \| result \| |
| [unknown.sem](unknown.sem.qmd#duckops.unknown.sem) | \| duckdb example \| result \| |
| [unknown.set_bit](unknown.set_bit.qmd#duckops.unknown.set_bit) | \| duckdb example \| result \| |
| [unknown.split](unknown.split.qmd#duckops.unknown.split) | \| duckdb example \| result \| |
| [unknown.stddev](unknown.stddev.qmd#duckops.unknown.stddev) | \| duckdb example \| result \| |
| [unknown.stem](unknown.stem.qmd#duckops.unknown.stem) | \| duckdb example \| result \| |
| [unknown.subtract](unknown.subtract.qmd#duckops.unknown.subtract) | \| duckdb example \| result \| |
| [unknown.sumKahan](unknown.sumKahan.qmd#duckops.unknown.sumKahan) | \| duckdb example \| result \| |
| [unknown.sum_no_overflow](unknown.sum_no_overflow.qmd#duckops.unknown.sum_no_overflow) | \| duckdb example \| result \| |
| [unknown.text](unknown.text.qmd#duckops.unknown.text) | \| duckdb example \| result \| |
| [unknown.translate](unknown.translate.qmd#duckops.unknown.translate) | \| duckdb example \| result \| |
| [unknown.variance](unknown.variance.qmd#duckops.unknown.variance) | \| duckdb example \| result \| |
