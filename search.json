[
  {
    "objectID": "get-started/basic-datetime.html",
    "href": "get-started/basic-datetime.html",
    "title": "Dates and times",
    "section": "",
    "text": "from siuba import *\nfrom siuba.sql import sql_raw\nfrom duckops import all as op\nimport duckops as dop\nfrom duckops._core import lit, _query_call\nimport duckdb\n\nimport pandas as pd\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"duckdb:///:memory:\")\ncon = duckdb.connect()\n\ndf = pd.DataFrame({\"date\": pd.to_datetime([\"2021-01-01 01:02:03\"])})\n\ntbl_df = tbl(engine, \"df\", df)\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n\nimport datetime\nfrom duckops import _types\ntbl_df &gt;&gt; mutate(res = _.date - dop.dt.to_years(1), res2 = dop.dt.date_part(\"years\", _.date)) &gt;&gt; show_query()\n\ntbl_df &gt;&gt; mutate(res = _.date - datetime.datetime(2020, 1, 1, 1, 1, 1)) &gt;&gt; show_query()\n\ntbl_df &gt;&gt; mutate(res = _.date - _types.Interval(1, \"years\")) &gt;&gt; show_query()\n\nCONVERTING\nSELECT df.date, df.date - INTERVAL '1 years' AS res, date_part('years', df.date) AS res2 \nFROM df\nSELECT df.date, df.date - Timestamp '2020-01-01 01:01:01' AS res \nFROM df\nCONVERTING\nSELECT df.date, df.date - INTERVAL '1 years' AS res \nFROM df\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\ndate\nres\n\n\n\n\n0\n2021-01-01 01:02:03\n2020-01-01 01:02:03\n\n\n\n\n# .. may have more rows\n\n\n\nfrom duckops._core import _query_call\nfrom sqlalchemy import sql\n\n(tbl_df\n    &gt;&gt; mutate(\n      time = op.now()\n    )\n    &gt;&gt; show_query()\n)\n\nSELECT df.date, Timestamp '2023-04-10 18:02:05.877000' AS time \nFROM df\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\ndate\ntime\n\n\n\n\n0\n2021-01-01 01:02:03\n2023-04-10 18:02:05.877\n\n\n\n\n# .. may have more rows\n\n\n\n(tbl_df\n    &gt;&gt; mutate(\n      time = op.now(),\n      today = op.today(),\n      timedelta = op.to_years(1),\n      test = _.date - sql_raw(\"INTERVAL '1 YEAR'\")\n    )\n    &gt;&gt; collect()\n)\n\nCONVERTING\n\n\n\n\n\n\n\n\n\ndate\ntime\ntoday\ntimedelta\ntest\n\n\n\n\n0\n2021-01-01 01:02:03\n2023-04-10 18:02:05.895\n2023-04-10\n360 days\n2020-01-01 01:02:03\n\n\n\n\n\n\n\n\nimport polars as pl\nimport datetime\npl.DataFrame({\"a\": datetime.date.today()})\n\n\nshape: (1, 1)\n\n\n\na\n\n\ndate\n\n\n\n\n2023-04-10\n\n\n\n\n\n\n\nfrom sqlalchemy import sql\nimport datetime\nsql.cast(\"2020-01-01\", datetime.date)\n\n\nfrom duckops import _types\n\ntbl_df &gt;&gt; mutate(res = _types.cast(_.date, _types.DateTime())) &gt;&gt; show_query()\n\ntbl_df &gt;&gt; mutate(res = _types.cast(\"1 year\", _types.Interval())) &gt;&gt; show_query()\n\nclass NewThing: ...\ntbl_df &gt;&gt; mutate(abc = 1, res = _.abc - NewThing()) &gt;&gt; show_query()\n\n\nfrom duckops._types import Interval\nimport pandas as pd\n\npd.to_datetime([\"2020-01-01\"]) - Interval(\"1 years\")"
  },
  {
    "objectID": "get-started/challenges.html",
    "href": "get-started/challenges.html",
    "title": "Challenges",
    "section": "",
    "text": "This page details some outstanding questions and challenges to be resolved in duckops (and the way it interacts with siuba)."
  },
  {
    "objectID": "get-started/challenges.html#eager-evaluation-makes-laziness-hard",
    "href": "get-started/challenges.html#eager-evaluation-makes-laziness-hard",
    "title": "Challenges",
    "section": "Eager evaluation makes laziness hard",
    "text": "Eager evaluation makes laziness hard\n\nThe challenge\nNotice that by default, functions return results:\n\nimport pandas as pd\nfrom duckops.all import list_pack\n\n\nlist_pack(3, 4, 5)\n\n[3, 4, 5]\n\n\n\nser = pd.Series([0, 1, 2])\n\nlist_pack(ser, 3, 4)\n\n0    [0, 3, 4]\n1    [1, 3, 4]\n2    [2, 3, 4]\ndtype: object\n\n\nThis is useful for quickly seeing / using the results of one operation. However, it comes at the expense of making lazy operations more challenging.\nCurrently, at least one argument must be lazy, in order to trigger a lazy result.\n\nfrom siuba.siu import Lazy\n\nlist_pack(Lazy(3), 4, 5)\n\n█─'__call__'\n├─█─'__custom_func__'\n│ └─&lt;function list_pack at 0x125a7c5e0&gt;\n├─█─'&lt;lazy&gt;'\n│ └─3\n├─4\n└─5\n\n\nThis often works okay, since when using SQL many functions run on columns of data.\n\nfrom sqlalchemy import create_engine\nfrom siuba import tbl, _, mutate, show_query\n\nengine = create_engine(\"duckdb:///:memory:\")\ndf = pd.DataFrame({\"x\": [1, 2, 3]})\n\n(tbl(engine, \"df\", df)\n    &gt;&gt; mutate(res = list_pack(_.x, 4, 5))\n    &gt;&gt; show_query()\n)\n\nSELECT df.x, list_pack(df.x, 4, 5) AS res \nFROM df\n\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nx\nres\n\n\n\n\n0\n1\n[1, 4, 5]\n\n\n1\n2\n[2, 4, 5]\n\n\n2\n3\n[3, 4, 5]\n\n\n\n\n# .. may have more rows\n\n\nBut becomes a problem when you want to use functions to create a single value.\nFor example, early in duckops development the code below would error:\n\n(tbl(engine, \"df\", df)\n    &gt;&gt; mutate(res = list_pack(3, 4, 5))\n    &gt;&gt; show_query()\n)\n\nThis is because..\n\nlist_pack(3, 4, 5) returns an actual list.\nsiuba did not know how to translate a literal list to SQL.\n\n(It was resolved by adding the siuba.sql.translate.convert_literal generic.)\nOn the other hand, if you call list_pack in a lazy way, it always worked fine:\n\n(tbl(engine, \"df\", df)\n    &gt;&gt; mutate(res = list_pack(Lazy(3), 4, 5))\n    &gt;&gt; show_query()\n)\n\nSELECT df.x, list_pack(3, 4, 5) AS res \nFROM df\n\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nx\nres\n\n\n\n\n0\n1\n[3, 4, 5]\n\n\n1\n2\n[3, 4, 5]\n\n\n2\n3\n[3, 4, 5]\n\n\n\n\n# .. may have more rows\n\n\nSimilar issues occur currently with struct_pack, which returns a dictionary.\n\n\nHow polars handles this\nTools like polars handle this by making many functions lazy by default, with a eager argument. For example, the polars.concat_str function. (It groups these under the category “expressions”).\nOthers, like polars.date_range have an eager argument.\nStill others, like polars.count, change the resulting behavior depending on their inputs. For example, a Series input triggers eager behavior, but an expression input returns a new expression."
  },
  {
    "objectID": "get-started/challenges.html#conversion-of-intervals-to-timedeltas",
    "href": "get-started/challenges.html#conversion-of-intervals-to-timedeltas",
    "title": "Challenges",
    "section": "Conversion of Intervals to timedeltas",
    "text": "Conversion of Intervals to timedeltas\n\nThe challenge\nBy default, duckdb converts intervals to python datetime.timedelta objects.\n\nimport duckdb\n\nduckdb.execute(\"SELECT INTERVAL '1 hour'\").fetchone()[0]\n\ndatetime.timedelta(seconds=3600)\n\n\nThis works fine for units like \"1 hour\".\nHowever, because timedelta is incapable of representing the concept “1 year” (because the number of seconds in a year depends on the specific year), this just gets converted into 360 days.\n\nimport duckdb\n\nduckdb.execute(\"SELECT INTERVAL '1 year'\").fetchone()[0]\n\ndatetime.timedelta(days=360)\n\n\nThis is essentially a “legibility” problem. timedelta is a map of the territory duckdb intervals, and the map is not the territory.\n\n\nConsequences\nAs a result of the representation issues in timedelta, eager function calls can produce surprising behaviors.\n\nfrom datetime import datetime\nfrom duckops.all import to_years\n\ndatetime(2023, 1, 2) - to_years(3)\n\ndatetime.datetime(2020, 1, 18, 0, 0)\n\n\n\nfrom duckops.helpers import tbl_empty\nfrom siuba import mutate, _, show_query\nfrom siuba.siu import Lazy\n\ntbl_empty() &gt;&gt; mutate(res = datetime(2023, 1, 2) - to_years(Lazy(3))) &gt;&gt; show_query()\n\nSELECT Timestamp '2023-01-02 00:00:00' - to_years(3) AS res\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nres\n\n\n\n\n0\n2020-01-02\n\n\n\n\n# .. may have more rows\n\n\nNote that the eager version of the code subtracts the wrong number of days (3*360) from the date, while in the lazy version subtracting 3 years simply rewinds back the year part of the date.\n(This is more a general problem with dataframe tools integrating with python’s datetime.timedelta)"
  },
  {
    "objectID": "get-started/challenges.html#advanced-syntax-can-only-run-lazily",
    "href": "get-started/challenges.html#advanced-syntax-can-only-run-lazily",
    "title": "Challenges",
    "section": "Advanced syntax can only run lazily",
    "text": "Advanced syntax can only run lazily\n\nfrom duckops.syntax import list_comp, extract, lam\nfrom duckops.all import string_split, contains, list_transform\n\nfrom siuba import _, Fx\n\nlist_comp(\n  ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'],\n  string_split(Fx, \" \") &gt;&gt; extract(_, 1),\n  contains(Fx, \"1701\")\n)\n\n█─'__call__'\n├─█─'__custom_func__'\n│ └─&lt;function list_comp at 0x12695a830&gt;\n├─&lt;sqlalchemy.sql.functions.Function at 0x126971ed0; list_pack&gt;\n├─█─'__siu_pipe_call__'\n│ ├─_\n│ ├─█─'__call__'\n│ │ ├─█─'__custom_func__'\n│ │ │ └─&lt;function string_split at 0x125b3fd00&gt;\n│ │ ├─&lt;sqlalchemy.sql.elements.ColumnClause at 0x126971990; x&gt;\n│ │ └─' '\n│ └─█─'__call__'\n│   ├─█─'__custom_func__'\n│   │ └─&lt;function extract at 0x126959fc0&gt;\n│   ├─_\n│   └─1\n└─█─'__call__'\n  ├─█─'__custom_func__'\n  │ └─&lt;function contains at 0x125af7eb0&gt;\n  ├─&lt;sqlalchemy.sql.elements.ColumnClause at 0x126971990; x&gt;\n  └─'1701'\n\n\nMoreover, trying to force evaluation using a pipe, results in weirdness.\n\n(\n  ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'] &gt;&gt;\n  list_transform(\n      _,\n      lam(string_split(Fx, \" \"))\n  )\n)\n\nExpressions like list_transform are handled fine inside siuba’s lazy table queries."
  },
  {
    "objectID": "get-started/overview.html",
    "href": "get-started/overview.html",
    "title": "Overview",
    "section": "",
    "text": "The duckops package is an API for duckdb, which allows you to call duckdb functions directly from python. It also supports more advanced query generation using siuba. Importantly, siuba is just one implementation. duckops is designed to be extended!"
  },
  {
    "objectID": "get-started/overview.html#the-challenge",
    "href": "get-started/overview.html#the-challenge",
    "title": "Overview",
    "section": "The challenge",
    "text": "The challenge\nduckdb is an incredibly powerful tool. It can read from many places (e.g. cloud buckets), and even analyze pandas or polars DataFrames.\nBut in python you probably end up writing SQL queries inside strings:\n\nimport duckdb\n\nduckdb.execute(\"\"\"\n    SELECT concat('a', 'b', 'c')\n\"\"\").df()\n\n\n\n\n\n\n\n\nconcat('a', 'b', 'c')\n\n\n\n\n0\nabc\n\n\n\n\n\n\n\nWith duckops functions like concat are importable:\n\nfrom duckops.str import concat\n\nconcat(\"a\", \"b\", \"c\")\n\n'abc'\n\n\nThis makes them easy to find, provide documentation, and use type hints."
  },
  {
    "objectID": "get-started/overview.html#install",
    "href": "get-started/overview.html#install",
    "title": "Overview",
    "section": "Install",
    "text": "Install\nduckops can be installed using pip.\npip install duckops"
  },
  {
    "objectID": "get-started/overview.html#explore",
    "href": "get-started/overview.html#explore",
    "title": "Overview",
    "section": "Explore",
    "text": "Explore\n\nFunctions everywhere\n\nTest things super fast.\n\nfrom duckops.str import concat\n\nconcat(\"a\", \"b\", \"c\")\n\n'abc'\n\n\n\n\nGet nice docs\n\nhelp(concat)\n\nHelp on function concat in module duckops._functions.str:\n\nconcat(col0: 'StringLike', *args: 'StringLike') -&gt; 'StringLike'\n    Concatenate many strings together\n    \n    | duckdb example | result |\n    | -------------- | ------ |\n    | concat('Hello', ' ', 'World') | Hello World |\n\n\n\n\n\n\nTab around and find out\nimport duckops as dop\n\ndop.str.&lt;tab&gt;\n\n\nUse programmatically\n\nfrom functools import partial\nfrom duckops.str import concat_ws\n\ntab_concat = partial(concat_ws, \"-\")\ntab_concat(\"a\", \"b\", \"c\")\n\n'a-b-c'\n\n\n\n\nRun on pandas, polars, etc..\n\npolarspandas\n\n\n\nimport polars as pl\n\nser = pl.Series([\"a\", \"b\", \"c\"])\n\nconcat(ser, \"x\")\n\n\nshape: (3,)\n\n\n\n\n\n\nstr\n\n\n\n\n\"ax\"\n\n\n\"bx\"\n\n\n\"cx\"\n\n\n\n\n\n\n\n\n\nimport pandas as pd\n\nser = pd.Series([\"a\", \"b\", \"c\"])\n\nconcat(ser, \"x\")\n\n0    ax\n1    bx\n2    cx\ndtype: object"
  },
  {
    "objectID": "get-started/overview.html#query",
    "href": "get-started/overview.html#query",
    "title": "Overview",
    "section": "Query",
    "text": "Query\nSee siuba.org for building queries.\n\nBig example\n\nfrom duckops.helpers import to_duckdb\nfrom duckops.all import mean, stddev\n\nfrom siuba import _, select, group_by, summarize, across, Fx\nfrom siuba.data import penguins\n\nexpr_measures = _.startswith(\"bill\")\n\n(\n    to_duckdb(penguins, \"penguins\")\n    &gt;&gt; select(_.species, _.island, expr_measures)\n    &gt;&gt; group_by(_.species, _.island)\n    &gt;&gt; summarize(across(expr_measures, {\"mean\": mean(Fx), \"std\": stddev(Fx)}))\n)\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm_mean\nbill_length_mm_std\nbill_depth_mm_mean\nbill_depth_mm_std\n\n\n\n\n0\nAdelie\nTorgersen\n38.950980\n3.025318\n18.429412\n1.339447\n\n\n1\nAdelie\nBiscoe\n38.975000\n2.480916\n18.370455\n1.188820\n\n\n2\nAdelie\nDream\n38.501786\n2.465359\n18.251786\n1.133617\n\n\n3\nGentoo\nBiscoe\n47.504878\n3.081857\n14.982114\n0.981220\n\n\n4\nChinstrap\nDream\n48.833824\n3.339256\n18.420588\n1.135395\n\n\n\n\n# .. may have more rows\n\n\n\n\nPipe chains\nOne big challenge of functions is that calling one function on the result of another can create a hard-to-read sandwich of code.\n\nfrom duckops.all import list_aggr, string_split, upper\n\nlist_aggr(\n    string_split(\n        upper(\"Make it so\"),\n        \" \"\n    ),\n    \"string_agg\",\n    \".\"\n)\n\n'MAKE.IT.SO'\n\n\nsiuba addresses this by enabling function pipes, using the &gt;&gt; operator.\n\n(\"Make it so\"\n  &gt;&gt; upper(_)\n  &gt;&gt; string_split(_, \" \")\n  &gt;&gt; list_aggr(_, \"string_agg\", \".\")\n)\n\n'MAKE.IT.SO'"
  },
  {
    "objectID": "get-started/overview.html#extend",
    "href": "get-started/overview.html#extend",
    "title": "Overview",
    "section": "Extend",
    "text": "Extend\n\nNew backends\n\nclass RadSeries():\n    def __init__(self, d: list):\n        self.d = d\n\n\n# setup ----\n\nfrom duckops.core.data_style import IsConcrete, data_style\n\n\nclass IsConcreteRad(IsConcrete): ...\n\n@data_style.register\ndef _ds_rad(arg: RadSeries): return IsConcreteRad()\n\n\n\n# implementation ----\n\nfrom duckops.str import contains\n\n\n@contains.register\ndef _contains_rad(codata: IsConcreteRad, data, search_string):\n    return [search_string in x for x in data.d]\n\n\ncontains(RadSeries([\"abc\", \"xyz\"]), \"y\")\n\n[False, True]"
  },
  {
    "objectID": "cases.html",
    "href": "cases.html",
    "title": "Tricky Cases",
    "section": "",
    "text": "There are three kinds of dispatchables\n\nliterals:\n\nsupported base python objects (e.g. int)\nduckops.types classes\n\nconcrete columns:\n\npandas series\npolars series\n\nsymbolics:\n\nlazy expressions\nthings wrapped in Lazy\n\n\n(what are sqla columns? sqla literals?)\n\n\n\n\nop() -&gt; literal\nop(literal, literal) -&gt; literal\nop(literal, concrete) -&gt; concrete\ncalls can’t mix concretes\nop(*, Lazy(…)) -&gt; Lazy\n\n\n\n\n\nDispatch not necessarily based on first argument.\nMust guarantee composability\nNeed remove aliases (e.g. datesub -&gt; date_sub)\n\n\n\n\n\nRepresent exactly the duckdb construct. E.g. Date represents a duckdb Date.\n\n\ndt.to_years(1)          # Interval.from_int(\"years\", 1)\ndt.date_part(\"year\", Date(\"1992-09-20\"))    # 1992\ndt.date_part(\"year\", Lazy(Date(\"1992-09-20\")))    # &lt;Lazy&gt; \ndt.date_part(\"year\", _.x)       # &lt;Lazy&gt;\ndt.date_part(\"year\", pd_ser)    # &lt;Series&gt;\ntoday(_)                        # &lt;Lazy&gt;\ntoday()                         # &lt;Date&gt;\nDate(\"1992-03-22\") + Interval(5, \"DAY\")   # Date(1992-03-27)\n\n\n\nstruct_insert({'a': 1, 'b': 2, 'c': 3}, d = 4)          # Struct({...})\nstruct_insert(Struct(a = 1, b = 2, c = 3), d = 4)       # Struct({...})\n\nStruct(a = 1, b = pd_ser)               # &lt;Series&gt;\n\nd = Struct(a = 1, b = 2, c = 3)\nd.a         # 1\nd[\"a\"]      # 1\n\nLazy(d).a   # &lt;Lazy&gt;\n\n???         # d.*\n\n\n\n\nLiteral hints to help with completions.\n\ne.g. complete “day” in Interval(1, \"day\")\n\n\n\n\n\n\n\n\nconcat(\"a\", \"b\")         # \"ab\"\nconcat(\"a\", pd_ser)      # &lt;Series&gt;\ndate_part(\"year\", Interval(14, \"months\"))       # 1\ndate_diff(pd_ser, Interval(1, \"year\"))          # &lt;Series&gt;\ndate_part(ser_a, ser_b)                         # &lt;Series&gt;\ndate_diff(Timestamp(\"1992-03-12\"), Interval(1, \"year\"))     # \"1992-03-12\"\ncurrent_date()\n\n# column after many native types\nconcat(\"a\", \"b\", \"c\", \"d\", pd_ser, \"e\")         # &lt;Series&gt;\n\n# infix operators with dop.types\npd_ser - Interval(1, \"year\")                    # &lt;Series&gt;\n\n\n\nf(\"a\", _.x)\n_.x - Interval(1, \"year\")\ncurrent_date()\n\n\n\nf(pd_ser, _.x)\n\nrow(Interval(1, \"year\"), 2)         # only works symbolically?\n\n\n\n\n\n\nCalls like current_date become..\n\neager: current_date()\nlazy: current_date(_)\n\nSimilarly, constructors are called (INTERVAL \"2 months\" becomes Interval(2, \"months\"))\n\n\n\n\nUse cast instead of ::\nUse concat instead of || (check how sqlalchemy handles addition)\n_.x[0] translated to literal SQL\n\nwhat about _.x[_.y]? does this work in duckdb?\n\n\n\n\n\n\n\n\n\noverload&lt;StringLike, DateLike&gt;\noverload&lt;ListLike, Datelike&gt;\noverload&lt;Series, Series&gt;\n\n\n\n\n\noverload&lt;*varchar&gt;"
  },
  {
    "objectID": "cases.html#rules",
    "href": "cases.html#rules",
    "title": "Tricky Cases",
    "section": "",
    "text": "There are three kinds of dispatchables\n\nliterals:\n\nsupported base python objects (e.g. int)\nduckops.types classes\n\nconcrete columns:\n\npandas series\npolars series\n\nsymbolics:\n\nlazy expressions\nthings wrapped in Lazy\n\n\n(what are sqla columns? sqla literals?)\n\n\n\n\nop() -&gt; literal\nop(literal, literal) -&gt; literal\nop(literal, concrete) -&gt; concrete\ncalls can’t mix concretes\nop(*, Lazy(…)) -&gt; Lazy\n\n\n\n\n\nDispatch not necessarily based on first argument.\nMust guarantee composability\nNeed remove aliases (e.g. datesub -&gt; date_sub)"
  },
  {
    "objectID": "cases.html#custom-types",
    "href": "cases.html#custom-types",
    "title": "Tricky Cases",
    "section": "",
    "text": "Represent exactly the duckdb construct. E.g. Date represents a duckdb Date.\n\n\ndt.to_years(1)          # Interval.from_int(\"years\", 1)\ndt.date_part(\"year\", Date(\"1992-09-20\"))    # 1992\ndt.date_part(\"year\", Lazy(Date(\"1992-09-20\")))    # &lt;Lazy&gt; \ndt.date_part(\"year\", _.x)       # &lt;Lazy&gt;\ndt.date_part(\"year\", pd_ser)    # &lt;Series&gt;\ntoday(_)                        # &lt;Lazy&gt;\ntoday()                         # &lt;Date&gt;\nDate(\"1992-03-22\") + Interval(5, \"DAY\")   # Date(1992-03-27)\n\n\n\nstruct_insert({'a': 1, 'b': 2, 'c': 3}, d = 4)          # Struct({...})\nstruct_insert(Struct(a = 1, b = 2, c = 3), d = 4)       # Struct({...})\n\nStruct(a = 1, b = pd_ser)               # &lt;Series&gt;\n\nd = Struct(a = 1, b = 2, c = 3)\nd.a         # 1\nd[\"a\"]      # 1\n\nLazy(d).a   # &lt;Lazy&gt;\n\n???         # d.*\n\n\n\n\nLiteral hints to help with completions.\n\ne.g. complete “day” in Interval(1, \"day\")"
  },
  {
    "objectID": "cases.html#operations-1",
    "href": "cases.html#operations-1",
    "title": "Tricky Cases",
    "section": "",
    "text": "concat(\"a\", \"b\")         # \"ab\"\nconcat(\"a\", pd_ser)      # &lt;Series&gt;\ndate_part(\"year\", Interval(14, \"months\"))       # 1\ndate_diff(pd_ser, Interval(1, \"year\"))          # &lt;Series&gt;\ndate_part(ser_a, ser_b)                         # &lt;Series&gt;\ndate_diff(Timestamp(\"1992-03-12\"), Interval(1, \"year\"))     # \"1992-03-12\"\ncurrent_date()\n\n# column after many native types\nconcat(\"a\", \"b\", \"c\", \"d\", pd_ser, \"e\")         # &lt;Series&gt;\n\n# infix operators with dop.types\npd_ser - Interval(1, \"year\")                    # &lt;Series&gt;\n\n\n\nf(\"a\", _.x)\n_.x - Interval(1, \"year\")\ncurrent_date()\n\n\n\nf(pd_ser, _.x)\n\nrow(Interval(1, \"year\"), 2)         # only works symbolically?"
  },
  {
    "objectID": "cases.html#syntax-mappings",
    "href": "cases.html#syntax-mappings",
    "title": "Tricky Cases",
    "section": "",
    "text": "Calls like current_date become..\n\neager: current_date()\nlazy: current_date(_)\n\nSimilarly, constructors are called (INTERVAL \"2 months\" becomes Interval(2, \"months\"))\n\n\n\n\nUse cast instead of ::\nUse concat instead of || (check how sqlalchemy handles addition)\n_.x[0] translated to literal SQL\n\nwhat about _.x[_.y]? does this work in duckdb?"
  },
  {
    "objectID": "cases.html#overloads",
    "href": "cases.html#overloads",
    "title": "Tricky Cases",
    "section": "",
    "text": "overload&lt;StringLike, DateLike&gt;\noverload&lt;ListLike, Datelike&gt;\noverload&lt;Series, Series&gt;\n\n\n\n\n\noverload&lt;*varchar&gt;"
  },
  {
    "objectID": "api/num.setseed.html",
    "href": "api/num.setseed.html",
    "title": "num.setseed",
    "section": "",
    "text": "num.setseed\nnum.setseed(col0)\nsets the seed to be used for the random function\n\n\n\nduckdb example\nresult\n\n\n\n\nsetseed(0.42)\nnan"
  },
  {
    "objectID": "api/unknown.md5_number_upper.html",
    "href": "api/unknown.md5_number_upper.html",
    "title": "unknown.md5_number_upper",
    "section": "",
    "text": "unknown.md5_number_upper\nunknown.md5_number_upper(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_transform.html",
    "href": "api/nested.list_transform.html",
    "title": "nested.list_transform",
    "section": "",
    "text": "nested.list_transform\nnested.list_transform(col0, col1)\nReturns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_transform(l, x -&gt; x + 1)\n[5, 6, 7]"
  },
  {
    "objectID": "api/num.least.html",
    "href": "api/num.least.html",
    "title": "num.least",
    "section": "",
    "text": "num.least\nnum.least(col0, *args)\nselects the smallest value\n\n\n\nduckdb example\nresult\n\n\n\n\nleast(3, 2, 4, 4)\n2"
  },
  {
    "objectID": "api/dt.current_date.html",
    "href": "api/dt.current_date.html",
    "title": "dt.current_date",
    "section": "",
    "text": "dt.current_date\ndt.current_date()\nCurrent date (at start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\ncurrent_date\n2022-10-08"
  },
  {
    "objectID": "api/nested.union_extract.html",
    "href": "api/nested.union_extract.html",
    "title": "nested.union_extract",
    "section": "",
    "text": "nested.union_extract\nnested.union_extract(col0, col1)\nExtract the value with the named tags from the union. NULL if the tag is not currently selected\n\n\n\nduckdb example\nresult\n\n\n\n\nunion_extract(s, ‘k’)\nhello"
  },
  {
    "objectID": "api/str.like_escape.html",
    "href": "api/str.like_escape.html",
    "title": "str.like_escape",
    "section": "",
    "text": "str.like_escape\nstr.like_escape(col0, col1, col2)\nReturns true if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\n\nduckdb example\nresult\n\n\n\n\nlike_escape(‘a%c’, ‘a\\(%c', '\\)’)\ntrue"
  },
  {
    "objectID": "api/unknown.enum_code.html",
    "href": "api/unknown.enum_code.html",
    "title": "unknown.enum_code",
    "section": "",
    "text": "unknown.enum_code\nunknown.enum_code(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.add.html",
    "href": "api/unknown.add.html",
    "title": "unknown.add",
    "section": "",
    "text": "unknown.add\nunknown.add(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.cot.html",
    "href": "api/num.cot.html",
    "title": "num.cot",
    "section": "",
    "text": "num.cot\nnum.cot(col0)\ncomputes the cotangent of x\n\n\n\nduckdb example\nresult\n\n\n\n\ncot(0.5)\n1.830487721712452"
  },
  {
    "objectID": "api/str.unicode.html",
    "href": "api/str.unicode.html",
    "title": "str.unicode",
    "section": "",
    "text": "str.unicode\nstr.unicode(col0)\nReturns the unicode code of the first character of the string\n\n\n\nduckdb example\nresult\n\n\n\n\nunicode(‘ü’)\n252"
  },
  {
    "objectID": "api/num.abs.html",
    "href": "api/num.abs.html",
    "title": "num.abs",
    "section": "",
    "text": "num.abs\nnum.abs(col0)\nabsolute value\n\n\n\nduckdb example\nresult\n\n\n\n\nabs(-17.4)\n17.4"
  },
  {
    "objectID": "api/dt.century.html",
    "href": "api/dt.century.html",
    "title": "dt.century",
    "section": "",
    "text": "dt.century\ndt.century(col0)\nExtracts the century of a timestamp\n\n\n\nduckdb example\nresult\n\n\n\n\ncentury(TIMESTAMP ‘1992-03-22’)\n20"
  },
  {
    "objectID": "api/num.radians.html",
    "href": "api/num.radians.html",
    "title": "num.radians",
    "section": "",
    "text": "num.radians\nnum.radians(col0)\nconverts degrees to radians\n\n\n\nduckdb example\nresult\n\n\n\n\nradians(90)\n1.5707963267948966"
  },
  {
    "objectID": "api/num.cbrt.html",
    "href": "api/num.cbrt.html",
    "title": "num.cbrt",
    "section": "",
    "text": "num.cbrt\nnum.cbrt(col0)\nreturns the cube root of the number\n\n\n\nduckdb example\nresult\n\n\n\n\ncbrt(8)\n2"
  },
  {
    "objectID": "api/unknown.quantile.html",
    "href": "api/unknown.quantile.html",
    "title": "unknown.quantile",
    "section": "",
    "text": "unknown.quantile\nunknown.quantile(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.bar.html",
    "href": "api/str.bar.html",
    "title": "str.bar",
    "section": "",
    "text": "str.bar\nstr.bar(col0, col1, col2, col3)\nDraw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\n\n\n\nduckdb example\nresult\n\n\n\n\nbar(5, 0, 20, 10)\n██▌"
  },
  {
    "objectID": "api/str.position.html",
    "href": "api/str.position.html",
    "title": "str.position",
    "section": "",
    "text": "str.position\nstr.position(col0, col1)\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\n\nduckdb example\nresult\n\n\n\n\nposition(‘b’ in ‘abc’)\n2"
  },
  {
    "objectID": "api/str.substring_grapheme.html",
    "href": "api/str.substring_grapheme.html",
    "title": "str.substring_grapheme",
    "section": "",
    "text": "str.substring_grapheme\nstr.substring_grapheme(col0, col1, col2)\nExtract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\n\nduckdb example\nresult\n\n\n\n\nsubstring_grapheme(‘🦆🤦🏼‍♂️🤦🏽‍♀️🦆’, 3, 2)\n🤦🏽‍♀️🦆"
  },
  {
    "objectID": "api/dt.make_timestamptz.html",
    "href": "api/dt.make_timestamptz.html",
    "title": "dt.make_timestamptz",
    "section": "",
    "text": "dt.make_timestamptz\ndt.make_timestamptz(col0, col1, col2, col3, col4, col5)\nThe timestamp with time zone for the given parts in the current time zone\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nmake_timestamptz(1992, 9, 20, 13, 34, 27.123456)\n1992-09-20 13:34:27.123456-07"
  },
  {
    "objectID": "api/agg.list.html",
    "href": "api/agg.list.html",
    "title": "agg.list",
    "section": "",
    "text": "agg.list\nagg.list(col0)\nReturns a LIST containing all the values of a column.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist(A)\nnan"
  },
  {
    "objectID": "api/dt.quarter.html",
    "href": "api/dt.quarter.html",
    "title": "dt.quarter",
    "section": "",
    "text": "dt.quarter\ndt.quarter(col0)\nQuarter\n\n\n\nduckdb example\nresult\n\n\n\n\nquarter(date ‘1992-02-15’)\n1"
  },
  {
    "objectID": "api/str.ltrim.html",
    "href": "api/str.ltrim.html",
    "title": "str.ltrim",
    "section": "",
    "text": "str.ltrim\nstr.ltrim(col0)\nRemoves any spaces from the left side of the string\n\n\n\nduckdb example\nresult\n\n\n\n\nltrim(‘␣␣␣␣test␣␣’)\ntest␣␣"
  },
  {
    "objectID": "api/nested.list_reverse_sort.html",
    "href": "api/nested.list_reverse_sort.html",
    "title": "nested.list_reverse_sort",
    "section": "",
    "text": "nested.list_reverse_sort\nnested.list_reverse_sort(col0)\nSorts the elements of the list in reverse order. See the Sorting Lists section for more details about the null sorting order.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_reverse_sort([3, 6, 1, 2])\n[6, 3, 2, 1]"
  },
  {
    "objectID": "api/unknown.covar_samp.html",
    "href": "api/unknown.covar_samp.html",
    "title": "unknown.covar_samp",
    "section": "",
    "text": "unknown.covar_samp\nunknown.covar_samp(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.set_bit.html",
    "href": "api/unknown.set_bit.html",
    "title": "unknown.set_bit",
    "section": "",
    "text": "unknown.set_bit\nunknown.set_bit(col0, col1, col2)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.struct_insert.html",
    "href": "api/nested.struct_insert.html",
    "title": "nested.struct_insert",
    "section": "",
    "text": "nested.struct_insert\nnested.struct_insert(*args)\nAdd field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s).\n\n\n\nduckdb example\nresult\n\n\n\n\nstruct_insert({‘a’: 1}, b := 2)\n{‘a’: 1, ‘b’: 2}"
  },
  {
    "objectID": "api/dt.isodow.html",
    "href": "api/dt.isodow.html",
    "title": "dt.isodow",
    "section": "",
    "text": "dt.isodow\ndt.isodow(col0)\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\n\nduckdb example\nresult\n\n\n\n\nisodow(date ‘1992-02-15’)\n6"
  },
  {
    "objectID": "api/str.printf.html",
    "href": "api/str.printf.html",
    "title": "str.printf",
    "section": "",
    "text": "str.printf\nstr.printf(col0, *args)\nFormats a string using printf syntax\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nprintf(‘Benchmark “%s” took %d seconds’, ‘CSV’, 42)\nBenchmark “CSV” took 42 seconds"
  },
  {
    "objectID": "api/dt.decade.html",
    "href": "api/dt.decade.html",
    "title": "dt.decade",
    "section": "",
    "text": "dt.decade\ndt.decade(col0)\nDecade (year / 10)\n\n\n\nduckdb example\nresult\n\n\n\n\ndecade(date ‘1992-02-15’)\n199"
  },
  {
    "objectID": "api/str.suffix.html",
    "href": "api/str.suffix.html",
    "title": "str.suffix",
    "section": "",
    "text": "str.suffix\nstr.suffix(col0, col1)\nReturn true if string ends with search_string.\n\n\n\nduckdb example\nresult\n\n\n\n\nsuffix(‘abc’, ‘bc’)\ntrue"
  },
  {
    "objectID": "api/agg.arg_max.html",
    "href": "api/agg.arg_max.html",
    "title": "agg.arg_max",
    "section": "",
    "text": "agg.arg_max\nagg.arg_max(col0, col1)\nFinds the row with the maximum val. Calculates the arg expression at that row.\n\n\n\nduckdb example\nresult\n\n\n\n\narg_max(A,B)\nnan"
  },
  {
    "objectID": "api/num.round.html",
    "href": "api/num.round.html",
    "title": "num.round",
    "section": "",
    "text": "num.round\nnum.round(col0)\nround to s decimal places\n\n\n\nduckdb example\nresult\n\n\n\n\nround(42.4332, 2)\n42.43"
  },
  {
    "objectID": "api/unknown.current_query.html",
    "href": "api/unknown.current_query.html",
    "title": "unknown.current_query",
    "section": "",
    "text": "unknown.current_query\nunknown.current_query()\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.lower.html",
    "href": "api/str.lower.html",
    "title": "str.lower",
    "section": "",
    "text": "str.lower\nstr.lower(col0)\nConvert string to lower case\n\n\n\nduckdb example\nresult\n\n\n\n\nlower(‘Hello’)\nhello"
  },
  {
    "objectID": "api/unknown.divide.html",
    "href": "api/unknown.divide.html",
    "title": "unknown.divide",
    "section": "",
    "text": "unknown.divide\nunknown.divide(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.covar_pop.html",
    "href": "api/agg.covar_pop.html",
    "title": "agg.covar_pop",
    "section": "",
    "text": "agg.covar_pop\nagg.covar_pop(col0, col1)\nReturns the population covariance of input values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.bool_and.html",
    "href": "api/agg.bool_and.html",
    "title": "agg.bool_and",
    "section": "",
    "text": "agg.bool_and\nagg.bool_and(col0)\nReturns TRUE if every input value is TRUE, otherwise FALSE.\n\n\n\nduckdb example\nresult\n\n\n\n\nbool_and(A)\nnan"
  },
  {
    "objectID": "api/str.jaro_similarity.html",
    "href": "api/str.jaro_similarity.html",
    "title": "str.jaro_similarity",
    "section": "",
    "text": "str.jaro_similarity\nstr.jaro_similarity(col0, col1)\nThe Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\n\nduckdb example\nresult\n\n\n\n\njaro_similarity(‘duck’,‘duckdb’)\n0.88"
  },
  {
    "objectID": "api/nested.array_sort.html",
    "href": "api/nested.array_sort.html",
    "title": "nested.array_sort",
    "section": "",
    "text": "nested.array_sort\nnested.array_sort(col0)\nAlias for list_sort.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_sort([3, 6, 1, 2])\n[1, 2, 3, 6]"
  },
  {
    "objectID": "api/num.power.html",
    "href": "api/num.power.html",
    "title": "num.power",
    "section": "",
    "text": "num.power\nnum.power(col0, col1)\nAlias of pow. computes x to the power of y\n\n\n\nduckdb example\nresult\n\n\n\n\npower(2, 3)\n8"
  },
  {
    "objectID": "api/str.string_to_array.html",
    "href": "api/str.string_to_array.html",
    "title": "str.string_to_array",
    "section": "",
    "text": "str.string_to_array\nstr.string_to_array(col0, col1)\nAlias of string_split. Splits the string along the separator\n\n\n\nduckdb example\nresult\n\n\n\n\nstring_to_array(‘hello␣world’, ‘␣’)\n[‘hello’, ‘world’]"
  },
  {
    "objectID": "api/nested.list_contains.html",
    "href": "api/nested.list_contains.html",
    "title": "nested.list_contains",
    "section": "",
    "text": "nested.list_contains\nnested.list_contains(col0, col1)\nReturns true if the list contains the element.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_contains([1, 2, NULL], 1)\ntrue"
  },
  {
    "objectID": "api/dt.to_seconds.html",
    "href": "api/dt.to_seconds.html",
    "title": "dt.to_seconds",
    "section": "",
    "text": "dt.to_seconds\ndt.to_seconds(col0)\nConstruct a second interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_seconds(5)\nINTERVAL 5 SECOND"
  },
  {
    "objectID": "api/dt.to_milliseconds.html",
    "href": "api/dt.to_milliseconds.html",
    "title": "dt.to_milliseconds",
    "section": "",
    "text": "dt.to_milliseconds\ndt.to_milliseconds(col0)\nConstruct a millisecond interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_milliseconds(5)\nINTERVAL 5 MILLISECOND"
  },
  {
    "objectID": "api/str.format.html",
    "href": "api/str.format.html",
    "title": "str.format",
    "section": "",
    "text": "str.format\nstr.format(col0, *args)\nFormats a string using fmt syntax\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nformat(‘Benchmark “{}” took {} seconds’, ‘CSV’, 42)\nBenchmark “CSV” took 42 seconds"
  },
  {
    "objectID": "api/str.to_base64.html",
    "href": "api/str.to_base64.html",
    "title": "str.to_base64",
    "section": "",
    "text": "str.to_base64\nstr.to_base64(col0)\nConvert a blob to a base64 encoded string. Alias of base64.\n\n\n\nduckdb example\nresult\n\n\n\n\nto_base64(‘A’::blob)\nQQ=="
  },
  {
    "objectID": "api/dt.to_years.html",
    "href": "api/dt.to_years.html",
    "title": "dt.to_years",
    "section": "",
    "text": "dt.to_years\ndt.to_years(col0)\nConstruct a year interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_years(5)\nINTERVAL 5 YEAR"
  },
  {
    "objectID": "api/json.to_json.html",
    "href": "api/json.to_json.html",
    "title": "json.to_json",
    "section": "",
    "text": "json.to_json\njson.to_json(*args)\nCreate JSON from a value of any type. Our LIST is converted to a JSON array, and our STRUCT and MAP are converted to a JSON object\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.array_unique.html",
    "href": "api/nested.array_unique.html",
    "title": "nested.array_unique",
    "section": "",
    "text": "nested.array_unique\nnested.array_unique(col0)\nAlias for list_unique.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_unique([1, 1, NULL, -3, 1, 5])\n3"
  },
  {
    "objectID": "api/dt.datesub.html",
    "href": "api/dt.datesub.html",
    "title": "dt.datesub",
    "section": "",
    "text": "dt.datesub\ndt.datesub(col0, col1, col2)\nAlias of date_sub. The number of complete partitions between the dates\n\n\n\nduckdb example\nresult\n\n\n\n\ndatesub(‘month’, DATE ‘1992-09-15’, DATE ‘1992-11-14’)\n1"
  },
  {
    "objectID": "api/num.greatest.html",
    "href": "api/num.greatest.html",
    "title": "num.greatest",
    "section": "",
    "text": "num.greatest\nnum.greatest(col0, *args)\nselects the largest value\n\n\n\nduckdb example\nresult\n\n\n\n\ngreatest(3, 2, 4, 4)\n4"
  },
  {
    "objectID": "api/agg.bit_xor.html",
    "href": "api/agg.bit_xor.html",
    "title": "agg.bit_xor",
    "section": "",
    "text": "agg.bit_xor\nagg.bit_xor(col0)\nReturns the bitwise XOR of all bits in a given expression.\n\n\n\nduckdb example\nresult\n\n\n\n\nbit_xor(A)\nnan"
  },
  {
    "objectID": "api/dt.generate_series.html",
    "href": "api/dt.generate_series.html",
    "title": "dt.generate_series",
    "section": "",
    "text": "dt.generate_series\ndt.generate_series(col0)\nGenerate a table of timestamps in the closed range, stepping by the interval\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\ngenerate_series(TIMESTAMP ‘2001-04-10’, TIMESTAMP ‘2001-04-11’, INTERVAL 30 MINUTE)\nnan"
  },
  {
    "objectID": "api/num.log10.html",
    "href": "api/num.log10.html",
    "title": "num.log10",
    "section": "",
    "text": "num.log10\nnum.log10(col0)\nalias of log. computes the 10-log of x\n\n\n\nduckdb example\nresult\n\n\n\n\nlog10(1000)\n3"
  },
  {
    "objectID": "api/json.from_json_strict.html",
    "href": "api/json.from_json_strict.html",
    "title": "json.from_json_strict",
    "section": "",
    "text": "json.from_json_strict\njson.from_json_strict(col0, col1)\nAlias for json_transform_strict\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.monthname.html",
    "href": "api/dt.monthname.html",
    "title": "dt.monthname",
    "section": "",
    "text": "dt.monthname\ndt.monthname(col0)\nThe (English) name of the month\n\n\n\nduckdb example\nresult\n\n\n\n\nmonthname(DATE ‘1992-09-20’)\nSeptember"
  },
  {
    "objectID": "api/nested.array_position.html",
    "href": "api/nested.array_position.html",
    "title": "nested.array_position",
    "section": "",
    "text": "nested.array_position\nnested.array_position(col0, col1)\nAlias for list_position.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_position([1, 2, NULL], 2)\n2"
  },
  {
    "objectID": "api/nested.map_from_entries.html",
    "href": "api/nested.map_from_entries.html",
    "title": "nested.map_from_entries",
    "section": "",
    "text": "nested.map_from_entries\nnested.map_from_entries(*args)\nReturns a map created from the entries of the array\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nmap_from_entries([{k: 5, v: ‘val1’}, {k: 3, v: ‘val2’}]);\n{5=val1, 3=val2}"
  },
  {
    "objectID": "api/str.substring.html",
    "href": "api/str.substring.html",
    "title": "str.substring",
    "section": "",
    "text": "str.substring\nstr.substring(col0, col1, col2)\nExtract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\n\nduckdb example\nresult\n\n\n\n\nsubstring(‘Hello’, 2, 2)\nel"
  },
  {
    "objectID": "api/nested.list_unique.html",
    "href": "api/nested.list_unique.html",
    "title": "nested.list_unique",
    "section": "",
    "text": "nested.list_unique\nnested.list_unique(col0)\nCounts the unique elements of a list.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_unique([1, 1, NULL, -3, 1, 5])\n3"
  },
  {
    "objectID": "api/str.base64.html",
    "href": "api/str.base64.html",
    "title": "str.base64",
    "section": "",
    "text": "str.base64\nstr.base64(col0)\nConvert a blob to a base64 encoded string. Alias of to_base64.\n\n\n\nduckdb example\nresult\n\n\n\n\nbase64(‘A’::blob)\n‘QQ==’"
  },
  {
    "objectID": "api/dt.today.html",
    "href": "api/dt.today.html",
    "title": "dt.today",
    "section": "",
    "text": "dt.today\ndt.today()\nCurrent date (start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\ntoday()\n2022-10-08"
  },
  {
    "objectID": "api/unknown.sem.html",
    "href": "api/unknown.sem.html",
    "title": "unknown.sem",
    "section": "",
    "text": "unknown.sem\nunknown.sem(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.regr_r2.html",
    "href": "api/agg.regr_r2.html",
    "title": "agg.regr_r2",
    "section": "",
    "text": "agg.regr_r2\nagg.regr_r2(col0, col1)\nReturns the coefficient of determination for non-null pairs in a group.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.left.html",
    "href": "api/str.left.html",
    "title": "str.left",
    "section": "",
    "text": "str.left\nstr.left(col0, col1)\nExtract the left-most count characters\n\n\n\nduckdb example\nresult\n\n\n\n\nleft(‘Hello🦆’, 2)\nHe"
  },
  {
    "objectID": "api/agg.string_agg.html",
    "href": "api/agg.string_agg.html",
    "title": "agg.string_agg",
    "section": "",
    "text": "agg.string_agg\nagg.string_agg(col0)\nConcatenates the column string values with a separator\n\n\n\nduckdb example\nresult\n\n\n\n\nstring_agg(S, ‘,’)\nnan"
  },
  {
    "objectID": "api/agg.bool_or.html",
    "href": "api/agg.bool_or.html",
    "title": "agg.bool_or",
    "section": "",
    "text": "agg.bool_or\nagg.bool_or(col0)\nReturns TRUE if any input value is TRUE, otherwise FALSE.\n\n\n\nduckdb example\nresult\n\n\n\n\nbool_or(A)\nnan"
  },
  {
    "objectID": "api/str.lcase.html",
    "href": "api/str.lcase.html",
    "title": "str.lcase",
    "section": "",
    "text": "str.lcase\nstr.lcase(col0)\nAlias of lower. Convert string to lower case\n\n\n\nduckdb example\nresult\n\n\n\n\nlcase(‘Hello’)\nhello"
  },
  {
    "objectID": "api/dt.yearweek.html",
    "href": "api/dt.yearweek.html",
    "title": "dt.yearweek",
    "section": "",
    "text": "dt.yearweek\ndt.yearweek(col0)\nBIGINT of combined ISO Year number and 2-digit version of ISO Week number\n\n\n\nduckdb example\nresult\n\n\n\n\nyearweek(date ‘1992-02-15’)\n199207"
  },
  {
    "objectID": "api/str.str_split_regex.html",
    "href": "api/str.str_split_regex.html",
    "title": "str.str_split_regex",
    "section": "",
    "text": "str.str_split_regex\nstr.str_split_regex(col0, col1)\nAlias of string_split_regex. Splits the string along the regex\n\n\n\nduckdb example\nresult\n\n\n\n\nstr_split_regex(‘hello␣world; 42’, ‘;?␣’)\n[‘hello’, ‘world’, ‘42’]"
  },
  {
    "objectID": "api/num.signbit.html",
    "href": "api/num.signbit.html",
    "title": "num.signbit",
    "section": "",
    "text": "num.signbit\nnum.signbit(col0)\nreturns whether the signbit is set or not\n\n\n\nduckdb example\nresult\n\n\n\n\nsignbit(-0.0)\ntrue"
  },
  {
    "objectID": "api/nested.array_has.html",
    "href": "api/nested.array_has.html",
    "title": "nested.array_has",
    "section": "",
    "text": "nested.array_has\nnested.array_has(col0, col1)\nAlias for list_contains.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_has([1, 2, NULL], 1)\ntrue"
  },
  {
    "objectID": "api/json.json_merge_patch.html",
    "href": "api/json.json_merge_patch.html",
    "title": "json.json_merge_patch",
    "section": "",
    "text": "json.json_merge_patch\njson.json_merge_patch(*args)\nMerge two json documents together\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_cat.html",
    "href": "api/nested.list_cat.html",
    "title": "nested.list_cat",
    "section": "",
    "text": "nested.list_cat\nnested.list_cat(col0, col1)\nAlias for list_concat.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_cat([2, 3], [4, 5, 6])\n[2, 3, 4, 5, 6]"
  },
  {
    "objectID": "api/dt.date_part.html",
    "href": "api/dt.date_part.html",
    "title": "dt.date_part",
    "section": "",
    "text": "dt.date_part\ndt.date_part(col0, col1)\nGet the subfield (equivalent to extract)\n\n\n\nduckdb example\nresult\n\n\n\n\ndate_part(‘year’, DATE ‘1992-09-20’)\n1992"
  },
  {
    "objectID": "api/json.row_to_json.html",
    "href": "api/json.row_to_json.html",
    "title": "json.row_to_json",
    "section": "",
    "text": "json.row_to_json\njson.row_to_json(*args)\nAlias for to_json that only accepts STRUCT\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.length.html",
    "href": "api/str.length.html",
    "title": "str.length",
    "section": "",
    "text": "str.length\nstr.length(col0)\nNumber of characters in string\n\n\n\nduckdb example\nresult\n\n\n\n\nlength(‘Hello🦆’)\n6"
  },
  {
    "objectID": "api/json.json_extract_string.html",
    "href": "api/json.json_extract_string.html",
    "title": "json.json_extract_string",
    "section": "",
    "text": "json.json_extract_string\njson.json_extract_string(col0, col1)\nExtract VARCHAR from json at the given path. If path is a LIST, the result will be a LIST of VARCHAR\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.regexp_matches.html",
    "href": "api/str.regexp_matches.html",
    "title": "str.regexp_matches",
    "section": "",
    "text": "str.regexp_matches\nstr.regexp_matches(col0, col1)\nReturns true if a part of string matches the regex (see Pattern Matching)\n\n\n\nduckdb example\nresult\n\n\n\n\nregexp_matches(‘anabanana’, ’(an)*’)\ntrue"
  },
  {
    "objectID": "api/agg.bit_and.html",
    "href": "api/agg.bit_and.html",
    "title": "agg.bit_and",
    "section": "",
    "text": "agg.bit_and\nagg.bit_and(col0)\nReturns the bitwise AND of all bits in a given expression .\n\n\n\nduckdb example\nresult\n\n\n\n\nbit_and(A)\nnan"
  },
  {
    "objectID": "api/dt.month.html",
    "href": "api/dt.month.html",
    "title": "dt.month",
    "section": "",
    "text": "dt.month\ndt.month(col0)\nMonth\n\n\n\nduckdb example\nresult\n\n\n\n\nmonth(date ‘1992-02-15’)\n2"
  },
  {
    "objectID": "api/nested.array_aggr.html",
    "href": "api/nested.array_aggr.html",
    "title": "nested.array_aggr",
    "section": "",
    "text": "nested.array_aggr\nnested.array_aggr(col0, col1, *args)\nAlias for list_aggregate.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_aggr([1, 2, NULL], ‘min’)\n1"
  },
  {
    "objectID": "api/num.log.html",
    "href": "api/num.log.html",
    "title": "num.log",
    "section": "",
    "text": "num.log\nnum.log(col0)\ncomputes the 10-log of x\n\n\n\nduckdb example\nresult\n\n\n\n\nlog(100)\n2"
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "Function reference",
    "section": "",
    "text": "agg.any_value\nReturns the first non-null value from arg.\n\n\nagg.approx_count_distinct\nGives the approximate count of distintinct elements using HyperLogLog.\n\n\nagg.approx_quantile\nGives the approximate quantile using T-Digest.\n\n\nagg.arg_max\nFinds the row with the maximum val. Calculates the arg expression at that row.\n\n\nagg.arg_min\nFinds the row with the minimum val. Calculates the arg expression at that row.\n\n\nagg.avg\nCalculates the average value for all tuples in arg.\n\n\nagg.bit_and\nReturns the bitwise AND of all bits in a given expression .\n\n\nagg.bit_or\nReturns the bitwise OR of all bits in a given expression.\n\n\nagg.bit_xor\nReturns the bitwise XOR of all bits in a given expression.\n\n\nagg.bool_and\nReturns TRUE if every input value is TRUE, otherwise FALSE.\n\n\nagg.bool_or\nReturns TRUE if any input value is TRUE, otherwise FALSE.\n\n\nagg.corr\nReturns the correlation coefficient for non-null pairs in a group.\n\n\nagg.count\nCalculates the number of tuples tuples in arg.\n\n\nagg.covar_pop\nReturns the population covariance of input values.\n\n\nagg.entropy\nReturns the log-2 entropy of count input-values.\n\n\nagg.favg\nCalculates the average using a more accurate floating point summation (Kahan Sum).\n\n\nagg.first\nReturns the first value of a column.\n\n\nagg.fsum\nCalculates the sum using a more accurate floating point summation (Kahan Sum).\n\n\nagg.histogram\nReturns a LIST of STRUCTs with the fields bucket and count.\n\n\nagg.kurtosis\nReturns the excess kurtosis of all input values.\n\n\nagg.last\nReturns the last value of a column.\n\n\nagg.list\nReturns a LIST containing all the values of a column.\n\n\nagg.mad\nReturns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\n\n\nagg.max\nReturns the maximum value present in arg.\n\n\nagg.median\nReturns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.\n\n\nagg.min\nReturns the minumum value present in arg.\n\n\nagg.mode\nReturns the most frequent value for the values within x. NULL values are ignored.\n\n\nagg.product\nCalculates the product of all tuples in arg\n\n\nagg.quantile_cont\nReturns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\n\n\nagg.quantile_disc\nReturns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n\nagg.regr_avgx\nReturns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\nagg.regr_avgy\nReturns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\nagg.regr_count\nReturns the number of non-null number pairs in a group.\n\n\nagg.regr_intercept\nReturns the intercept of the univariate linear regression line for non-null pairs in a group.\n\n\nagg.regr_r2\nReturns the coefficient of determination for non-null pairs in a group.\n\n\nagg.regr_slope\nReturns the slope of the linear regression line for non-null pairs in a group.\n\n\nagg.regr_sxx\n-\n\n\nagg.regr_sxy\nReturns the population covariance of input values.\n\n\nagg.regr_syy\n-\n\n\nagg.reservoir_quantile\nGives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.\n\n\nagg.skewness\nReturns the skewness of all input values.\n\n\nagg.stddev_pop\nReturns the population standard deviation.\n\n\nagg.stddev_samp\nReturns the sample standard deviation.\n\n\nagg.string_agg\nConcatenates the column string values with a separator\n\n\nagg.sum\nCalculates the sum value for all tuples in arg.\n\n\nagg.var_pop\nReturns the population variance.\n\n\nagg.var_samp\nReturns the sample variance of all input values.\n\n\n\n\n\n\n\n\n\nblob.decode\nConvert blob to varchar. Fails if blob is not valid utf-8.\n\n\nblob.encode\nConvert varchar to blob. Converts utf-8 characters into literal encoding.\n\n\nblob.octet_length\nNumber of bytes in blob\n\n\n\n\n\n\n\n\n\ndt.age\nSubtract arguments, resulting in the time difference between the two timestamps\n\n\ndt.century\nExtracts the century of a timestamp\n\n\ndt.current_date\nCurrent date (at start of current transaction)\n\n\ndt.current_localtimestamp\nReturns a TIMESTAMP whose GMT bin values correspond to local date and time in the current time zone.\n\n\ndt.date_diff\nThe number of partition boundaries between the dates\n\n\ndt.date_part\nGet the subfield (equivalent to extract)\n\n\ndt.date_sub\nThe number of complete partitions between the dates\n\n\ndt.date_trunc\nTruncate to specified precision\n\n\ndt.datediff\nAlias of date_diff. The number of partition boundaries between the dates\n\n\ndt.datepart\nAlias of date_part. Get the subfield (equivalent to extract)\n\n\ndt.datesub\nAlias of date_sub. The number of complete partitions between the dates\n\n\ndt.datetrunc\nAlias of date_trunc. Truncate to specified precision\n\n\ndt.day\nDay\n\n\ndt.dayname\nThe (English) name of the weekday\n\n\ndt.dayofmonth\nDay (synonym)\n\n\ndt.dayofweek\nNumeric weekday (Sunday = 0, Saturday = 6)\n\n\ndt.dayofyear\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\ndt.decade\nDecade (year / 10)\n\n\ndt.epoch\nConverts a timestamp to the seconds since the epoch\n\n\ndt.epoch_ms\nConverts ms since epoch to a timestamp\n\n\ndt.era\nCalendar era\n\n\ndt.generate_series\nGenerate a table of timestamps in the closed range, stepping by the interval\n\n\ndt.get_current_time\nCurrent time (start of current transaction)\n\n\ndt.get_current_timestamp\nCurrent date and time (start of current transaction)\n\n\ndt.hour\nHours\n\n\ndt.isodow\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\ndt.isoyear\nISO Year number (Starts on Monday of week containing Jan 4th)\n\n\ndt.last_day\nThe last day of the corresponding month in the date\n\n\ndt.make_date\nThe date for the given parts\n\n\ndt.make_time\nThe time for the given parts\n\n\ndt.make_timestamp\nThe timestamp for the given parts\n\n\ndt.make_timestamptz\nThe timestamp with time zone for the given parts in the current time zone\n\n\ndt.microsecond\nSub-minute microseconds\n\n\ndt.millennium\nMillennium\n\n\ndt.millisecond\nSub-minute milliseconds\n\n\ndt.minute\nMinutes\n\n\ndt.month\nMonth\n\n\ndt.monthname\nThe (English) name of the month\n\n\ndt.now\nCurrent date and time (start of current transaction)\n\n\ndt.quarter\nQuarter\n\n\ndt.range\nGenerate a table of timestamps in the half open range, stepping by the interval\n\n\ndt.second\nSeconds\n\n\ndt.strftime\nConverts a date to a string according to the format string\n\n\ndt.strptime\nConverts string to timestamp according to the format string\n\n\ndt.time_bucket\nTruncate date by the specified interval bucket_width. Buckets are aligned relative to origin date. origin defaults to 2000-01-03 for buckets that don’t include a month or year interval, and to 2000-01-01 for month and year buckets.\n\n\ndt.timezone\nUse the date parts of the timestamp in GMT to construct a timestamp in the given time zone. Effectively, the argument is a “local” time.\n\n\ndt.timezone_hour\nTime zone offset hour portion\n\n\ndt.timezone_minute\nTime zone offset minutes portion\n\n\ndt.to_days\nConstruct a day interval\n\n\ndt.to_hours\nConstruct a hour interval\n\n\ndt.to_microseconds\nConstruct a microsecond interval\n\n\ndt.to_milliseconds\nConstruct a millisecond interval\n\n\ndt.to_minutes\nConstruct a minute interval\n\n\ndt.to_months\nConstruct a month interval\n\n\ndt.to_seconds\nConstruct a second interval\n\n\ndt.to_timestamp\nConverts sec since epoch to a timestamp\n\n\ndt.to_years\nConstruct a year interval\n\n\ndt.today\nCurrent date (start of current transaction)\n\n\ndt.transaction_timestamp\nCurrent date and time (start of current transaction)\n\n\ndt.week\nISO Week\n\n\ndt.weekday\nNumeric weekday synonym (Sunday = 0, Saturday = 6)\n\n\ndt.weekofyear\nISO Week (synonym)\n\n\ndt.year\nYear\n\n\ndt.yearweek\nBIGINT of combined ISO Year number and 2-digit version of ISO Week number\n\n\n\n\n\n\n\n\n\njson.array_to_json\nAlias for to_json that only accepts LIST\n\n\njson.from_json\nAlias for json_transform\n\n\njson.from_json_strict\nAlias for json_transform_strict\n\n\njson.json_array\nCreate a JSON array from any number of values\n\n\njson.json_array_length\nReturn the number of elements in the JSON array json, or 0 if it is not a JSON array. If path is specified, return the number of elements in the JSON array at the given path. If path is a LIST, the result will be LIST of array lengths\n\n\njson.json_contains\nReturns true if json_needle is contained in json_haystack. Both parameters are of JSON type, but json_needle can also be a numeric value or a string, however the string must be wrapped in double quotes\n\n\njson.json_extract\nExtract JSON from json at the given path. If path is a LIST, the result will be a LIST of JSON\n\n\njson.json_extract_string\nExtract VARCHAR from json at the given path. If path is a LIST, the result will be a LIST of VARCHAR\n\n\njson.json_keys\nReturns the keys of json as a LIST of VARCHAR, if json is a JSON object. If path is specified, return the keys of the JSON object at the given path. If path is a LIST, the result will be LIST of LIST of VARCHAR\n\n\njson.json_merge_patch\nMerge two json documents together\n\n\njson.json_object\nCreate a JSON object from any number of key, value pairs\n\n\njson.json_quote\nAlias for to_json\n\n\njson.json_structure\nReturn the structure of json. Throws an error if the structure is inconsistent (incompatible types in an array)\n\n\njson.json_transform\nTransform json according to the specified structure\n\n\njson.json_transform_strict\nSame as json_transform, but throws an error when type casting fails\n\n\njson.json_type\nReturn the type of the supplied json, which is one of OBJECT, ARRAY, BIGINT, UBIGINT, VARCHAR, BOOLEAN, NULL. If path is specified, return the type of the element at the given path. If path is a LIST, the result will be LIST of types\n\n\njson.json_valid\nReturn whether json is valid JSON\n\n\njson.row_to_json\nAlias for to_json that only accepts STRUCT\n\n\njson.to_json\nCreate JSON from a value of any type. Our LIST is converted to a JSON array, and our STRUCT and MAP are converted to a JSON object\n\n\n\n\n\n\n\n\n\nnested.array_aggr\nAlias for list_aggregate.\n\n\nnested.array_aggregate\nAlias for list_aggregate.\n\n\nnested.array_apply\nAlias for list_transform.\n\n\nnested.array_cat\nAlias for list_concat.\n\n\nnested.array_concat\nAlias for list_concat.\n\n\nnested.array_contains\nAlias for list_contains.\n\n\nnested.array_distinct\nAlias for list_distinct.\n\n\nnested.array_filter\nAlias for list_filter.\n\n\nnested.array_has\nAlias for list_contains.\n\n\nnested.array_indexof\nAlias for list_position.\n\n\nnested.array_length\nAlias for len.\n\n\nnested.array_position\nAlias for list_position.\n\n\nnested.array_reverse_sort\nAlias for list_reverse_sort.\n\n\nnested.array_sort\nAlias for list_sort.\n\n\nnested.array_transform\nAlias for list_transform.\n\n\nnested.array_unique\nAlias for list_unique.\n\n\nnested.cardinality\nReturn the size of the map (or the number of entries in the map).\n\n\nnested.element_at\nReturn a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\nnested.len\nReturn the length of the list.\n\n\nnested.list_aggr\nAlias for list_aggregate.\n\n\nnested.list_aggregate\nExecutes the aggregate function name on the elements of list. See the List Aggregates section for more details.\n\n\nnested.list_apply\nAlias for list_transform.\n\n\nnested.list_cat\nAlias for list_concat.\n\n\nnested.list_concat\nConcatenates two lists.\n\n\nnested.list_contains\nReturns true if the list contains the element.\n\n\nnested.list_distinct\nRemoves all duplicates and NULLs from a list. Does not preserve the original order.\n\n\nnested.list_filter\nConstructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions section for more details.\n\n\nnested.list_has\nAlias for list_contains.\n\n\nnested.list_indexof\nAlias for list_position.\n\n\nnested.list_pack\nAlias for list_value.\n\n\nnested.list_position\nReturns the index of the element if the list contains the element.\n\n\nnested.list_reverse_sort\nSorts the elements of the list in reverse order. See the Sorting Lists section for more details about the null sorting order.\n\n\nnested.list_slice\nExtract a sublist using slice conventions. NULLs are interpreted as the bounds of the LIST. Negative values are accepted.\n\n\nnested.list_sort\nSorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the null sorting order.\n\n\nnested.list_transform\nReturns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n\nnested.list_unique\nCounts the unique elements of a list.\n\n\nnested.list_value\nCreate a LIST containing the argument values.\n\n\nnested.map\nReturns an empty map.\n\n\nnested.map_extract\nAlias of element_at. Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\nnested.map_from_entries\nReturns a map created from the entries of the array\n\n\nnested.row\nCreate a STRUCT containing the argument values. If the values are column references, the entry name will be the column name; otherwise it will be the string ‘vN’ where N is the (1-based) position of the argument.\n\n\nnested.struct_extract\nExtract the named entry from the struct.\n\n\nnested.struct_insert\nAdd field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s).\n\n\nnested.struct_pack\nCreate a STRUCT containing the argument values. The entry name will be the bound variable name.\n\n\nnested.union_extract\nExtract the value with the named tags from the union. NULL if the tag is not currently selected\n\n\nnested.union_tag\nRetrieve the currently selected tag of the union as an Enum.\n\n\nnested.union_value\nCreate a single member UNION containing the argument value. The tag of the value will be the bound variable name.\n\n\n\n\n\n\n\n\n\nnum.abs\nabsolute value\n\n\nnum.acos\ncomputes the arccosine of x\n\n\nnum.asin\ncomputes the arcsine of x\n\n\nnum.atan\ncomputes the arctangent of x\n\n\nnum.atan2\ncomputes the arctangent (x, y)\n\n\nnum.bit_count\nreturns the number of bits that are set\n\n\nnum.cbrt\nreturns the cube root of the number\n\n\nnum.ceil\nrounds the number up\n\n\nnum.ceiling\nrounds the number up. Alias of ceil.\n\n\nnum.chr\nreturns a character which is corresponding the ASCII code value or Unicode code point\n\n\nnum.cos\ncomputes the cosine of x\n\n\nnum.cot\ncomputes the cotangent of x\n\n\nnum.degrees\nconverts radians to degrees\n\n\nnum.even\nround to next even number by rounding away from zero.\n\n\nnum.factorial\nSee ! operator. Computes the product of the current integer and all integers below it\n\n\nnum.floor\nrounds the number down\n\n\nnum.gamma\ninterpolation of (x-1) factorial (so decimal inputs are allowed)\n\n\nnum.greatest\nselects the largest value\n\n\nnum.isfinite\nReturns true if the floating point value is finite, false otherwise\n\n\nnum.isinf\nReturns true if the floating point value is infinite, false otherwise\n\n\nnum.isnan\nReturns true if the floating point value is not a number, false otherwise\n\n\nnum.least\nselects the smallest value\n\n\nnum.lgamma\ncomputes the log of the gamma function.\n\n\nnum.ln\ncomputes the natural logarithm of x\n\n\nnum.log\ncomputes the 10-log of x\n\n\nnum.log10\nalias of log. computes the 10-log of x\n\n\nnum.log2\ncomputes the 2-log of x\n\n\nnum.nextafter\nreturn the next floating point value after x in the direction of y\n\n\nnum.pi\nreturns the value of pi\n\n\nnum.pow\ncomputes x to the power of y\n\n\nnum.power\nAlias of pow. computes x to the power of y\n\n\nnum.radians\nconverts degrees to radians\n\n\nnum.random\nreturns a random number between 0 and 1\n\n\nnum.round\nround to s decimal places\n\n\nnum.setseed\nsets the seed to be used for the random function\n\n\nnum.sign\nreturns the sign of x as -1, 0 or 1\n\n\nnum.signbit\nreturns whether the signbit is set or not\n\n\nnum.sin\ncomputes the sin of x\n\n\nnum.sqrt\nreturns the square root of the number\n\n\nnum.tan\ncomputes the tangent of x\n\n\nnum.xor\nbitwise XOR\n\n\n\n\n\n\n\n\n\nstr.array_extract\nExtract a single character using a (1-based) index.\n\n\nstr.array_slice\nExtract a string using slice conventions. NULLs are interpreted as the bounds of the string. Negative values are accepted.\n\n\nstr.ascii\nReturns an integer that represents the Unicode code point of the first character of the string\n\n\nstr.bar\nDraw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\n\n\nstr.base64\nConvert a blob to a base64 encoded string. Alias of to_base64.\n\n\nstr.bit_length\nNumber of bits in a string.\n\n\nstr.concat\nConcatenate many strings together\n\n\nstr.concat_ws\nConcatenate strings together separated by the specified separator\n\n\nstr.contains\nReturn true if search_string is found within string\n\n\nstr.editdist3\nAlias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\nstr.format\nFormats a string using fmt syntax\n\n\nstr.from_base64\nConvert a base64 encoded string to a character string.\n\n\nstr.hamming\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\nstr.hash\nReturns an integer with the hash of the value\n\n\nstr.instr\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.jaccard\nThe Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.jaro_similarity\nThe Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.jaro_winkler_similarity\nThe Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.lcase\nAlias of lower. Convert string to lower case\n\n\nstr.left\nExtract the left-most count characters\n\n\nstr.left_grapheme\nExtract the left-most grapheme clusters\n\n\nstr.length\nNumber of characters in string\n\n\nstr.length_grapheme\nNumber of grapheme clusters in string\n\n\nstr.levenshtein\nThe minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\nstr.like_escape\nReturns true if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\nstr.list_element\nAn alias for array_extract.\n\n\nstr.list_extract\nAn alias for array_extract.\n\n\nstr.lower\nConvert string to lower case\n\n\nstr.lpad\nPads the string with the character from the left until it has count characters\n\n\nstr.ltrim\nRemoves any spaces from the left side of the string\n\n\nstr.md5\nReturns the MD5 hash of the value\n\n\nstr.mismatches\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\nstr.nfc_normalize\nConvert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not.\n\n\nstr.not_like_escape\nReturns false if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\nstr.ord\nReturn ASCII character code of the leftmost character in a string.\n\n\nstr.position\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.prefix\nReturn true if string starts with search_string.\n\n\nstr.printf\nFormats a string using printf syntax\n\n\nstr.regexp_extract\nSplit the string along the regex and extract first occurrence of group\n\n\nstr.regexp_full_match\nReturns true if the entire string matches the regex (see Pattern Matching)\n\n\nstr.regexp_matches\nReturns true if a part of string matches the regex (see Pattern Matching)\n\n\nstr.regexp_replace\nReplaces the first occurrence of regex with the replacement, use ‘g’ modifier to replace all occurrences instead (see Pattern Matching)\n\n\nstr.regexp_split_to_array\nAlias of string_split_regex. Splits the string along the regex\n\n\nstr.repeat\nRepeats the string count number of times\n\n\nstr.replace\nReplaces any occurrences of the source with target in string\n\n\nstr.reverse\nReverses the string\n\n\nstr.right\nExtract the right-most count characters\n\n\nstr.right_grapheme\nExtract the right-most count grapheme clusters\n\n\nstr.rpad\nPads the string with the character from the right until it has count characters\n\n\nstr.rtrim\nRemoves any spaces from the right side of the string\n\n\nstr.starts_with\nReturn true if string begins with search_string\n\n\nstr.str_split\nAlias of string_split. Splits the string along the separator\n\n\nstr.str_split_regex\nAlias of string_split_regex. Splits the string along the regex\n\n\nstr.string_split\nSplits the string along the separator\n\n\nstr.string_split_regex\nSplits the string along the regex\n\n\nstr.string_to_array\nAlias of string_split. Splits the string along the separator\n\n\nstr.strip_accents\nStrips accents from string\n\n\nstr.strlen\nNumber of bytes in string\n\n\nstr.strpos\nAlias of instr. Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.substr\nAlias of substring. Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.substring\nExtract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.substring_grapheme\nExtract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.suffix\nReturn true if string ends with search_string.\n\n\nstr.to_base64\nConvert a blob to a base64 encoded string. Alias of base64.\n\n\nstr.trim\nRemoves any spaces from either side of the string\n\n\nstr.ucase\nAlias of upper. Convert string to upper case\n\n\nstr.unicode\nReturns the unicode code of the first character of the string\n\n\nstr.upper\nConvert string to upper case\n\n\n\n\n\n\n\n\n\nunknown.add\n| duckdb example | result |\n\n\nunknown.arbitrary\n| duckdb example | result |\n\n\nunknown.argmax\n| duckdb example | result |\n\n\nunknown.argmin\n| duckdb example | result |\n\n\nunknown.array_agg\n| duckdb example | result |\n\n\nunknown.bit_position\n| duckdb example | result |\n\n\nunknown.combine\n| duckdb example | result |\n\n\nunknown.constant_or_null\n| duckdb example | result |\n\n\nunknown.count_star\n| duckdb example | result |\n\n\nunknown.covar_samp\n| duckdb example | result |\n\n\nunknown.current_database\n| duckdb example | result |\n\n\nunknown.current_localtime\n| duckdb example | result |\n\n\nunknown.current_query\n| duckdb example | result |\n\n\nunknown.divide\n| duckdb example | result |\n\n\nunknown.enum_code\n| duckdb example | result |\n\n\nunknown.enum_first\n| duckdb example | result |\n\n\nunknown.enum_last\n| duckdb example | result |\n\n\nunknown.enum_range\n| duckdb example | result |\n\n\nunknown.enum_range_boundary\n| duckdb example | result |\n\n\nunknown.excel_text\n| duckdb example | result |\n\n\nunknown.exp\n| duckdb example | result |\n\n\nunknown.finalize\n| duckdb example | result |\n\n\nunknown.flatten\n| duckdb example | result |\n\n\nunknown.get_bit\n| duckdb example | result |\n\n\nunknown.group_concat\n| duckdb example | result |\n\n\nunknown.ilike_escape\n| duckdb example | result |\n\n\nunknown.json_extract_path\n| duckdb example | result |\n\n\nunknown.json_extract_path_text\n| duckdb example | result |\n\n\nunknown.kahan_sum\n| duckdb example | result |\n\n\nunknown.max_by\n| duckdb example | result |\n\n\nunknown.md5_number\n| duckdb example | result |\n\n\nunknown.md5_number_lower\n| duckdb example | result |\n\n\nunknown.md5_number_upper\n| duckdb example | result |\n\n\nunknown.mean\n| duckdb example | result |\n\n\nunknown.min_by\n| duckdb example | result |\n\n\nunknown.mod\n| duckdb example | result |\n\n\nunknown.multiply\n| duckdb example | result |\n\n\nunknown.not_ilike_escape\n| duckdb example | result |\n\n\nunknown.quantile\n| duckdb example | result |\n\n\nunknown.sem\n| duckdb example | result |\n\n\nunknown.set_bit\n| duckdb example | result |\n\n\nunknown.split\n| duckdb example | result |\n\n\nunknown.stddev\n| duckdb example | result |\n\n\nunknown.stem\n| duckdb example | result |\n\n\nunknown.subtract\n| duckdb example | result |\n\n\nunknown.sumKahan\n| duckdb example | result |\n\n\nunknown.sum_no_overflow\n| duckdb example | result |\n\n\nunknown.text\n| duckdb example | result |\n\n\nunknown.translate\n| duckdb example | result |\n\n\nunknown.variance\n| duckdb example | result |"
  },
  {
    "objectID": "api/index.html#aggregations",
    "href": "api/index.html#aggregations",
    "title": "Function reference",
    "section": "",
    "text": "agg.any_value\nReturns the first non-null value from arg.\n\n\nagg.approx_count_distinct\nGives the approximate count of distintinct elements using HyperLogLog.\n\n\nagg.approx_quantile\nGives the approximate quantile using T-Digest.\n\n\nagg.arg_max\nFinds the row with the maximum val. Calculates the arg expression at that row.\n\n\nagg.arg_min\nFinds the row with the minimum val. Calculates the arg expression at that row.\n\n\nagg.avg\nCalculates the average value for all tuples in arg.\n\n\nagg.bit_and\nReturns the bitwise AND of all bits in a given expression .\n\n\nagg.bit_or\nReturns the bitwise OR of all bits in a given expression.\n\n\nagg.bit_xor\nReturns the bitwise XOR of all bits in a given expression.\n\n\nagg.bool_and\nReturns TRUE if every input value is TRUE, otherwise FALSE.\n\n\nagg.bool_or\nReturns TRUE if any input value is TRUE, otherwise FALSE.\n\n\nagg.corr\nReturns the correlation coefficient for non-null pairs in a group.\n\n\nagg.count\nCalculates the number of tuples tuples in arg.\n\n\nagg.covar_pop\nReturns the population covariance of input values.\n\n\nagg.entropy\nReturns the log-2 entropy of count input-values.\n\n\nagg.favg\nCalculates the average using a more accurate floating point summation (Kahan Sum).\n\n\nagg.first\nReturns the first value of a column.\n\n\nagg.fsum\nCalculates the sum using a more accurate floating point summation (Kahan Sum).\n\n\nagg.histogram\nReturns a LIST of STRUCTs with the fields bucket and count.\n\n\nagg.kurtosis\nReturns the excess kurtosis of all input values.\n\n\nagg.last\nReturns the last value of a column.\n\n\nagg.list\nReturns a LIST containing all the values of a column.\n\n\nagg.mad\nReturns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\n\n\nagg.max\nReturns the maximum value present in arg.\n\n\nagg.median\nReturns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.\n\n\nagg.min\nReturns the minumum value present in arg.\n\n\nagg.mode\nReturns the most frequent value for the values within x. NULL values are ignored.\n\n\nagg.product\nCalculates the product of all tuples in arg\n\n\nagg.quantile_cont\nReturns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\n\n\nagg.quantile_disc\nReturns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n\nagg.regr_avgx\nReturns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\nagg.regr_avgy\nReturns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\nagg.regr_count\nReturns the number of non-null number pairs in a group.\n\n\nagg.regr_intercept\nReturns the intercept of the univariate linear regression line for non-null pairs in a group.\n\n\nagg.regr_r2\nReturns the coefficient of determination for non-null pairs in a group.\n\n\nagg.regr_slope\nReturns the slope of the linear regression line for non-null pairs in a group.\n\n\nagg.regr_sxx\n-\n\n\nagg.regr_sxy\nReturns the population covariance of input values.\n\n\nagg.regr_syy\n-\n\n\nagg.reservoir_quantile\nGives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.\n\n\nagg.skewness\nReturns the skewness of all input values.\n\n\nagg.stddev_pop\nReturns the population standard deviation.\n\n\nagg.stddev_samp\nReturns the sample standard deviation.\n\n\nagg.string_agg\nConcatenates the column string values with a separator\n\n\nagg.sum\nCalculates the sum value for all tuples in arg.\n\n\nagg.var_pop\nReturns the population variance.\n\n\nagg.var_samp\nReturns the sample variance of all input values."
  },
  {
    "objectID": "api/index.html#blobs",
    "href": "api/index.html#blobs",
    "title": "Function reference",
    "section": "",
    "text": "blob.decode\nConvert blob to varchar. Fails if blob is not valid utf-8.\n\n\nblob.encode\nConvert varchar to blob. Converts utf-8 characters into literal encoding.\n\n\nblob.octet_length\nNumber of bytes in blob"
  },
  {
    "objectID": "api/index.html#datetime",
    "href": "api/index.html#datetime",
    "title": "Function reference",
    "section": "",
    "text": "dt.age\nSubtract arguments, resulting in the time difference between the two timestamps\n\n\ndt.century\nExtracts the century of a timestamp\n\n\ndt.current_date\nCurrent date (at start of current transaction)\n\n\ndt.current_localtimestamp\nReturns a TIMESTAMP whose GMT bin values correspond to local date and time in the current time zone.\n\n\ndt.date_diff\nThe number of partition boundaries between the dates\n\n\ndt.date_part\nGet the subfield (equivalent to extract)\n\n\ndt.date_sub\nThe number of complete partitions between the dates\n\n\ndt.date_trunc\nTruncate to specified precision\n\n\ndt.datediff\nAlias of date_diff. The number of partition boundaries between the dates\n\n\ndt.datepart\nAlias of date_part. Get the subfield (equivalent to extract)\n\n\ndt.datesub\nAlias of date_sub. The number of complete partitions between the dates\n\n\ndt.datetrunc\nAlias of date_trunc. Truncate to specified precision\n\n\ndt.day\nDay\n\n\ndt.dayname\nThe (English) name of the weekday\n\n\ndt.dayofmonth\nDay (synonym)\n\n\ndt.dayofweek\nNumeric weekday (Sunday = 0, Saturday = 6)\n\n\ndt.dayofyear\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\ndt.decade\nDecade (year / 10)\n\n\ndt.epoch\nConverts a timestamp to the seconds since the epoch\n\n\ndt.epoch_ms\nConverts ms since epoch to a timestamp\n\n\ndt.era\nCalendar era\n\n\ndt.generate_series\nGenerate a table of timestamps in the closed range, stepping by the interval\n\n\ndt.get_current_time\nCurrent time (start of current transaction)\n\n\ndt.get_current_timestamp\nCurrent date and time (start of current transaction)\n\n\ndt.hour\nHours\n\n\ndt.isodow\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\ndt.isoyear\nISO Year number (Starts on Monday of week containing Jan 4th)\n\n\ndt.last_day\nThe last day of the corresponding month in the date\n\n\ndt.make_date\nThe date for the given parts\n\n\ndt.make_time\nThe time for the given parts\n\n\ndt.make_timestamp\nThe timestamp for the given parts\n\n\ndt.make_timestamptz\nThe timestamp with time zone for the given parts in the current time zone\n\n\ndt.microsecond\nSub-minute microseconds\n\n\ndt.millennium\nMillennium\n\n\ndt.millisecond\nSub-minute milliseconds\n\n\ndt.minute\nMinutes\n\n\ndt.month\nMonth\n\n\ndt.monthname\nThe (English) name of the month\n\n\ndt.now\nCurrent date and time (start of current transaction)\n\n\ndt.quarter\nQuarter\n\n\ndt.range\nGenerate a table of timestamps in the half open range, stepping by the interval\n\n\ndt.second\nSeconds\n\n\ndt.strftime\nConverts a date to a string according to the format string\n\n\ndt.strptime\nConverts string to timestamp according to the format string\n\n\ndt.time_bucket\nTruncate date by the specified interval bucket_width. Buckets are aligned relative to origin date. origin defaults to 2000-01-03 for buckets that don’t include a month or year interval, and to 2000-01-01 for month and year buckets.\n\n\ndt.timezone\nUse the date parts of the timestamp in GMT to construct a timestamp in the given time zone. Effectively, the argument is a “local” time.\n\n\ndt.timezone_hour\nTime zone offset hour portion\n\n\ndt.timezone_minute\nTime zone offset minutes portion\n\n\ndt.to_days\nConstruct a day interval\n\n\ndt.to_hours\nConstruct a hour interval\n\n\ndt.to_microseconds\nConstruct a microsecond interval\n\n\ndt.to_milliseconds\nConstruct a millisecond interval\n\n\ndt.to_minutes\nConstruct a minute interval\n\n\ndt.to_months\nConstruct a month interval\n\n\ndt.to_seconds\nConstruct a second interval\n\n\ndt.to_timestamp\nConverts sec since epoch to a timestamp\n\n\ndt.to_years\nConstruct a year interval\n\n\ndt.today\nCurrent date (start of current transaction)\n\n\ndt.transaction_timestamp\nCurrent date and time (start of current transaction)\n\n\ndt.week\nISO Week\n\n\ndt.weekday\nNumeric weekday synonym (Sunday = 0, Saturday = 6)\n\n\ndt.weekofyear\nISO Week (synonym)\n\n\ndt.year\nYear\n\n\ndt.yearweek\nBIGINT of combined ISO Year number and 2-digit version of ISO Week number"
  },
  {
    "objectID": "api/index.html#json",
    "href": "api/index.html#json",
    "title": "Function reference",
    "section": "",
    "text": "json.array_to_json\nAlias for to_json that only accepts LIST\n\n\njson.from_json\nAlias for json_transform\n\n\njson.from_json_strict\nAlias for json_transform_strict\n\n\njson.json_array\nCreate a JSON array from any number of values\n\n\njson.json_array_length\nReturn the number of elements in the JSON array json, or 0 if it is not a JSON array. If path is specified, return the number of elements in the JSON array at the given path. If path is a LIST, the result will be LIST of array lengths\n\n\njson.json_contains\nReturns true if json_needle is contained in json_haystack. Both parameters are of JSON type, but json_needle can also be a numeric value or a string, however the string must be wrapped in double quotes\n\n\njson.json_extract\nExtract JSON from json at the given path. If path is a LIST, the result will be a LIST of JSON\n\n\njson.json_extract_string\nExtract VARCHAR from json at the given path. If path is a LIST, the result will be a LIST of VARCHAR\n\n\njson.json_keys\nReturns the keys of json as a LIST of VARCHAR, if json is a JSON object. If path is specified, return the keys of the JSON object at the given path. If path is a LIST, the result will be LIST of LIST of VARCHAR\n\n\njson.json_merge_patch\nMerge two json documents together\n\n\njson.json_object\nCreate a JSON object from any number of key, value pairs\n\n\njson.json_quote\nAlias for to_json\n\n\njson.json_structure\nReturn the structure of json. Throws an error if the structure is inconsistent (incompatible types in an array)\n\n\njson.json_transform\nTransform json according to the specified structure\n\n\njson.json_transform_strict\nSame as json_transform, but throws an error when type casting fails\n\n\njson.json_type\nReturn the type of the supplied json, which is one of OBJECT, ARRAY, BIGINT, UBIGINT, VARCHAR, BOOLEAN, NULL. If path is specified, return the type of the element at the given path. If path is a LIST, the result will be LIST of types\n\n\njson.json_valid\nReturn whether json is valid JSON\n\n\njson.row_to_json\nAlias for to_json that only accepts STRUCT\n\n\njson.to_json\nCreate JSON from a value of any type. Our LIST is converted to a JSON array, and our STRUCT and MAP are converted to a JSON object"
  },
  {
    "objectID": "api/index.html#nested",
    "href": "api/index.html#nested",
    "title": "Function reference",
    "section": "",
    "text": "nested.array_aggr\nAlias for list_aggregate.\n\n\nnested.array_aggregate\nAlias for list_aggregate.\n\n\nnested.array_apply\nAlias for list_transform.\n\n\nnested.array_cat\nAlias for list_concat.\n\n\nnested.array_concat\nAlias for list_concat.\n\n\nnested.array_contains\nAlias for list_contains.\n\n\nnested.array_distinct\nAlias for list_distinct.\n\n\nnested.array_filter\nAlias for list_filter.\n\n\nnested.array_has\nAlias for list_contains.\n\n\nnested.array_indexof\nAlias for list_position.\n\n\nnested.array_length\nAlias for len.\n\n\nnested.array_position\nAlias for list_position.\n\n\nnested.array_reverse_sort\nAlias for list_reverse_sort.\n\n\nnested.array_sort\nAlias for list_sort.\n\n\nnested.array_transform\nAlias for list_transform.\n\n\nnested.array_unique\nAlias for list_unique.\n\n\nnested.cardinality\nReturn the size of the map (or the number of entries in the map).\n\n\nnested.element_at\nReturn a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\nnested.len\nReturn the length of the list.\n\n\nnested.list_aggr\nAlias for list_aggregate.\n\n\nnested.list_aggregate\nExecutes the aggregate function name on the elements of list. See the List Aggregates section for more details.\n\n\nnested.list_apply\nAlias for list_transform.\n\n\nnested.list_cat\nAlias for list_concat.\n\n\nnested.list_concat\nConcatenates two lists.\n\n\nnested.list_contains\nReturns true if the list contains the element.\n\n\nnested.list_distinct\nRemoves all duplicates and NULLs from a list. Does not preserve the original order.\n\n\nnested.list_filter\nConstructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions section for more details.\n\n\nnested.list_has\nAlias for list_contains.\n\n\nnested.list_indexof\nAlias for list_position.\n\n\nnested.list_pack\nAlias for list_value.\n\n\nnested.list_position\nReturns the index of the element if the list contains the element.\n\n\nnested.list_reverse_sort\nSorts the elements of the list in reverse order. See the Sorting Lists section for more details about the null sorting order.\n\n\nnested.list_slice\nExtract a sublist using slice conventions. NULLs are interpreted as the bounds of the LIST. Negative values are accepted.\n\n\nnested.list_sort\nSorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the null sorting order.\n\n\nnested.list_transform\nReturns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details.\n\n\nnested.list_unique\nCounts the unique elements of a list.\n\n\nnested.list_value\nCreate a LIST containing the argument values.\n\n\nnested.map\nReturns an empty map.\n\n\nnested.map_extract\nAlias of element_at. Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\nnested.map_from_entries\nReturns a map created from the entries of the array\n\n\nnested.row\nCreate a STRUCT containing the argument values. If the values are column references, the entry name will be the column name; otherwise it will be the string ‘vN’ where N is the (1-based) position of the argument.\n\n\nnested.struct_extract\nExtract the named entry from the struct.\n\n\nnested.struct_insert\nAdd field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s).\n\n\nnested.struct_pack\nCreate a STRUCT containing the argument values. The entry name will be the bound variable name.\n\n\nnested.union_extract\nExtract the value with the named tags from the union. NULL if the tag is not currently selected\n\n\nnested.union_tag\nRetrieve the currently selected tag of the union as an Enum.\n\n\nnested.union_value\nCreate a single member UNION containing the argument value. The tag of the value will be the bound variable name."
  },
  {
    "objectID": "api/index.html#numeric",
    "href": "api/index.html#numeric",
    "title": "Function reference",
    "section": "",
    "text": "num.abs\nabsolute value\n\n\nnum.acos\ncomputes the arccosine of x\n\n\nnum.asin\ncomputes the arcsine of x\n\n\nnum.atan\ncomputes the arctangent of x\n\n\nnum.atan2\ncomputes the arctangent (x, y)\n\n\nnum.bit_count\nreturns the number of bits that are set\n\n\nnum.cbrt\nreturns the cube root of the number\n\n\nnum.ceil\nrounds the number up\n\n\nnum.ceiling\nrounds the number up. Alias of ceil.\n\n\nnum.chr\nreturns a character which is corresponding the ASCII code value or Unicode code point\n\n\nnum.cos\ncomputes the cosine of x\n\n\nnum.cot\ncomputes the cotangent of x\n\n\nnum.degrees\nconverts radians to degrees\n\n\nnum.even\nround to next even number by rounding away from zero.\n\n\nnum.factorial\nSee ! operator. Computes the product of the current integer and all integers below it\n\n\nnum.floor\nrounds the number down\n\n\nnum.gamma\ninterpolation of (x-1) factorial (so decimal inputs are allowed)\n\n\nnum.greatest\nselects the largest value\n\n\nnum.isfinite\nReturns true if the floating point value is finite, false otherwise\n\n\nnum.isinf\nReturns true if the floating point value is infinite, false otherwise\n\n\nnum.isnan\nReturns true if the floating point value is not a number, false otherwise\n\n\nnum.least\nselects the smallest value\n\n\nnum.lgamma\ncomputes the log of the gamma function.\n\n\nnum.ln\ncomputes the natural logarithm of x\n\n\nnum.log\ncomputes the 10-log of x\n\n\nnum.log10\nalias of log. computes the 10-log of x\n\n\nnum.log2\ncomputes the 2-log of x\n\n\nnum.nextafter\nreturn the next floating point value after x in the direction of y\n\n\nnum.pi\nreturns the value of pi\n\n\nnum.pow\ncomputes x to the power of y\n\n\nnum.power\nAlias of pow. computes x to the power of y\n\n\nnum.radians\nconverts degrees to radians\n\n\nnum.random\nreturns a random number between 0 and 1\n\n\nnum.round\nround to s decimal places\n\n\nnum.setseed\nsets the seed to be used for the random function\n\n\nnum.sign\nreturns the sign of x as -1, 0 or 1\n\n\nnum.signbit\nreturns whether the signbit is set or not\n\n\nnum.sin\ncomputes the sin of x\n\n\nnum.sqrt\nreturns the square root of the number\n\n\nnum.tan\ncomputes the tangent of x\n\n\nnum.xor\nbitwise XOR"
  },
  {
    "objectID": "api/index.html#string",
    "href": "api/index.html#string",
    "title": "Function reference",
    "section": "",
    "text": "str.array_extract\nExtract a single character using a (1-based) index.\n\n\nstr.array_slice\nExtract a string using slice conventions. NULLs are interpreted as the bounds of the string. Negative values are accepted.\n\n\nstr.ascii\nReturns an integer that represents the Unicode code point of the first character of the string\n\n\nstr.bar\nDraw a band whose width is proportional to (x - min) and equal to width characters when x = max. width defaults to 80.\n\n\nstr.base64\nConvert a blob to a base64 encoded string. Alias of to_base64.\n\n\nstr.bit_length\nNumber of bits in a string.\n\n\nstr.concat\nConcatenate many strings together\n\n\nstr.concat_ws\nConcatenate strings together separated by the specified separator\n\n\nstr.contains\nReturn true if search_string is found within string\n\n\nstr.editdist3\nAlias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\nstr.format\nFormats a string using fmt syntax\n\n\nstr.from_base64\nConvert a base64 encoded string to a character string.\n\n\nstr.hamming\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\nstr.hash\nReturns an integer with the hash of the value\n\n\nstr.instr\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.jaccard\nThe Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.jaro_similarity\nThe Jaro similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.jaro_winkler_similarity\nThe Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\nstr.lcase\nAlias of lower. Convert string to lower case\n\n\nstr.left\nExtract the left-most count characters\n\n\nstr.left_grapheme\nExtract the left-most grapheme clusters\n\n\nstr.length\nNumber of characters in string\n\n\nstr.length_grapheme\nNumber of grapheme clusters in string\n\n\nstr.levenshtein\nThe minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\nstr.like_escape\nReturns true if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\nstr.list_element\nAn alias for array_extract.\n\n\nstr.list_extract\nAn alias for array_extract.\n\n\nstr.lower\nConvert string to lower case\n\n\nstr.lpad\nPads the string with the character from the left until it has count characters\n\n\nstr.ltrim\nRemoves any spaces from the left side of the string\n\n\nstr.md5\nReturns the MD5 hash of the value\n\n\nstr.mismatches\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\nstr.nfc_normalize\nConvert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not.\n\n\nstr.not_like_escape\nReturns false if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\nstr.ord\nReturn ASCII character code of the leftmost character in a string.\n\n\nstr.position\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.prefix\nReturn true if string starts with search_string.\n\n\nstr.printf\nFormats a string using printf syntax\n\n\nstr.regexp_extract\nSplit the string along the regex and extract first occurrence of group\n\n\nstr.regexp_full_match\nReturns true if the entire string matches the regex (see Pattern Matching)\n\n\nstr.regexp_matches\nReturns true if a part of string matches the regex (see Pattern Matching)\n\n\nstr.regexp_replace\nReplaces the first occurrence of regex with the replacement, use ‘g’ modifier to replace all occurrences instead (see Pattern Matching)\n\n\nstr.regexp_split_to_array\nAlias of string_split_regex. Splits the string along the regex\n\n\nstr.repeat\nRepeats the string count number of times\n\n\nstr.replace\nReplaces any occurrences of the source with target in string\n\n\nstr.reverse\nReverses the string\n\n\nstr.right\nExtract the right-most count characters\n\n\nstr.right_grapheme\nExtract the right-most count grapheme clusters\n\n\nstr.rpad\nPads the string with the character from the right until it has count characters\n\n\nstr.rtrim\nRemoves any spaces from the right side of the string\n\n\nstr.starts_with\nReturn true if string begins with search_string\n\n\nstr.str_split\nAlias of string_split. Splits the string along the separator\n\n\nstr.str_split_regex\nAlias of string_split_regex. Splits the string along the regex\n\n\nstr.string_split\nSplits the string along the separator\n\n\nstr.string_split_regex\nSplits the string along the regex\n\n\nstr.string_to_array\nAlias of string_split. Splits the string along the separator\n\n\nstr.strip_accents\nStrips accents from string\n\n\nstr.strlen\nNumber of bytes in string\n\n\nstr.strpos\nAlias of instr. Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\nstr.substr\nAlias of substring. Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.substring\nExtract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.substring_grapheme\nExtract substring of length grapheme clusters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\nstr.suffix\nReturn true if string ends with search_string.\n\n\nstr.to_base64\nConvert a blob to a base64 encoded string. Alias of base64.\n\n\nstr.trim\nRemoves any spaces from either side of the string\n\n\nstr.ucase\nAlias of upper. Convert string to upper case\n\n\nstr.unicode\nReturns the unicode code of the first character of the string\n\n\nstr.upper\nConvert string to upper case"
  },
  {
    "objectID": "api/index.html#unknown",
    "href": "api/index.html#unknown",
    "title": "Function reference",
    "section": "",
    "text": "unknown.add\n| duckdb example | result |\n\n\nunknown.arbitrary\n| duckdb example | result |\n\n\nunknown.argmax\n| duckdb example | result |\n\n\nunknown.argmin\n| duckdb example | result |\n\n\nunknown.array_agg\n| duckdb example | result |\n\n\nunknown.bit_position\n| duckdb example | result |\n\n\nunknown.combine\n| duckdb example | result |\n\n\nunknown.constant_or_null\n| duckdb example | result |\n\n\nunknown.count_star\n| duckdb example | result |\n\n\nunknown.covar_samp\n| duckdb example | result |\n\n\nunknown.current_database\n| duckdb example | result |\n\n\nunknown.current_localtime\n| duckdb example | result |\n\n\nunknown.current_query\n| duckdb example | result |\n\n\nunknown.divide\n| duckdb example | result |\n\n\nunknown.enum_code\n| duckdb example | result |\n\n\nunknown.enum_first\n| duckdb example | result |\n\n\nunknown.enum_last\n| duckdb example | result |\n\n\nunknown.enum_range\n| duckdb example | result |\n\n\nunknown.enum_range_boundary\n| duckdb example | result |\n\n\nunknown.excel_text\n| duckdb example | result |\n\n\nunknown.exp\n| duckdb example | result |\n\n\nunknown.finalize\n| duckdb example | result |\n\n\nunknown.flatten\n| duckdb example | result |\n\n\nunknown.get_bit\n| duckdb example | result |\n\n\nunknown.group_concat\n| duckdb example | result |\n\n\nunknown.ilike_escape\n| duckdb example | result |\n\n\nunknown.json_extract_path\n| duckdb example | result |\n\n\nunknown.json_extract_path_text\n| duckdb example | result |\n\n\nunknown.kahan_sum\n| duckdb example | result |\n\n\nunknown.max_by\n| duckdb example | result |\n\n\nunknown.md5_number\n| duckdb example | result |\n\n\nunknown.md5_number_lower\n| duckdb example | result |\n\n\nunknown.md5_number_upper\n| duckdb example | result |\n\n\nunknown.mean\n| duckdb example | result |\n\n\nunknown.min_by\n| duckdb example | result |\n\n\nunknown.mod\n| duckdb example | result |\n\n\nunknown.multiply\n| duckdb example | result |\n\n\nunknown.not_ilike_escape\n| duckdb example | result |\n\n\nunknown.quantile\n| duckdb example | result |\n\n\nunknown.sem\n| duckdb example | result |\n\n\nunknown.set_bit\n| duckdb example | result |\n\n\nunknown.split\n| duckdb example | result |\n\n\nunknown.stddev\n| duckdb example | result |\n\n\nunknown.stem\n| duckdb example | result |\n\n\nunknown.subtract\n| duckdb example | result |\n\n\nunknown.sumKahan\n| duckdb example | result |\n\n\nunknown.sum_no_overflow\n| duckdb example | result |\n\n\nunknown.text\n| duckdb example | result |\n\n\nunknown.translate\n| duckdb example | result |\n\n\nunknown.variance\n| duckdb example | result |"
  },
  {
    "objectID": "api/str.regexp_split_to_array.html",
    "href": "api/str.regexp_split_to_array.html",
    "title": "str.regexp_split_to_array",
    "section": "",
    "text": "str.regexp_split_to_array\nstr.regexp_split_to_array(col0, col1)\nAlias of string_split_regex. Splits the string along the regex\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nregexp_split_to_array(‘hello␣world; 42’, ‘;?␣’)\n[‘hello’, ‘world’, ‘42’]"
  },
  {
    "objectID": "api/nested.struct_pack.html",
    "href": "api/nested.struct_pack.html",
    "title": "nested.struct_pack",
    "section": "",
    "text": "nested.struct_pack\nnested.struct_pack(*args)\nCreate a STRUCT containing the argument values. The entry name will be the bound variable name.\n\n\n\nduckdb example\nresult\n\n\n\n\nstruct_pack(i := 4, s := ‘string’)\n{‘i’: 3, ‘s’: ‘string’}"
  },
  {
    "objectID": "api/str.reverse.html",
    "href": "api/str.reverse.html",
    "title": "str.reverse",
    "section": "",
    "text": "str.reverse\nstr.reverse(col0)\nReverses the string\n\n\n\nduckdb example\nresult\n\n\n\n\nreverse(‘hello’)\nolleh"
  },
  {
    "objectID": "api/dt.make_timestamp.html",
    "href": "api/dt.make_timestamp.html",
    "title": "dt.make_timestamp",
    "section": "",
    "text": "dt.make_timestamp\ndt.make_timestamp(col0, col1, col2, col3, col4, col5)\nThe timestamp for the given parts\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nmake_timestamp(1992, 9, 20, 13, 34, 27.123456)\n1992-09-20 13:34:27.123456"
  },
  {
    "objectID": "api/str.ucase.html",
    "href": "api/str.ucase.html",
    "title": "str.ucase",
    "section": "",
    "text": "str.ucase\nstr.ucase(col0)\nAlias of upper. Convert string to upper case\n\n\n\nduckdb example\nresult\n\n\n\n\nucase(‘Hello’)\nHELLO"
  },
  {
    "objectID": "api/dt.to_minutes.html",
    "href": "api/dt.to_minutes.html",
    "title": "dt.to_minutes",
    "section": "",
    "text": "dt.to_minutes\ndt.to_minutes(col0)\nConstruct a minute interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_minutes(5)\nINTERVAL 5 MINUTE"
  },
  {
    "objectID": "api/num.ceiling.html",
    "href": "api/num.ceiling.html",
    "title": "num.ceiling",
    "section": "",
    "text": "num.ceiling\nnum.ceiling(col0)\nrounds the number up. Alias of ceil.\n\n\n\nduckdb example\nresult\n\n\n\n\nceiling(17.4)\n18"
  },
  {
    "objectID": "api/dt.datepart.html",
    "href": "api/dt.datepart.html",
    "title": "dt.datepart",
    "section": "",
    "text": "dt.datepart\ndt.datepart(col0, col1)\nAlias of date_part. Get the subfield (equivalent to extract)\n\n\n\nduckdb example\nresult\n\n\n\n\ndatepart(‘year’, DATE ‘1992-09-20’)\n1992"
  },
  {
    "objectID": "api/agg.fsum.html",
    "href": "api/agg.fsum.html",
    "title": "agg.fsum",
    "section": "",
    "text": "agg.fsum\nagg.fsum(col0)\nCalculates the sum using a more accurate floating point summation (Kahan Sum).\n\n\n\nduckdb example\nresult\n\n\n\n\nfsum(A)\nnan"
  },
  {
    "objectID": "api/blob.encode.html",
    "href": "api/blob.encode.html",
    "title": "blob.encode",
    "section": "",
    "text": "blob.encode\nblob.encode(col0)\nConvert varchar to blob. Converts utf-8 characters into literal encoding.\n\n\n\nduckdb example\nresult\n\n\n\n\nencode(‘my_string_with_ü’)\nmy_string_with_Ã¼"
  },
  {
    "objectID": "api/str.rpad.html",
    "href": "api/str.rpad.html",
    "title": "str.rpad",
    "section": "",
    "text": "str.rpad\nstr.rpad(col0, col1, col2)\nPads the string with the character from the right until it has count characters\n\n\n\nduckdb example\nresult\n\n\n\n\nrpad(‘hello’, 10, ‘&lt;’)\nhello&lt;&lt;&lt;&lt;&lt;"
  },
  {
    "objectID": "api/agg.kurtosis.html",
    "href": "api/agg.kurtosis.html",
    "title": "agg.kurtosis",
    "section": "",
    "text": "agg.kurtosis\nagg.kurtosis(col0)\nReturns the excess kurtosis of all input values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.right.html",
    "href": "api/str.right.html",
    "title": "str.right",
    "section": "",
    "text": "str.right\nstr.right(col0, col1)\nExtract the right-most count characters\n\n\n\nduckdb example\nresult\n\n\n\n\nright(‘Hello🦆’, 3)\nlo🦆"
  },
  {
    "objectID": "api/unknown.array_agg.html",
    "href": "api/unknown.array_agg.html",
    "title": "unknown.array_agg",
    "section": "",
    "text": "unknown.array_agg\nunknown.array_agg(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.mean.html",
    "href": "api/unknown.mean.html",
    "title": "unknown.mean",
    "section": "",
    "text": "unknown.mean\nunknown.mean(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.stem.html",
    "href": "api/unknown.stem.html",
    "title": "unknown.stem",
    "section": "",
    "text": "unknown.stem\nunknown.stem(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.enum_range.html",
    "href": "api/unknown.enum_range.html",
    "title": "unknown.enum_range",
    "section": "",
    "text": "unknown.enum_range\nunknown.enum_range(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.enum_last.html",
    "href": "api/unknown.enum_last.html",
    "title": "unknown.enum_last",
    "section": "",
    "text": "unknown.enum_last\nunknown.enum_last(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.avg.html",
    "href": "api/agg.avg.html",
    "title": "agg.avg",
    "section": "",
    "text": "agg.avg\nagg.avg(col0)\nCalculates the average value for all tuples in arg.\n\n\n\nduckdb example\nresult\n\n\n\n\navg(A)\nnan"
  },
  {
    "objectID": "api/unknown.sum_no_overflow.html",
    "href": "api/unknown.sum_no_overflow.html",
    "title": "unknown.sum_no_overflow",
    "section": "",
    "text": "unknown.sum_no_overflow\nunknown.sum_no_overflow(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.jaro_winkler_similarity.html",
    "href": "api/str.jaro_winkler_similarity.html",
    "title": "str.jaro_winkler_similarity",
    "section": "",
    "text": "str.jaro_winkler_similarity\nstr.jaro_winkler_similarity(col0, col1)\nThe Jaro-Winkler similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\n\nduckdb example\nresult\n\n\n\n\njaro_winkler_similarity(‘duck’,‘duckdb’)\n0.93"
  },
  {
    "objectID": "api/json.json_quote.html",
    "href": "api/json.json_quote.html",
    "title": "json.json_quote",
    "section": "",
    "text": "json.json_quote\njson.json_quote(*args)\nAlias for to_json\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.range.html",
    "href": "api/dt.range.html",
    "title": "dt.range",
    "section": "",
    "text": "dt.range\ndt.range(col0)\nGenerate a table of timestamps in the half open range, stepping by the interval\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nrange(TIMESTAMP ‘2001-04-10’, TIMESTAMP ‘2001-04-11’, INTERVAL 30 MINUTE)\nnan"
  },
  {
    "objectID": "api/json.array_to_json.html",
    "href": "api/json.array_to_json.html",
    "title": "json.array_to_json",
    "section": "",
    "text": "json.array_to_json\njson.array_to_json(*args)\nAlias for to_json that only accepts LIST\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.bit_count.html",
    "href": "api/num.bit_count.html",
    "title": "num.bit_count",
    "section": "",
    "text": "num.bit_count\nnum.bit_count(col0)\nreturns the number of bits that are set\n\n\n\nduckdb example\nresult\n\n\n\n\nbit_count(31)\n5"
  },
  {
    "objectID": "api/unknown.current_database.html",
    "href": "api/unknown.current_database.html",
    "title": "unknown.current_database",
    "section": "",
    "text": "unknown.current_database\nunknown.current_database()\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.strptime.html",
    "href": "api/dt.strptime.html",
    "title": "dt.strptime",
    "section": "",
    "text": "dt.strptime\ndt.strptime(col0, col1)\nConverts string to timestamp according to the format string\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nstrptime(‘Wed, 1 January 1992 - 08:38:40 PM’, ‘%a, %-d %B %Y - %I:%M:%S %p’)\n1992-01-01 20:38:40"
  },
  {
    "objectID": "api/num.isinf.html",
    "href": "api/num.isinf.html",
    "title": "num.isinf",
    "section": "",
    "text": "num.isinf\nnum.isinf(col0)\nReturns true if the floating point value is infinite, false otherwise\n\n\n\nduckdb example\nresult\n\n\n\n\nisinf(‘Infinity’::float)\ntrue"
  },
  {
    "objectID": "api/nested.map_extract.html",
    "href": "api/nested.map_extract.html",
    "title": "nested.map_extract",
    "section": "",
    "text": "nested.map_extract\nnested.map_extract(col0, col1, *args)\nAlias of element_at. Return a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\n\nduckdb example\nresult\n\n\n\n\nmap_extract(map([100, 5], [42, 43]),100);\n[42]"
  },
  {
    "objectID": "api/num.degrees.html",
    "href": "api/num.degrees.html",
    "title": "num.degrees",
    "section": "",
    "text": "num.degrees\nnum.degrees(col0)\nconverts radians to degrees\n\n\n\nduckdb example\nresult\n\n\n\n\ndegrees(pi())\n180"
  },
  {
    "objectID": "api/dt.to_microseconds.html",
    "href": "api/dt.to_microseconds.html",
    "title": "dt.to_microseconds",
    "section": "",
    "text": "dt.to_microseconds\ndt.to_microseconds(col0)\nConstruct a microsecond interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_microseconds(5)\nINTERVAL 5 MICROSECOND"
  },
  {
    "objectID": "api/num.sqrt.html",
    "href": "api/num.sqrt.html",
    "title": "num.sqrt",
    "section": "",
    "text": "num.sqrt\nnum.sqrt(col0)\nreturns the square root of the number\n\n\n\nduckdb example\nresult\n\n\n\n\nsqrt(9)\n3"
  },
  {
    "objectID": "api/nested.array_filter.html",
    "href": "api/nested.array_filter.html",
    "title": "nested.array_filter",
    "section": "",
    "text": "nested.array_filter\nnested.array_filter(col0, col1)\nAlias for list_filter.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_filter(l, x -&gt; x &gt; 4)\n[5, 6]"
  },
  {
    "objectID": "api/dt.date_sub.html",
    "href": "api/dt.date_sub.html",
    "title": "dt.date_sub",
    "section": "",
    "text": "dt.date_sub\ndt.date_sub(col0, col1, col2)\nThe number of complete partitions between the dates\n\n\n\nduckdb example\nresult\n\n\n\n\ndate_sub(‘month’, DATE ‘1992-09-15’, DATE ‘1992-11-14’)\n1"
  },
  {
    "objectID": "api/str.editdist3.html",
    "href": "api/str.editdist3.html",
    "title": "str.editdist3",
    "section": "",
    "text": "str.editdist3\nstr.editdist3(col0, col1)\nAlias of levenshtein for SQLite compatibility. The minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\n\nduckdb example\nresult\n\n\n\n\neditdist3(‘duck’,‘db’)\n3.0"
  },
  {
    "objectID": "api/dt.millisecond.html",
    "href": "api/dt.millisecond.html",
    "title": "dt.millisecond",
    "section": "",
    "text": "dt.millisecond\ndt.millisecond(col0)\nSub-minute milliseconds\n\n\n\nduckdb example\nresult\n\n\n\n\nmillisecond(timestamp ‘2021-08-03 11:59:44.123456’)\n44123"
  },
  {
    "objectID": "api/dt.timezone_minute.html",
    "href": "api/dt.timezone_minute.html",
    "title": "dt.timezone_minute",
    "section": "",
    "text": "dt.timezone_minute\ndt.timezone_minute(col0)\nTime zone offset minutes portion\n\n\n\nduckdb example\nresult\n\n\n\n\ntimezone_minute(date ‘1992-02-15’)\n0"
  },
  {
    "objectID": "api/str.not_like_escape.html",
    "href": "api/str.not_like_escape.html",
    "title": "str.not_like_escape",
    "section": "",
    "text": "str.not_like_escape\nstr.not_like_escape(col0, col1, col2)\nReturns false if the string matches the like_specifier (see Pattern Matching). escape_character is used to search for wildcard characters in the string.\n\n\n\nduckdb example\nresult\n\n\n\n\nlike_escape(‘a%c’, ‘a\\(%c', '\\)’)\ntrue"
  },
  {
    "objectID": "api/str.replace.html",
    "href": "api/str.replace.html",
    "title": "str.replace",
    "section": "",
    "text": "str.replace\nstr.replace(col0, col1, col2)\nReplaces any occurrences of the source with target in string\n\n\n\nduckdb example\nresult\n\n\n\n\nreplace(‘hello’, ‘l’, ‘-’)\nhe–o"
  },
  {
    "objectID": "api/nested.array_concat.html",
    "href": "api/nested.array_concat.html",
    "title": "nested.array_concat",
    "section": "",
    "text": "nested.array_concat\nnested.array_concat(col0, col1)\nAlias for list_concat.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_concat([2, 3], [4, 5, 6])\n[2, 3, 4, 5, 6]"
  },
  {
    "objectID": "api/str.str_split.html",
    "href": "api/str.str_split.html",
    "title": "str.str_split",
    "section": "",
    "text": "str.str_split\nstr.str_split(col0, col1)\nAlias of string_split. Splits the string along the separator\n\n\n\nduckdb example\nresult\n\n\n\n\nstr_split(‘hello␣world’, ‘␣’)\n[‘hello’, ‘world’]"
  },
  {
    "objectID": "api/str.lpad.html",
    "href": "api/str.lpad.html",
    "title": "str.lpad",
    "section": "",
    "text": "str.lpad\nstr.lpad(col0, col1, col2)\nPads the string with the character from the left until it has count characters\n\n\n\nduckdb example\nresult\n\n\n\n\nlpad(‘hello’, 10, ‘&gt;’)\n&gt;&gt;&gt;&gt;&gt;hello"
  },
  {
    "objectID": "api/dt.era.html",
    "href": "api/dt.era.html",
    "title": "dt.era",
    "section": "",
    "text": "dt.era\ndt.era(col0)\nCalendar era\n\n\n\nduckdb example\nresult\n\n\n\n\nera(date ‘0044-03-15 (BC)’)\n0"
  },
  {
    "objectID": "api/str.regexp_extract.html",
    "href": "api/str.regexp_extract.html",
    "title": "str.regexp_extract",
    "section": "",
    "text": "str.regexp_extract\nstr.regexp_extract(col0, col1)\nSplit the string along the regex and extract first occurrence of group\n\n\n\nduckdb example\nresult\n\n\n\n\nregexp_extract(‘hello_world’, ’([a-z ]+)_?’, 1)\nhello"
  },
  {
    "objectID": "api/num.random.html",
    "href": "api/num.random.html",
    "title": "num.random",
    "section": "",
    "text": "num.random\nnum.random()\nreturns a random number between 0 and 1\n\n\n\nduckdb example\nresult\n\n\n\n\nrandom()\nvarious"
  },
  {
    "objectID": "api/dt.datetrunc.html",
    "href": "api/dt.datetrunc.html",
    "title": "dt.datetrunc",
    "section": "",
    "text": "dt.datetrunc\ndt.datetrunc(col0, col1)\nAlias of date_trunc. Truncate to specified precision\n\n\n\nduckdb example\nresult\n\n\n\n\ndatetrunc(‘month’, DATE ‘1992-03-07’)\n1992-03-01"
  },
  {
    "objectID": "api/dt.microsecond.html",
    "href": "api/dt.microsecond.html",
    "title": "dt.microsecond",
    "section": "",
    "text": "dt.microsecond\ndt.microsecond(col0)\nSub-minute microseconds\n\n\n\nduckdb example\nresult\n\n\n\n\nmicrosecond(timestamp ‘2021-08-03 11:59:44.123456’)\n44123456"
  },
  {
    "objectID": "api/dt.age.html",
    "href": "api/dt.age.html",
    "title": "dt.age",
    "section": "",
    "text": "dt.age\ndt.age(col0)\nSubtract arguments, resulting in the time difference between the two timestamps\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nage(TIMESTAMP ‘2001-04-10’, TIMESTAMP ‘1992-09-20’)\n8 years 6 months 20 days"
  },
  {
    "objectID": "api/num.floor.html",
    "href": "api/num.floor.html",
    "title": "num.floor",
    "section": "",
    "text": "num.floor\nnum.floor(col0)\nrounds the number down\n\n\n\nduckdb example\nresult\n\n\n\n\nfloor(17.4)\n17"
  },
  {
    "objectID": "api/unknown.constant_or_null.html",
    "href": "api/unknown.constant_or_null.html",
    "title": "unknown.constant_or_null",
    "section": "",
    "text": "unknown.constant_or_null\nunknown.constant_or_null(col0, col1, *args)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.var_pop.html",
    "href": "api/agg.var_pop.html",
    "title": "agg.var_pop",
    "section": "",
    "text": "agg.var_pop\nagg.var_pop(col0)\nReturns the population variance.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.count_star.html",
    "href": "api/unknown.count_star.html",
    "title": "unknown.count_star",
    "section": "",
    "text": "unknown.count_star\nunknown.count_star()\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.contains.html",
    "href": "api/str.contains.html",
    "title": "str.contains",
    "section": "",
    "text": "str.contains\nstr.contains(col0, col1)\nReturn true if search_string is found within string\n\n\n\nduckdb example\nresult\n\n\n\n\ncontains(‘abc’,‘a’)\ntrue"
  },
  {
    "objectID": "api/json.json_structure.html",
    "href": "api/json.json_structure.html",
    "title": "json.json_structure",
    "section": "",
    "text": "json.json_structure\njson.json_structure(col0)\nReturn the structure of json. Throws an error if the structure is inconsistent (incompatible types in an array)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.array_length.html",
    "href": "api/nested.array_length.html",
    "title": "nested.array_length",
    "section": "",
    "text": "nested.array_length\nnested.array_length(col0)\nAlias for len.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_length([1, 2, 3])\n3"
  },
  {
    "objectID": "api/agg.entropy.html",
    "href": "api/agg.entropy.html",
    "title": "agg.entropy",
    "section": "",
    "text": "agg.entropy\nagg.entropy(col0)\nReturns the log-2 entropy of count input-values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.make_time.html",
    "href": "api/dt.make_time.html",
    "title": "dt.make_time",
    "section": "",
    "text": "dt.make_time\ndt.make_time(col0, col1, col2)\nThe time for the given parts\n\n\n\nduckdb example\nresult\n\n\n\n\nmake_time(13, 34, 27.123456)\n13:34:27.123456"
  },
  {
    "objectID": "api/dt.dayname.html",
    "href": "api/dt.dayname.html",
    "title": "dt.dayname",
    "section": "",
    "text": "dt.dayname\ndt.dayname(col0)\nThe (English) name of the weekday\n\n\n\nduckdb example\nresult\n\n\n\n\ndayname(DATE ‘1992-09-20’)\nSunday"
  },
  {
    "objectID": "api/nested.list_apply.html",
    "href": "api/nested.list_apply.html",
    "title": "nested.list_apply",
    "section": "",
    "text": "nested.list_apply\nnested.list_apply(col0, col1)\nAlias for list_transform.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_apply(l, x -&gt; x + 1)\n[5, 6, 7]"
  },
  {
    "objectID": "api/num.pow.html",
    "href": "api/num.pow.html",
    "title": "num.pow",
    "section": "",
    "text": "num.pow\nnum.pow(col0, col1)\ncomputes x to the power of y\n\n\n\nduckdb example\nresult\n\n\n\n\npow(2, 3)\n8"
  },
  {
    "objectID": "api/str.repeat.html",
    "href": "api/str.repeat.html",
    "title": "str.repeat",
    "section": "",
    "text": "str.repeat\nstr.repeat(col0, col1)\nRepeats the string count number of times\n\n\n\nduckdb example\nresult\n\n\n\n\nrepeat(‘A’, 5)\nAAAAA"
  },
  {
    "objectID": "api/str.nfc_normalize.html",
    "href": "api/str.nfc_normalize.html",
    "title": "str.nfc_normalize",
    "section": "",
    "text": "str.nfc_normalize\nstr.nfc_normalize(col0)\nConvert string to Unicode NFC normalized string. Useful for comparisons and ordering if text data is mixed between NFC normalized and not.\n\n\n\nduckdb example\nresult\n\n\n\n\nnfc_normalize(‘ardèch’)\narde`ch"
  },
  {
    "objectID": "api/str.concat_ws.html",
    "href": "api/str.concat_ws.html",
    "title": "str.concat_ws",
    "section": "",
    "text": "str.concat_ws\nstr.concat_ws(col0, col1, *args)\nConcatenate strings together separated by the specified separator\n\n\n\nduckdb example\nresult\n\n\n\n\nconcat_ws(‘,’, ‘Banana’, ‘Apple’, ‘Melon’)\nBanana,Apple,Melon"
  },
  {
    "objectID": "api/agg.any_value.html",
    "href": "api/agg.any_value.html",
    "title": "agg.any_value",
    "section": "",
    "text": "agg.any_value\nagg.any_value(col0)\nReturns the first non-null value from arg.\n\n\n\nduckdb example\nresult\n\n\n\n\nany_value(A)\nnan"
  },
  {
    "objectID": "api/unknown.argmax.html",
    "href": "api/unknown.argmax.html",
    "title": "unknown.argmax",
    "section": "",
    "text": "unknown.argmax\nunknown.argmax(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.strftime.html",
    "href": "api/dt.strftime.html",
    "title": "dt.strftime",
    "section": "",
    "text": "dt.strftime\ndt.strftime(col0, col1)\nConverts a date to a string according to the format string\n\n\n\nduckdb example\nresult\n\n\n\n\nstrftime(date ‘1992-01-01’, ‘%a, %-d %B %Y’)\nWed, 1 January 1992"
  },
  {
    "objectID": "api/dt.year.html",
    "href": "api/dt.year.html",
    "title": "dt.year",
    "section": "",
    "text": "dt.year\ndt.year(col0)\nYear\n\n\n\nduckdb example\nresult\n\n\n\n\nyear(date ‘1992-02-15’)\n1992"
  },
  {
    "objectID": "api/agg.regr_syy.html",
    "href": "api/agg.regr_syy.html",
    "title": "agg.regr_syy",
    "section": "",
    "text": "agg.regr_syy\nagg.regr_syy(col0, col1)\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.last.html",
    "href": "api/agg.last.html",
    "title": "agg.last",
    "section": "",
    "text": "agg.last\nagg.last(col0)\nReturns the last value of a column.\n\n\n\nduckdb example\nresult\n\n\n\n\nlast(A)\nnan"
  },
  {
    "objectID": "api/str.ord.html",
    "href": "api/str.ord.html",
    "title": "str.ord",
    "section": "",
    "text": "str.ord\nstr.ord(col0)\nReturn ASCII character code of the leftmost character in a string.\n\n\n\nduckdb example\nresult\n\n\n\n\nord(‘ü’)\n252"
  },
  {
    "objectID": "api/unknown.current_localtime.html",
    "href": "api/unknown.current_localtime.html",
    "title": "unknown.current_localtime",
    "section": "",
    "text": "unknown.current_localtime\nunknown.current_localtime()\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.transaction_timestamp.html",
    "href": "api/dt.transaction_timestamp.html",
    "title": "dt.transaction_timestamp",
    "section": "",
    "text": "dt.transaction_timestamp\ndt.transaction_timestamp()\nCurrent date and time (start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\ntransaction_timestamp()\n2022-10-08 12:44:46.122-07"
  },
  {
    "objectID": "api/unknown.sumKahan.html",
    "href": "api/unknown.sumKahan.html",
    "title": "unknown.sumKahan",
    "section": "",
    "text": "unknown.sumKahan\nunknown.sumKahan(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.regr_count.html",
    "href": "api/agg.regr_count.html",
    "title": "agg.regr_count",
    "section": "",
    "text": "agg.regr_count\nagg.regr_count(col0, col1)\nReturns the number of non-null number pairs in a group.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.current_localtimestamp.html",
    "href": "api/dt.current_localtimestamp.html",
    "title": "dt.current_localtimestamp",
    "section": "",
    "text": "dt.current_localtimestamp\ndt.current_localtimestamp()\nReturns a TIMESTAMP whose GMT bin values correspond to local date and time in the current time zone.\n\n\n\nduckdb example\nresult\n\n\n\n\ncurrent_localtimestamp()\n2022-12-17 08:47:56.497"
  },
  {
    "objectID": "api/dt.to_months.html",
    "href": "api/dt.to_months.html",
    "title": "dt.to_months",
    "section": "",
    "text": "dt.to_months\ndt.to_months(col0)\nConstruct a month interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_months(5)\nINTERVAL 5 MONTH"
  },
  {
    "objectID": "api/agg.regr_intercept.html",
    "href": "api/agg.regr_intercept.html",
    "title": "agg.regr_intercept",
    "section": "",
    "text": "agg.regr_intercept\nagg.regr_intercept(col0, col1)\nReturns the intercept of the univariate linear regression line for non-null pairs in a group.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.substr.html",
    "href": "api/str.substr.html",
    "title": "str.substr",
    "section": "",
    "text": "str.substr\nstr.substr(col0, col1, col2)\nAlias of substring. Extract substring of length characters starting from character start. Note that a start value of 1 refers to the first character of the string.\n\n\n\nduckdb example\nresult\n\n\n\n\nsubstr(‘Hello’, 2, 2)\nel"
  },
  {
    "objectID": "api/dt.hour.html",
    "href": "api/dt.hour.html",
    "title": "dt.hour",
    "section": "",
    "text": "dt.hour\ndt.hour(col0)\nHours\n\n\n\nduckdb example\nresult\n\n\n\n\nhour(timestamp ‘2021-08-03 11:59:44.123456’)\n11"
  },
  {
    "objectID": "api/nested.array_transform.html",
    "href": "api/nested.array_transform.html",
    "title": "nested.array_transform",
    "section": "",
    "text": "nested.array_transform\nnested.array_transform(col0, col1)\nAlias for list_transform.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_transform(l, x -&gt; x + 1)\n[5, 6, 7]"
  },
  {
    "objectID": "api/nested.list_value.html",
    "href": "api/nested.list_value.html",
    "title": "nested.list_value",
    "section": "",
    "text": "nested.list_value\nnested.list_value(*args)\nCreate a LIST containing the argument values.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_value(4, 5, 6)\n[4, 5, 6]"
  },
  {
    "objectID": "api/json.json_valid.html",
    "href": "api/json.json_valid.html",
    "title": "json.json_valid",
    "section": "",
    "text": "json.json_valid\njson.json_valid(col0)\nReturn whether json is valid JSON\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/json.json_extract.html",
    "href": "api/json.json_extract.html",
    "title": "json.json_extract",
    "section": "",
    "text": "json.json_extract\njson.json_extract(col0, col1)\nExtract JSON from json at the given path. If path is a LIST, the result will be a LIST of JSON\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/json.json_array_length.html",
    "href": "api/json.json_array_length.html",
    "title": "json.json_array_length",
    "section": "",
    "text": "json.json_array_length\njson.json_array_length(col0)\nReturn the number of elements in the JSON array json, or 0 if it is not a JSON array. If path is specified, return the number of elements in the JSON array at the given path. If path is a LIST, the result will be LIST of array lengths\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.instr.html",
    "href": "api/str.instr.html",
    "title": "str.instr",
    "section": "",
    "text": "str.instr\nstr.instr(col0, col1)\nReturn location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\n\nduckdb example\nresult\n\n\n\n\ninstr(‘test test’,‘es’)\n2"
  },
  {
    "objectID": "design.html",
    "href": "design.html",
    "title": "Design",
    "section": "",
    "text": "Primacy: functions in the duckdb docs should run as is, with minor adaptation.\nLazy: functions should support lazy evaluation\nInteroperable types: any custom data types should work with other tools\nTODO:\nimport duckops as dop\nimport duckdb\n\nfrom siuba.data import penguins\nfrom siuba import *\n\nimport duckops.all as op"
  },
  {
    "objectID": "design.html#primacy",
    "href": "design.html#primacy",
    "title": "Design",
    "section": "Primacy",
    "text": "Primacy\nCurrently, duckdb documents functions in big tables. This is easy to read, but not valid SQL code.\nFor example, here are the docs for concat():\n\n\n\nexample\nresult\n\n\n\n\nconcat('Hello', ' ', 'World')\nHello World\n\n\n\nHere is what it looks like running the example in python:\n\nduckdb.execute(\"\"\"SELECT concat('Hello', ' ', 'World')\"\"\").fetchall()[0][0]\n\n'Hello World'\n\n\nduckops simplifies this, by letting you call duckdb functions directly:\n\ndop.str.concat(\"Hello\", \" \", \"World\")\n\n'Hello World'\n\n\nIt can even run against pandas Series:\n\ndop.str.concat(penguins.species, \"-\", penguins.island)\n\n0      Adelie-Torgersen\n1      Adelie-Torgersen\n2      Adelie-Torgersen\n3      Adelie-Torgersen\n4      Adelie-Torgersen\n             ...       \n339     Chinstrap-Dream\n340     Chinstrap-Dream\n341     Chinstrap-Dream\n342     Chinstrap-Dream\n343     Chinstrap-Dream\nLength: 344, dtype: object"
  },
  {
    "objectID": "design.html#lazy",
    "href": "design.html#lazy",
    "title": "Design",
    "section": "Lazy",
    "text": "Lazy\n\nfrom sqlalchemy import create_engine\nimport polars as pl\n\nengine = create_engine(\"duckdb:///:memory:\")\ntbl_penguins = tbl(engine, \"penguins\", penguins)\n\n(tbl_penguins\n  &gt;&gt; mutate(res = dop.str.concat(dop.str.concat(_.species, \"-\", _.island), \"----\"))\n)\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\nres\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\nAdelie-Torgersen----\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\nAdelie-Torgersen----\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\nAdelie-Torgersen----\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\nAdelie-Torgersen----\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\nAdelie-Torgersen----\n\n\n\n\n# .. may have more rows\n\n\n\nimport datetime\nfrom duckops._types import Interval\n\n\ndop.dt.date_part(\"year\", Interval(2, \"years\"))\n\ndatetime.timedelta(days = 30)\n\ndatetime.timedelta(days=30)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "api/str.regexp_full_match.html",
    "href": "api/str.regexp_full_match.html",
    "title": "str.regexp_full_match",
    "section": "",
    "text": "str.regexp_full_match\nstr.regexp_full_match(col0, col1)\nReturns true if the entire string matches the regex (see Pattern Matching)\n\n\n\nduckdb example\nresult\n\n\n\n\nregexp_full_match(‘anabanana’, ’(an)*’)\nfalse"
  },
  {
    "objectID": "api/unknown.md5_number.html",
    "href": "api/unknown.md5_number.html",
    "title": "unknown.md5_number",
    "section": "",
    "text": "unknown.md5_number\nunknown.md5_number(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.right_grapheme.html",
    "href": "api/str.right_grapheme.html",
    "title": "str.right_grapheme",
    "section": "",
    "text": "str.right_grapheme\nstr.right_grapheme(col0, col1)\nExtract the right-most count grapheme clusters\n\n\n\nduckdb example\nresult\n\n\n\n\nright_grapheme(‘🤦🏼‍♂️🤦🏽‍♀️’, 1)\n🤦🏽‍♀️"
  },
  {
    "objectID": "api/unknown.variance.html",
    "href": "api/unknown.variance.html",
    "title": "unknown.variance",
    "section": "",
    "text": "unknown.variance\nunknown.variance(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.not_ilike_escape.html",
    "href": "api/unknown.not_ilike_escape.html",
    "title": "unknown.not_ilike_escape",
    "section": "",
    "text": "unknown.not_ilike_escape\nunknown.not_ilike_escape(col0, col1, col2)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.strip_accents.html",
    "href": "api/str.strip_accents.html",
    "title": "str.strip_accents",
    "section": "",
    "text": "str.strip_accents\nstr.strip_accents(col0)\nStrips accents from string\n\n\n\nduckdb example\nresult\n\n\n\n\nstrip_accents(‘mühleisen’)\nmuhleisen"
  },
  {
    "objectID": "api/num.isfinite.html",
    "href": "api/num.isfinite.html",
    "title": "num.isfinite",
    "section": "",
    "text": "num.isfinite\nnum.isfinite(col0)\nReturns true if the floating point value is finite, false otherwise\n\n\n\nduckdb example\nresult\n\n\n\n\nisfinite(5.5)\ntrue"
  },
  {
    "objectID": "api/str.jaccard.html",
    "href": "api/str.jaccard.html",
    "title": "str.jaccard",
    "section": "",
    "text": "str.jaccard\nstr.jaccard(col0, col1)\nThe Jaccard similarity between two strings. Different case is considered different. Returns a number between 0 and 1.\n\n\n\nduckdb example\nresult\n\n\n\n\njaccard(‘duck’,‘luck’)\n0.6"
  },
  {
    "objectID": "api/json.json_contains.html",
    "href": "api/json.json_contains.html",
    "title": "json.json_contains",
    "section": "",
    "text": "json.json_contains\njson.json_contains(col0, col1)\nReturns true if json_needle is contained in json_haystack. Both parameters are of JSON type, but json_needle can also be a numeric value or a string, however the string must be wrapped in double quotes\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.isnan.html",
    "href": "api/num.isnan.html",
    "title": "num.isnan",
    "section": "",
    "text": "num.isnan\nnum.isnan(col0)\nReturns true if the floating point value is not a number, false otherwise\n\n\n\nduckdb example\nresult\n\n\n\n\nisnan(‘NaN’::float)\ntrue"
  },
  {
    "objectID": "api/nested.struct_extract.html",
    "href": "api/nested.struct_extract.html",
    "title": "nested.struct_extract",
    "section": "",
    "text": "nested.struct_extract\nnested.struct_extract(col0, col1)\nExtract the named entry from the struct.\n\n\n\nduckdb example\nresult\n\n\n\n\nstruct_extract(s, ‘i’)\n4"
  },
  {
    "objectID": "api/unknown.text.html",
    "href": "api/unknown.text.html",
    "title": "unknown.text",
    "section": "",
    "text": "unknown.text\nunknown.text(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.timezone.html",
    "href": "api/dt.timezone.html",
    "title": "dt.timezone",
    "section": "",
    "text": "dt.timezone\ndt.timezone(col0)\nUse the date parts of the timestamp in GMT to construct a timestamp in the given time zone. Effectively, the argument is a “local” time.\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\ntimezone(‘America/Denver’, TIMESTAMP ‘2001-02-16 20:38:40’)\n2001-02-16 19:38:40-08"
  },
  {
    "objectID": "api/blob.decode.html",
    "href": "api/blob.decode.html",
    "title": "blob.decode",
    "section": "",
    "text": "blob.decode\nblob.decode(col0)\nConvert blob to varchar. Fails if blob is not valid utf-8.\n\n\n\nduckdb example\nresult\n\n\n\n\ndecode(‘Ã¼’::BLOB)\nü"
  },
  {
    "objectID": "api/str.hash.html",
    "href": "api/str.hash.html",
    "title": "str.hash",
    "section": "",
    "text": "str.hash\nstr.hash(col0, *args)\nReturns an integer with the hash of the value\n\n\n\nduckdb example\nresult\n\n\n\n\nhash(‘🦆’)\n2595805878642663834"
  },
  {
    "objectID": "api/nested.union_tag.html",
    "href": "api/nested.union_tag.html",
    "title": "nested.union_tag",
    "section": "",
    "text": "nested.union_tag\nnested.union_tag(col0)\nRetrieve the currently selected tag of the union as an Enum.\n\n\n\nduckdb example\nresult\n\n\n\n\nunion_tag(union_value(k := ‘foo’))\n‘k’"
  },
  {
    "objectID": "api/str.list_element.html",
    "href": "api/str.list_element.html",
    "title": "str.list_element",
    "section": "",
    "text": "str.list_element\nstr.list_element(col0, col1)\nAn alias for array_extract.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_element(‘DuckDB’, 2)\n‘u’"
  },
  {
    "objectID": "api/agg.reservoir_quantile.html",
    "href": "api/agg.reservoir_quantile.html",
    "title": "agg.reservoir_quantile",
    "section": "",
    "text": "agg.reservoir_quantile\nagg.reservoir_quantile(col0, col1)\nGives the approximate quantile using reservoir sampling, the sample size is optional and uses 8192 as a default size.\n\n\n\nduckdb example\nresult\n\n\n\n\nreservoir_quantile(A,0.5,1024)\nnan"
  },
  {
    "objectID": "api/blob.octet_length.html",
    "href": "api/blob.octet_length.html",
    "title": "blob.octet_length",
    "section": "",
    "text": "blob.octet_length\nblob.octet_length(col0)\nNumber of bytes in blob\n\n\n\nduckdb example\nresult\n\n\n\n\noctet_length(‘ª»’::BLOB)\n2"
  },
  {
    "objectID": "api/dt.minute.html",
    "href": "api/dt.minute.html",
    "title": "dt.minute",
    "section": "",
    "text": "dt.minute\ndt.minute(col0)\nMinutes\n\n\n\nduckdb example\nresult\n\n\n\n\nminute(timestamp ‘2021-08-03 11:59:44.123456’)\n59"
  },
  {
    "objectID": "api/str.ascii.html",
    "href": "api/str.ascii.html",
    "title": "str.ascii",
    "section": "",
    "text": "str.ascii\nstr.ascii(col0)\nReturns an integer that represents the Unicode code point of the first character of the string\n\n\n\nduckdb example\nresult\n\n\n\n\nascii(‘Ω’)\n937"
  },
  {
    "objectID": "api/agg.regr_sxy.html",
    "href": "api/agg.regr_sxy.html",
    "title": "agg.regr_sxy",
    "section": "",
    "text": "agg.regr_sxy\nagg.regr_sxy(col0, col1)\nReturns the population covariance of input values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.string_split.html",
    "href": "api/str.string_split.html",
    "title": "str.string_split",
    "section": "",
    "text": "str.string_split\nstr.string_split(col0, col1)\nSplits the string along the separator\n\n\n\nduckdb example\nresult\n\n\n\n\nstring_split(‘hello␣world’, ‘␣’)\n[‘hello’, ‘world’]"
  },
  {
    "objectID": "api/num.acos.html",
    "href": "api/num.acos.html",
    "title": "num.acos",
    "section": "",
    "text": "num.acos\nnum.acos(col0)\ncomputes the arccosine of x\n\n\n\nduckdb example\nresult\n\n\n\n\nacos(0.5)\n1.0471975511965976"
  },
  {
    "objectID": "api/str.list_extract.html",
    "href": "api/str.list_extract.html",
    "title": "str.list_extract",
    "section": "",
    "text": "str.list_extract\nstr.list_extract(col0, col1)\nAn alias for array_extract.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_extract(‘DuckDB’, 2)\n‘u’"
  },
  {
    "objectID": "api/agg.min.html",
    "href": "api/agg.min.html",
    "title": "agg.min",
    "section": "",
    "text": "agg.min\nagg.min(col0)\nReturns the minumum value present in arg.\n\n\n\nduckdb example\nresult\n\n\n\n\nmin(A)\nnan"
  },
  {
    "objectID": "api/num.asin.html",
    "href": "api/num.asin.html",
    "title": "num.asin",
    "section": "",
    "text": "num.asin\nnum.asin(col0)\ncomputes the arcsine of x\n\n\n\nduckdb example\nresult\n\n\n\n\nasin(0.5)\n0.5235987755982989"
  },
  {
    "objectID": "api/nested.list_has.html",
    "href": "api/nested.list_has.html",
    "title": "nested.list_has",
    "section": "",
    "text": "nested.list_has\nnested.list_has(col0, col1)\nAlias for list_contains.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_has([1, 2, NULL], 1)\ntrue"
  },
  {
    "objectID": "api/agg.stddev_pop.html",
    "href": "api/agg.stddev_pop.html",
    "title": "agg.stddev_pop",
    "section": "",
    "text": "agg.stddev_pop\nagg.stddev_pop(col0)\nReturns the population standard deviation.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.dayofyear.html",
    "href": "api/dt.dayofyear.html",
    "title": "dt.dayofyear",
    "section": "",
    "text": "dt.dayofyear\ndt.dayofyear(col0)\nNumeric ISO weekday (Monday = 1, Sunday = 7)\n\n\n\nduckdb example\nresult\n\n\n\n\nisodow(date ‘1992-02-15’)\n46"
  },
  {
    "objectID": "api/str.strlen.html",
    "href": "api/str.strlen.html",
    "title": "str.strlen",
    "section": "",
    "text": "str.strlen\nstr.strlen(col0)\nNumber of bytes in string\n\n\n\nduckdb example\nresult\n\n\n\n\nstrlen(‘🦆’)\n4"
  },
  {
    "objectID": "api/agg.regr_sxx.html",
    "href": "api/agg.regr_sxx.html",
    "title": "agg.regr_sxx",
    "section": "",
    "text": "agg.regr_sxx\nagg.regr_sxx(col0, col1)\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.tan.html",
    "href": "api/num.tan.html",
    "title": "num.tan",
    "section": "",
    "text": "num.tan\nnum.tan(col0)\ncomputes the tangent of x\n\n\n\nduckdb example\nresult\n\n\n\n\ntan(90)\n-1.995200412208242"
  },
  {
    "objectID": "api/nested.array_cat.html",
    "href": "api/nested.array_cat.html",
    "title": "nested.array_cat",
    "section": "",
    "text": "nested.array_cat\nnested.array_cat(col0, col1)\nAlias for list_concat.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_cat([2, 3], [4, 5, 6])\n[2, 3, 4, 5, 6]"
  },
  {
    "objectID": "api/dt.weekofyear.html",
    "href": "api/dt.weekofyear.html",
    "title": "dt.weekofyear",
    "section": "",
    "text": "dt.weekofyear\ndt.weekofyear(col0)\nISO Week (synonym)\n\n\n\nduckdb example\nresult\n\n\n\n\nweekofyear(date ‘1992-02-15’)\n7"
  },
  {
    "objectID": "api/str.left_grapheme.html",
    "href": "api/str.left_grapheme.html",
    "title": "str.left_grapheme",
    "section": "",
    "text": "str.left_grapheme\nstr.left_grapheme(col0, col1)\nExtract the left-most grapheme clusters\n\n\n\nduckdb example\nresult\n\n\n\n\nleft_grapheme(‘🤦🏼‍♂️🤦🏽‍♀️’, 1)\n🤦🏼‍♂️"
  },
  {
    "objectID": "api/dt.to_days.html",
    "href": "api/dt.to_days.html",
    "title": "dt.to_days",
    "section": "",
    "text": "dt.to_days\ndt.to_days(col0)\nConstruct a day interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_days(5)\nINTERVAL 5 DAY"
  },
  {
    "objectID": "api/unknown.split.html",
    "href": "api/unknown.split.html",
    "title": "unknown.split",
    "section": "",
    "text": "unknown.split\nunknown.split(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.even.html",
    "href": "api/num.even.html",
    "title": "num.even",
    "section": "",
    "text": "num.even\nnum.even(col0)\nround to next even number by rounding away from zero.\n\n\n\nduckdb example\nresult\n\n\n\n\neven(2.9)\n4"
  },
  {
    "objectID": "api/dt.epoch_ms.html",
    "href": "api/dt.epoch_ms.html",
    "title": "dt.epoch_ms",
    "section": "",
    "text": "dt.epoch_ms\ndt.epoch_ms(col0)\nConverts ms since epoch to a timestamp\n\n\n\nduckdb example\nresult\n\n\n\n\nepoch_ms(701222400000)\n1992-03-22 00:00:00"
  },
  {
    "objectID": "api/dt.now.html",
    "href": "api/dt.now.html",
    "title": "dt.now",
    "section": "",
    "text": "dt.now\ndt.now()\nCurrent date and time (start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\nnow()\n2022-10-08 12:44:46.122-07"
  },
  {
    "objectID": "api/agg.var_samp.html",
    "href": "api/agg.var_samp.html",
    "title": "agg.var_samp",
    "section": "",
    "text": "agg.var_samp\nagg.var_samp(col0)\nReturns the sample variance of all input values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.row.html",
    "href": "api/nested.row.html",
    "title": "nested.row",
    "section": "",
    "text": "nested.row\nnested.row(*args)\nCreate a STRUCT containing the argument values. If the values are column references, the entry name will be the column name; otherwise it will be the string ‘vN’ where N is the (1-based) position of the argument.\n\n\n\nduckdb example\nresult\n\n\n\n\nrow(i, i % 4, i / 4)\n{‘i’: 3, ‘v2’: 3, ‘v3’: 0}"
  },
  {
    "objectID": "api/unknown.max_by.html",
    "href": "api/unknown.max_by.html",
    "title": "unknown.max_by",
    "section": "",
    "text": "unknown.max_by\nunknown.max_by(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.date_diff.html",
    "href": "api/dt.date_diff.html",
    "title": "dt.date_diff",
    "section": "",
    "text": "dt.date_diff\ndt.date_diff(col0, col1, col2)\nThe number of partition boundaries between the dates\n\n\n\nduckdb example\nresult\n\n\n\n\ndate_diff(‘month’, DATE ‘1992-09-15’, DATE ‘1992-11-14’)\n2"
  },
  {
    "objectID": "api/agg.regr_slope.html",
    "href": "api/agg.regr_slope.html",
    "title": "agg.regr_slope",
    "section": "",
    "text": "agg.regr_slope\nagg.regr_slope(col0, col1)\nReturns the slope of the linear regression line for non-null pairs in a group.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.factorial.html",
    "href": "api/num.factorial.html",
    "title": "num.factorial",
    "section": "",
    "text": "num.factorial\nnum.factorial(col0)\nSee ! operator. Computes the product of the current integer and all integers below it\n\n\n\nduckdb example\nresult\n\n\n\n\nfactorial(4)\n24"
  },
  {
    "objectID": "api/unknown.ilike_escape.html",
    "href": "api/unknown.ilike_escape.html",
    "title": "unknown.ilike_escape",
    "section": "",
    "text": "unknown.ilike_escape\nunknown.ilike_escape(col0, col1, col2)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_filter.html",
    "href": "api/nested.list_filter.html",
    "title": "nested.list_filter",
    "section": "",
    "text": "nested.list_filter\nnested.list_filter(col0, col1)\nConstructs a list from those elements of the input list for which the lambda function returns true. See the Lambda Functions section for more details.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_filter(l, x -&gt; x &gt; 4)\n[5, 6]"
  },
  {
    "objectID": "api/str.starts_with.html",
    "href": "api/str.starts_with.html",
    "title": "str.starts_with",
    "section": "",
    "text": "str.starts_with\nstr.starts_with(col0, col1)\nReturn true if string begins with search_string\n\n\n\nduckdb example\nresult\n\n\n\n\nstarts_with(‘abc’,‘a’)\ntrue"
  },
  {
    "objectID": "api/unknown.bit_position.html",
    "href": "api/unknown.bit_position.html",
    "title": "unknown.bit_position",
    "section": "",
    "text": "unknown.bit_position\nunknown.bit_position(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.array_extract.html",
    "href": "api/str.array_extract.html",
    "title": "str.array_extract",
    "section": "",
    "text": "str.array_extract\nstr.array_extract(col0, col1)\nExtract a single character using a (1-based) index.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_extract(‘DuckDB’, 2)\n‘u’"
  },
  {
    "objectID": "api/str.hamming.html",
    "href": "api/str.hamming.html",
    "title": "str.hamming",
    "section": "",
    "text": "str.hamming\nstr.hamming(col0, col1)\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\n\nduckdb example\nresult\n\n\n\n\nhamming(‘duck’,‘luck’)\n1.0"
  },
  {
    "objectID": "api/num.pi.html",
    "href": "api/num.pi.html",
    "title": "num.pi",
    "section": "",
    "text": "num.pi\nnum.pi()\nreturns the value of pi\n\n\n\nduckdb example\nresult\n\n\n\n\npi()\n3.141592653589793"
  },
  {
    "objectID": "api/nested.list_aggregate.html",
    "href": "api/nested.list_aggregate.html",
    "title": "nested.list_aggregate",
    "section": "",
    "text": "nested.list_aggregate\nnested.list_aggregate(col0, col1, *args)\nExecutes the aggregate function name on the elements of list. See the List Aggregates section for more details.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_aggregate([1, 2, NULL], ‘min’)\n1"
  },
  {
    "objectID": "api/agg.histogram.html",
    "href": "api/agg.histogram.html",
    "title": "agg.histogram",
    "section": "",
    "text": "agg.histogram\nagg.histogram(col0)\nReturns a LIST of STRUCTs with the fields bucket and count.\n\n\n\nduckdb example\nresult\n\n\n\n\nhistogram(A)\nnan"
  },
  {
    "objectID": "api/nested.list_concat.html",
    "href": "api/nested.list_concat.html",
    "title": "nested.list_concat",
    "section": "",
    "text": "nested.list_concat\nnested.list_concat(col0, col1)\nConcatenates two lists.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_concat([2, 3], [4, 5, 6])\n[2, 3, 4, 5, 6]"
  },
  {
    "objectID": "api/agg.arg_min.html",
    "href": "api/agg.arg_min.html",
    "title": "agg.arg_min",
    "section": "",
    "text": "agg.arg_min\nagg.arg_min(col0, col1)\nFinds the row with the minimum val. Calculates the arg expression at that row.\n\n\n\nduckdb example\nresult\n\n\n\n\narg_min(A,B)\nnan"
  },
  {
    "objectID": "api/agg.corr.html",
    "href": "api/agg.corr.html",
    "title": "agg.corr",
    "section": "",
    "text": "agg.corr\nagg.corr(col0, col1)\nReturns the correlation coefficient for non-null pairs in a group.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.prefix.html",
    "href": "api/str.prefix.html",
    "title": "str.prefix",
    "section": "",
    "text": "str.prefix\nstr.prefix(col0, col1)\nReturn true if string starts with search_string.\n\n\n\nduckdb example\nresult\n\n\n\n\nprefix(‘abc’, ‘ab’)\ntrue"
  },
  {
    "objectID": "api/unknown.multiply.html",
    "href": "api/unknown.multiply.html",
    "title": "unknown.multiply",
    "section": "",
    "text": "unknown.multiply\nunknown.multiply(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.nextafter.html",
    "href": "api/num.nextafter.html",
    "title": "num.nextafter",
    "section": "",
    "text": "num.nextafter\nnum.nextafter(col0, col1)\nreturn the next floating point value after x in the direction of y\n\n\n\nduckdb example\nresult\n\n\n\n\nnextafter(1::float, 2::float)\n1.0000001"
  },
  {
    "objectID": "api/str.levenshtein.html",
    "href": "api/str.levenshtein.html",
    "title": "str.levenshtein",
    "section": "",
    "text": "str.levenshtein\nstr.levenshtein(col0, col1)\nThe minimum number of single-character edits (insertions, deletions or substitutions) required to change one string to the other. Different case is considered different.\n\n\n\nduckdb example\nresult\n\n\n\n\nlevenshtein(‘duck’,‘db’)\n3.0"
  },
  {
    "objectID": "api/nested.array_apply.html",
    "href": "api/nested.array_apply.html",
    "title": "nested.array_apply",
    "section": "",
    "text": "nested.array_apply\nnested.array_apply(col0, col1)\nAlias for list_transform.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_apply(l, x -&gt; x + 1)\n[5, 6, 7]"
  },
  {
    "objectID": "api/unknown.translate.html",
    "href": "api/unknown.translate.html",
    "title": "unknown.translate",
    "section": "",
    "text": "unknown.translate\nunknown.translate(col0, col1, col2)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.finalize.html",
    "href": "api/unknown.finalize.html",
    "title": "unknown.finalize",
    "section": "",
    "text": "unknown.finalize\nunknown.finalize(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.min_by.html",
    "href": "api/unknown.min_by.html",
    "title": "unknown.min_by",
    "section": "",
    "text": "unknown.min_by\nunknown.min_by(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.week.html",
    "href": "api/dt.week.html",
    "title": "dt.week",
    "section": "",
    "text": "dt.week\ndt.week(col0)\nISO Week\n\n\n\nduckdb example\nresult\n\n\n\n\nweek(date ‘1992-02-15’)\n7"
  },
  {
    "objectID": "api/str.trim.html",
    "href": "api/str.trim.html",
    "title": "str.trim",
    "section": "",
    "text": "str.trim\nstr.trim(col0)\nRemoves any spaces from either side of the string\n\n\n\nduckdb example\nresult\n\n\n\n\ntrim(‘␣␣␣␣test␣␣’)\ntest"
  },
  {
    "objectID": "api/nested.list_pack.html",
    "href": "api/nested.list_pack.html",
    "title": "nested.list_pack",
    "section": "",
    "text": "nested.list_pack\nnested.list_pack(*args)\nAlias for list_value.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_pack(4, 5, 6)\n[4, 5, 6]"
  },
  {
    "objectID": "api/str.string_split_regex.html",
    "href": "api/str.string_split_regex.html",
    "title": "str.string_split_regex",
    "section": "",
    "text": "str.string_split_regex\nstr.string_split_regex(col0, col1)\nSplits the string along the regex\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\nstring_split_regex(‘hello␣world; 42’, ‘;?␣’)\n[‘hello’, ‘world’, ‘42’]"
  },
  {
    "objectID": "api/unknown.enum_first.html",
    "href": "api/unknown.enum_first.html",
    "title": "unknown.enum_first",
    "section": "",
    "text": "unknown.enum_first\nunknown.enum_first(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.exp.html",
    "href": "api/unknown.exp.html",
    "title": "unknown.exp",
    "section": "",
    "text": "unknown.exp\nunknown.exp(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.array_contains.html",
    "href": "api/nested.array_contains.html",
    "title": "nested.array_contains",
    "section": "",
    "text": "nested.array_contains\nnested.array_contains(col0, col1)\nAlias for list_contains.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_contains([1, 2, NULL], 1)\ntrue"
  },
  {
    "objectID": "api/str.mismatches.html",
    "href": "api/str.mismatches.html",
    "title": "str.mismatches",
    "section": "",
    "text": "str.mismatches\nstr.mismatches(col0, col1)\nThe number of positions with different characters for 2 strings of equal length. Different case is considered different.\n\n\n\nduckdb example\nresult\n\n\n\n\nmismatches(‘duck’,‘luck’)\n1.0"
  },
  {
    "objectID": "api/agg.approx_quantile.html",
    "href": "api/agg.approx_quantile.html",
    "title": "agg.approx_quantile",
    "section": "",
    "text": "agg.approx_quantile\nagg.approx_quantile(col0, col1)\nGives the approximate quantile using T-Digest.\n\n\n\nduckdb example\nresult\n\n\n\n\napprox_quantile(A,0.5)\nnan"
  },
  {
    "objectID": "api/agg.bit_or.html",
    "href": "api/agg.bit_or.html",
    "title": "agg.bit_or",
    "section": "",
    "text": "agg.bit_or\nagg.bit_or(col0)\nReturns the bitwise OR of all bits in a given expression.\n\n\n\nduckdb example\nresult\n\n\n\n\nbit_or(A)\nnan"
  },
  {
    "objectID": "api/dt.dayofweek.html",
    "href": "api/dt.dayofweek.html",
    "title": "dt.dayofweek",
    "section": "",
    "text": "dt.dayofweek\ndt.dayofweek(col0)\nNumeric weekday (Sunday = 0, Saturday = 6)\n\n\n\nduckdb example\nresult\n\n\n\n\ndayofweek(date ‘1992-02-15’)\n6"
  },
  {
    "objectID": "api/nested.array_reverse_sort.html",
    "href": "api/nested.array_reverse_sort.html",
    "title": "nested.array_reverse_sort",
    "section": "",
    "text": "nested.array_reverse_sort\nnested.array_reverse_sort(col0)\nAlias for list_reverse_sort.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_reverse_sort([3, 6, 1, 2])\n[6, 3, 2, 1]"
  },
  {
    "objectID": "api/unknown.mod.html",
    "href": "api/unknown.mod.html",
    "title": "unknown.mod",
    "section": "",
    "text": "unknown.mod\nunknown.mod(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.gamma.html",
    "href": "api/num.gamma.html",
    "title": "num.gamma",
    "section": "",
    "text": "num.gamma\nnum.gamma(col0)\ninterpolation of (x-1) factorial (so decimal inputs are allowed)\n\n\n\nduckdb example\nresult\n\n\n\n\ngamma(5.5)\n52.34277778455352"
  },
  {
    "objectID": "api/nested.list_sort.html",
    "href": "api/nested.list_sort.html",
    "title": "nested.list_sort",
    "section": "",
    "text": "nested.list_sort\nnested.list_sort(col0)\nSorts the elements of the list. See the Sorting Lists section for more details about the sorting order and the null sorting order.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_sort([3, 6, 1, 2])\n[1, 2, 3, 6]"
  },
  {
    "objectID": "api/nested.list_position.html",
    "href": "api/nested.list_position.html",
    "title": "nested.list_position",
    "section": "",
    "text": "nested.list_position\nnested.list_position(col0, col1)\nReturns the index of the element if the list contains the element.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_contains([1, 2, NULL], 2)\n2"
  },
  {
    "objectID": "api/num.atan2.html",
    "href": "api/num.atan2.html",
    "title": "num.atan2",
    "section": "",
    "text": "num.atan2\nnum.atan2(col0, col1)\ncomputes the arctangent (x, y)\n\n\n\nduckdb example\nresult\n\n\n\n\natan2(0.5, 0.5)\n0.7853981633974483"
  },
  {
    "objectID": "api/agg.mad.html",
    "href": "api/agg.mad.html",
    "title": "agg.mad",
    "section": "",
    "text": "agg.mad\nagg.mad(col0)\nReturns the median absolute deviation for the values within x. NULL values are ignored. Temporal types return a positive INTERVAL.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_distinct.html",
    "href": "api/nested.list_distinct.html",
    "title": "nested.list_distinct",
    "section": "",
    "text": "nested.list_distinct\nnested.list_distinct(col0)\nRemoves all duplicates and NULLs from a list. Does not preserve the original order.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_distinct([1, 1, NULL, -3, 1, 5])\n[1, 5, -3]"
  },
  {
    "objectID": "api/agg.stddev_samp.html",
    "href": "api/agg.stddev_samp.html",
    "title": "agg.stddev_samp",
    "section": "",
    "text": "agg.stddev_samp\nagg.stddev_samp(col0)\nReturns the sample standard deviation.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.flatten.html",
    "href": "api/unknown.flatten.html",
    "title": "unknown.flatten",
    "section": "",
    "text": "unknown.flatten\nunknown.flatten(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.get_current_time.html",
    "href": "api/dt.get_current_time.html",
    "title": "dt.get_current_time",
    "section": "",
    "text": "dt.get_current_time\ndt.get_current_time()\nCurrent time (start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.mode.html",
    "href": "api/agg.mode.html",
    "title": "agg.mode",
    "section": "",
    "text": "agg.mode\nagg.mode(col0)\nReturns the most frequent value for the values within x. NULL values are ignored.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/json.json_object.html",
    "href": "api/json.json_object.html",
    "title": "json.json_object",
    "section": "",
    "text": "json.json_object\njson.json_object(*args)\nCreate a JSON object from any number of key, value pairs\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.combine.html",
    "href": "api/unknown.combine.html",
    "title": "unknown.combine",
    "section": "",
    "text": "unknown.combine\nunknown.combine(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.dayofmonth.html",
    "href": "api/dt.dayofmonth.html",
    "title": "dt.dayofmonth",
    "section": "",
    "text": "dt.dayofmonth\ndt.dayofmonth(col0)\nDay (synonym)\n\n\n\nduckdb example\nresult\n\n\n\n\ndayofmonth(date ‘1992-02-15’)\n15"
  },
  {
    "objectID": "api/str.regexp_replace.html",
    "href": "api/str.regexp_replace.html",
    "title": "str.regexp_replace",
    "section": "",
    "text": "str.regexp_replace\nstr.regexp_replace(col0, col1, col2)\nReplaces the first occurrence of regex with the replacement, use ‘g’ modifier to replace all occurrences instead (see Pattern Matching)\n\n\n\nduckdb example\nresult\n\n\n\n\nselect regexp_replace(‘hello’, ‘[lo]’, ‘-’)\nhe-lo"
  },
  {
    "objectID": "api/unknown.stddev.html",
    "href": "api/unknown.stddev.html",
    "title": "unknown.stddev",
    "section": "",
    "text": "unknown.stddev\nunknown.stddev(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.make_date.html",
    "href": "api/dt.make_date.html",
    "title": "dt.make_date",
    "section": "",
    "text": "dt.make_date\ndt.make_date(col0, col1, col2)\nThe date for the given parts\n\n\n\nduckdb example\nresult\n\n\n\n\nmake_date(1992, 9, 20)\n1992-09-20"
  },
  {
    "objectID": "api/agg.approx_count_distinct.html",
    "href": "api/agg.approx_count_distinct.html",
    "title": "agg.approx_count_distinct",
    "section": "",
    "text": "agg.approx_count_distinct\nagg.approx_count_distinct(col0)\nGives the approximate count of distintinct elements using HyperLogLog.\n\n\n\nduckdb example\nresult\n\n\n\n\napprox_count_distinct(A)\nnan"
  },
  {
    "objectID": "api/dt.to_hours.html",
    "href": "api/dt.to_hours.html",
    "title": "dt.to_hours",
    "section": "",
    "text": "dt.to_hours\ndt.to_hours(col0)\nConstruct a hour interval\n\n\n\nduckdb example\nresult\n\n\n\n\nto_hours(5)\nINTERVAL 5 HOUR"
  },
  {
    "objectID": "api/agg.median.html",
    "href": "api/agg.median.html",
    "title": "agg.median",
    "section": "",
    "text": "agg.median\nagg.median(col0)\nReturns the middle value of the set. NULL values are ignored. For even value counts, quantitiative values are averaged and ordinal values return the lower value.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.skewness.html",
    "href": "api/agg.skewness.html",
    "title": "agg.skewness",
    "section": "",
    "text": "agg.skewness\nagg.skewness(col0)\nReturns the skewness of all input values.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.quantile_cont.html",
    "href": "api/agg.quantile_cont.html",
    "title": "agg.quantile_cont",
    "section": "",
    "text": "agg.quantile_cont\nagg.quantile_cont(col0, col1)\nReturns the intepolated quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding intepolated quantiles.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.get_bit.html",
    "href": "api/unknown.get_bit.html",
    "title": "unknown.get_bit",
    "section": "",
    "text": "unknown.get_bit\nunknown.get_bit(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.millennium.html",
    "href": "api/dt.millennium.html",
    "title": "dt.millennium",
    "section": "",
    "text": "dt.millennium\ndt.millennium(col0)\nMillennium\n\n\n\nduckdb example\nresult\n\n\n\n\nmillennium(date ‘1992-02-15’)\n2"
  },
  {
    "objectID": "api/json.json_array.html",
    "href": "api/json.json_array.html",
    "title": "json.json_array",
    "section": "",
    "text": "json.json_array\njson.json_array(*args)\nCreate a JSON array from any number of values\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.weekday.html",
    "href": "api/dt.weekday.html",
    "title": "dt.weekday",
    "section": "",
    "text": "dt.weekday\ndt.weekday(col0)\nNumeric weekday synonym (Sunday = 0, Saturday = 6)\n\n\n\nduckdb example\nresult\n\n\n\n\nweekday(date ‘1992-02-15’)\n6"
  },
  {
    "objectID": "api/json.json_keys.html",
    "href": "api/json.json_keys.html",
    "title": "json.json_keys",
    "section": "",
    "text": "json.json_keys\njson.json_keys(col0)\nReturns the keys of json as a LIST of VARCHAR, if json is a JSON object. If path is specified, return the keys of the JSON object at the given path. If path is a LIST, the result will be LIST of LIST of VARCHAR\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/json.json_type.html",
    "href": "api/json.json_type.html",
    "title": "json.json_type",
    "section": "",
    "text": "json.json_type\njson.json_type(col0)\nReturn the type of the supplied json, which is one of OBJECT, ARRAY, BIGINT, UBIGINT, VARCHAR, BOOLEAN, NULL. If path is specified, return the type of the element at the given path. If path is a LIST, the result will be LIST of types\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.upper.html",
    "href": "api/str.upper.html",
    "title": "str.upper",
    "section": "",
    "text": "str.upper\nstr.upper(col0)\nConvert string to upper case\n\n\n\nduckdb example\nresult\n\n\n\n\nupper(‘Hello’)\nHELLO"
  },
  {
    "objectID": "api/dt.to_timestamp.html",
    "href": "api/dt.to_timestamp.html",
    "title": "dt.to_timestamp",
    "section": "",
    "text": "dt.to_timestamp\ndt.to_timestamp(col0)\nConverts sec since epoch to a timestamp\n\n\n\nduckdb example\nresult\n\n\n\n\nto_timestamp(701222400)\n1992-03-22 00:00:00"
  },
  {
    "objectID": "api/unknown.argmin.html",
    "href": "api/unknown.argmin.html",
    "title": "unknown.argmin",
    "section": "",
    "text": "unknown.argmin\nunknown.argmin(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.datediff.html",
    "href": "api/dt.datediff.html",
    "title": "dt.datediff",
    "section": "",
    "text": "dt.datediff\ndt.datediff(col0, col1, col2)\nAlias of date_diff. The number of partition boundaries between the dates\n\n\n\nduckdb example\nresult\n\n\n\n\ndatediff(‘month’, DATE ‘1992-09-15’, DATE ‘1992-11-14’)\n2"
  },
  {
    "objectID": "api/unknown.json_extract_path.html",
    "href": "api/unknown.json_extract_path.html",
    "title": "unknown.json_extract_path",
    "section": "",
    "text": "unknown.json_extract_path\nunknown.json_extract_path(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.isoyear.html",
    "href": "api/dt.isoyear.html",
    "title": "dt.isoyear",
    "section": "",
    "text": "dt.isoyear\ndt.isoyear(col0)\nISO Year number (Starts on Monday of week containing Jan 4th)\n\n\n\nduckdb example\nresult\n\n\n\n\nisoyear(date ‘2022-01-01’)\n2021"
  },
  {
    "objectID": "api/agg.max.html",
    "href": "api/agg.max.html",
    "title": "agg.max",
    "section": "",
    "text": "agg.max\nagg.max(col0)\nReturns the maximum value present in arg.\n\n\n\nduckdb example\nresult\n\n\n\n\nmax(A)\nnan"
  },
  {
    "objectID": "api/nested.union_value.html",
    "href": "api/nested.union_value.html",
    "title": "nested.union_value",
    "section": "",
    "text": "nested.union_value\nnested.union_value(*args)\nCreate a single member UNION containing the argument value. The tag of the value will be the bound variable name.\n\n\n\nduckdb example\nresult\n\n\n\n\nunion_value(k := ‘hello’)\n‘hello’::UNION(k VARCHAR)"
  },
  {
    "objectID": "api/unknown.md5_number_lower.html",
    "href": "api/unknown.md5_number_lower.html",
    "title": "unknown.md5_number_lower",
    "section": "",
    "text": "unknown.md5_number_lower\nunknown.md5_number_lower(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.ceil.html",
    "href": "api/num.ceil.html",
    "title": "num.ceil",
    "section": "",
    "text": "num.ceil\nnum.ceil(col0)\nrounds the number up\n\n\n\nduckdb example\nresult\n\n\n\n\nceil(17.4)\n18"
  },
  {
    "objectID": "api/str.rtrim.html",
    "href": "api/str.rtrim.html",
    "title": "str.rtrim",
    "section": "",
    "text": "str.rtrim\nstr.rtrim(col0)\nRemoves any spaces from the right side of the string\n\n\n\nduckdb example\nresult\n\n\n\n\nrtrim(‘␣␣␣␣test␣␣’)\n␣␣␣␣test"
  },
  {
    "objectID": "api/nested.array_distinct.html",
    "href": "api/nested.array_distinct.html",
    "title": "nested.array_distinct",
    "section": "",
    "text": "nested.array_distinct\nnested.array_distinct(col0)\nAlias for list_distinct.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_distinct([1, 1, NULL, -3, 1, 5])\n[1, 5, -3]"
  },
  {
    "objectID": "api/num.lgamma.html",
    "href": "api/num.lgamma.html",
    "title": "num.lgamma",
    "section": "",
    "text": "num.lgamma\nnum.lgamma(col0)\ncomputes the log of the gamma function.\n\n\n\nduckdb example\nresult\n\n\n\n\nlgamma(2)\n0"
  },
  {
    "objectID": "api/nested.array_indexof.html",
    "href": "api/nested.array_indexof.html",
    "title": "nested.array_indexof",
    "section": "",
    "text": "nested.array_indexof\nnested.array_indexof(col0, col1)\nAlias for list_position.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_indexof([1, 2, NULL], 2)\n2"
  },
  {
    "objectID": "api/json.from_json.html",
    "href": "api/json.from_json.html",
    "title": "json.from_json",
    "section": "",
    "text": "json.from_json\njson.from_json(col0, col1)\nAlias for json_transform\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.count.html",
    "href": "api/agg.count.html",
    "title": "agg.count",
    "section": "",
    "text": "agg.count\nagg.count(col0)\nCalculates the number of tuples tuples in arg.\n\n\n\nduckdb example\nresult\n\n\n\n\ncount(A)\nnan"
  },
  {
    "objectID": "api/nested.array_aggregate.html",
    "href": "api/nested.array_aggregate.html",
    "title": "nested.array_aggregate",
    "section": "",
    "text": "nested.array_aggregate\nnested.array_aggregate(col0, col1, *args)\nAlias for list_aggregate.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_aggregate([1, 2, NULL], ‘min’)\n1"
  },
  {
    "objectID": "api/dt.time_bucket.html",
    "href": "api/dt.time_bucket.html",
    "title": "dt.time_bucket",
    "section": "",
    "text": "dt.time_bucket\ndt.time_bucket(col0, col1)\nTruncate date by the specified interval bucket_width. Buckets are aligned relative to origin date. origin defaults to 2000-01-03 for buckets that don’t include a month or year interval, and to 2000-01-01 for month and year buckets.\n\n\n\n\n\n\n\nduckdb example\nresult\n\n\n\n\ntime_bucket(INTERVAL ‘2 weeks’, DATE ‘1992-04-20’, DATE ‘1992-04-01’)\n1992-04-15"
  },
  {
    "objectID": "api/unknown.enum_range_boundary.html",
    "href": "api/unknown.enum_range_boundary.html",
    "title": "unknown.enum_range_boundary",
    "section": "",
    "text": "unknown.enum_range_boundary\nunknown.enum_range_boundary(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_indexof.html",
    "href": "api/nested.list_indexof.html",
    "title": "nested.list_indexof",
    "section": "",
    "text": "nested.list_indexof\nnested.list_indexof(col0, col1)\nAlias for list_position.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_indexof([1, 2, NULL], 2)\n2"
  },
  {
    "objectID": "api/num.chr.html",
    "href": "api/num.chr.html",
    "title": "num.chr",
    "section": "",
    "text": "num.chr\nnum.chr(col0)\nreturns a character which is corresponding the ASCII code value or Unicode code point\n\n\n\nduckdb example\nresult\n\n\n\n\nchr(65)\nA"
  },
  {
    "objectID": "api/str.length_grapheme.html",
    "href": "api/str.length_grapheme.html",
    "title": "str.length_grapheme",
    "section": "",
    "text": "str.length_grapheme\nstr.length_grapheme(col0)\nNumber of grapheme clusters in string\n\n\n\nduckdb example\nresult\n\n\n\n\nlength_grapheme(‘🤦🏼‍♂️🤦🏽‍♀️’)\n2"
  },
  {
    "objectID": "api/unknown.kahan_sum.html",
    "href": "api/unknown.kahan_sum.html",
    "title": "unknown.kahan_sum",
    "section": "",
    "text": "unknown.kahan_sum\nunknown.kahan_sum(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/agg.regr_avgx.html",
    "href": "api/agg.regr_avgx.html",
    "title": "agg.regr_avgx",
    "section": "",
    "text": "agg.regr_avgx\nagg.regr_avgx(col0, col1)\nReturns the average of the independent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.bit_length.html",
    "href": "api/str.bit_length.html",
    "title": "str.bit_length",
    "section": "",
    "text": "str.bit_length\nstr.bit_length(col0)\nNumber of bits in a string.\n\n\n\nduckdb example\nresult\n\n\n\n\nbit_length(‘abc’)\n24"
  },
  {
    "objectID": "api/dt.get_current_timestamp.html",
    "href": "api/dt.get_current_timestamp.html",
    "title": "dt.get_current_timestamp",
    "section": "",
    "text": "dt.get_current_timestamp\ndt.get_current_timestamp()\nCurrent date and time (start of current transaction)\n\n\n\nduckdb example\nresult\n\n\n\n\nget_current_timestamp()\n2022-10-08 12:44:46.122-07"
  },
  {
    "objectID": "api/agg.regr_avgy.html",
    "href": "api/agg.regr_avgy.html",
    "title": "agg.regr_avgy",
    "section": "",
    "text": "agg.regr_avgy\nagg.regr_avgy(col0, col1)\nReturns the average of the dependent variable for non-null pairs in a group, where x is the independent variable and y is the dependent variable.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/json.json_transform_strict.html",
    "href": "api/json.json_transform_strict.html",
    "title": "json.json_transform_strict",
    "section": "",
    "text": "json.json_transform_strict\njson.json_transform_strict(col0, col1)\nSame as json_transform, but throws an error when type casting fails\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.list_aggr.html",
    "href": "api/nested.list_aggr.html",
    "title": "nested.list_aggr",
    "section": "",
    "text": "nested.list_aggr\nnested.list_aggr(col0, col1, *args)\nAlias for list_aggregate.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_aggr([1, 2, NULL], ‘min’)\n1"
  },
  {
    "objectID": "api/num.log2.html",
    "href": "api/num.log2.html",
    "title": "num.log2",
    "section": "",
    "text": "num.log2\nnum.log2(col0)\ncomputes the 2-log of x\n\n\n\nduckdb example\nresult\n\n\n\n\nlog2(8)\n3"
  },
  {
    "objectID": "api/unknown.excel_text.html",
    "href": "api/unknown.excel_text.html",
    "title": "unknown.excel_text",
    "section": "",
    "text": "unknown.excel_text\nunknown.excel_text(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/str.strpos.html",
    "href": "api/str.strpos.html",
    "title": "str.strpos",
    "section": "",
    "text": "str.strpos\nstr.strpos(col0, col1)\nAlias of instr. Return location of first occurrence of search_string in string, counting from 1. Returns 0 if no match found.\n\n\n\nduckdb example\nresult\n\n\n\n\nstrpos(‘test test’,‘es’)\n2"
  },
  {
    "objectID": "api/num.sin.html",
    "href": "api/num.sin.html",
    "title": "num.sin",
    "section": "",
    "text": "num.sin\nnum.sin(col0)\ncomputes the sin of x\n\n\n\nduckdb example\nresult\n\n\n\n\nsin(90)\n0.8939966636005579"
  },
  {
    "objectID": "api/num.xor.html",
    "href": "api/num.xor.html",
    "title": "num.xor",
    "section": "",
    "text": "num.xor\nnum.xor(col0, col1)\nbitwise XOR\n\n\n\nduckdb example\nresult\n\n\n\n\nxor(17, 5)\n20"
  },
  {
    "objectID": "api/dt.date_trunc.html",
    "href": "api/dt.date_trunc.html",
    "title": "dt.date_trunc",
    "section": "",
    "text": "dt.date_trunc\ndt.date_trunc(col0, col1)\nTruncate to specified precision\n\n\n\nduckdb example\nresult\n\n\n\n\ndate_trunc(‘month’, DATE ‘1992-03-07’)\n1992-03-01"
  },
  {
    "objectID": "api/str.md5.html",
    "href": "api/str.md5.html",
    "title": "str.md5",
    "section": "",
    "text": "str.md5\nstr.md5(col0)\nReturns the MD5 hash of the value\n\n\n\nduckdb example\nresult\n\n\n\n\nmd5(‘123’)\n‘202cb962ac59075b964b07152d234b70’"
  },
  {
    "objectID": "api/nested.element_at.html",
    "href": "api/nested.element_at.html",
    "title": "nested.element_at",
    "section": "",
    "text": "nested.element_at\nnested.element_at(col0, col1, *args)\nReturn a list containing the value for a given key or an empty list if the key is not contained in the map. The type of the key provided in the second parameter must match the type of the map’s keys else an error is returned.\n\n\n\nduckdb example\nresult\n\n\n\n\nelement_at(map([100, 5], [42, 43]),100);\n[42]"
  },
  {
    "objectID": "api/num.atan.html",
    "href": "api/num.atan.html",
    "title": "num.atan",
    "section": "",
    "text": "num.atan\nnum.atan(col0)\ncomputes the arctangent of x\n\n\n\nduckdb example\nresult\n\n\n\n\natan(0.5)\n0.4636476090008061"
  },
  {
    "objectID": "api/unknown.json_extract_path_text.html",
    "href": "api/unknown.json_extract_path_text.html",
    "title": "unknown.json_extract_path_text",
    "section": "",
    "text": "unknown.json_extract_path_text\nunknown.json_extract_path_text(col0, col1)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.day.html",
    "href": "api/dt.day.html",
    "title": "dt.day",
    "section": "",
    "text": "dt.day\ndt.day(col0)\nDay\n\n\n\nduckdb example\nresult\n\n\n\n\nday(date ‘1992-02-15’)\n15"
  },
  {
    "objectID": "api/agg.favg.html",
    "href": "api/agg.favg.html",
    "title": "agg.favg",
    "section": "",
    "text": "agg.favg\nagg.favg(col0)\nCalculates the average using a more accurate floating point summation (Kahan Sum).\n\n\n\nduckdb example\nresult\n\n\n\n\nfavg(A)\nnan"
  },
  {
    "objectID": "api/unknown.arbitrary.html",
    "href": "api/unknown.arbitrary.html",
    "title": "unknown.arbitrary",
    "section": "",
    "text": "unknown.arbitrary\nunknown.arbitrary(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/num.ln.html",
    "href": "api/num.ln.html",
    "title": "num.ln",
    "section": "",
    "text": "num.ln\nnum.ln(col0)\ncomputes the natural logarithm of x\n\n\n\nduckdb example\nresult\n\n\n\n\nln(2)\n0.693"
  },
  {
    "objectID": "api/num.cos.html",
    "href": "api/num.cos.html",
    "title": "num.cos",
    "section": "",
    "text": "num.cos\nnum.cos(col0)\ncomputes the cosine of x\n\n\n\nduckdb example\nresult\n\n\n\n\ncos(90)\n-0.4480736161291701"
  },
  {
    "objectID": "api/str.array_slice.html",
    "href": "api/str.array_slice.html",
    "title": "str.array_slice",
    "section": "",
    "text": "str.array_slice\nstr.array_slice(col0, col1, col2, *args)\nExtract a string using slice conventions. NULLs are interpreted as the bounds of the string. Negative values are accepted.\n\n\n\nduckdb example\nresult\n\n\n\n\narray_slice(‘DuckDB’, 5, NULL)\n‘DB’"
  },
  {
    "objectID": "api/dt.second.html",
    "href": "api/dt.second.html",
    "title": "dt.second",
    "section": "",
    "text": "dt.second\ndt.second(col0)\nSeconds\n\n\n\nduckdb example\nresult\n\n\n\n\nsecond(timestamp ‘2021-08-03 11:59:44.123456’)\n44"
  },
  {
    "objectID": "api/agg.first.html",
    "href": "api/agg.first.html",
    "title": "agg.first",
    "section": "",
    "text": "agg.first\nagg.first(col0)\nReturns the first value of a column.\n\n\n\nduckdb example\nresult\n\n\n\n\nfirst(A)\nnan"
  },
  {
    "objectID": "api/dt.timezone_hour.html",
    "href": "api/dt.timezone_hour.html",
    "title": "dt.timezone_hour",
    "section": "",
    "text": "dt.timezone_hour\ndt.timezone_hour(col0)\nTime zone offset hour portion\n\n\n\nduckdb example\nresult\n\n\n\n\ntimezone_hour(date ‘1992-02-15’)\n0"
  },
  {
    "objectID": "api/agg.product.html",
    "href": "api/agg.product.html",
    "title": "agg.product",
    "section": "",
    "text": "agg.product\nagg.product(col0)\nCalculates the product of all tuples in arg\n\n\n\nduckdb example\nresult\n\n\n\n\nproduct(A)\nnan"
  },
  {
    "objectID": "api/str.concat.html",
    "href": "api/str.concat.html",
    "title": "str.concat",
    "section": "",
    "text": "str.concat\nstr.concat(col0, *args)\nConcatenate many strings together\n\n\n\nduckdb example\nresult\n\n\n\n\nconcat(‘Hello’, ’ ‘, ’World’)\nHello World"
  },
  {
    "objectID": "api/agg.sum.html",
    "href": "api/agg.sum.html",
    "title": "agg.sum",
    "section": "",
    "text": "agg.sum\nagg.sum(col0)\nCalculates the sum value for all tuples in arg.\n\n\n\nduckdb example\nresult\n\n\n\n\nsum(A)\nnan"
  },
  {
    "objectID": "api/num.sign.html",
    "href": "api/num.sign.html",
    "title": "num.sign",
    "section": "",
    "text": "num.sign\nnum.sign(col0)\nreturns the sign of x as -1, 0 or 1\n\n\n\nduckdb example\nresult\n\n\n\n\nsign(-349)\n-1"
  },
  {
    "objectID": "api/str.from_base64.html",
    "href": "api/str.from_base64.html",
    "title": "str.from_base64",
    "section": "",
    "text": "str.from_base64\nstr.from_base64(col0)\nConvert a base64 encoded string to a character string.\n\n\n\nduckdb example\nresult\n\n\n\n\nfrom_base64(‘QQ==’)\n‘A’"
  },
  {
    "objectID": "api/nested.list_slice.html",
    "href": "api/nested.list_slice.html",
    "title": "nested.list_slice",
    "section": "",
    "text": "nested.list_slice\nnested.list_slice(col0, col1, col2, *args)\nExtract a sublist using slice conventions. NULLs are interpreted as the bounds of the LIST. Negative values are accepted.\n\n\n\nduckdb example\nresult\n\n\n\n\nlist_slice(l, 2, NULL)\n[5, 6]"
  },
  {
    "objectID": "api/agg.quantile_disc.html",
    "href": "api/agg.quantile_disc.html",
    "title": "agg.quantile_disc",
    "section": "",
    "text": "agg.quantile_disc\nagg.quantile_disc(col0, col1)\nReturns the exact quantile number between 0 and 1 . If pos is a LIST of FLOATs, then the result is a LIST of the corresponding exact quantiles.\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/unknown.group_concat.html",
    "href": "api/unknown.group_concat.html",
    "title": "unknown.group_concat",
    "section": "",
    "text": "unknown.group_concat\nunknown.group_concat(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.map.html",
    "href": "api/nested.map.html",
    "title": "nested.map",
    "section": "",
    "text": "nested.map\nnested.map(*args)\nReturns an empty map.\n\n\n\nduckdb example\nresult\n\n\n\n\nmap()\n{}"
  },
  {
    "objectID": "api/json.json_transform.html",
    "href": "api/json.json_transform.html",
    "title": "json.json_transform",
    "section": "",
    "text": "json.json_transform\njson.json_transform(col0, col1)\nTransform json according to the specified structure\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/dt.last_day.html",
    "href": "api/dt.last_day.html",
    "title": "dt.last_day",
    "section": "",
    "text": "dt.last_day\ndt.last_day(col0)\nThe last day of the corresponding month in the date\n\n\n\nduckdb example\nresult\n\n\n\n\nlast_day(DATE ‘1992-09-20’)\n1992-09-30"
  },
  {
    "objectID": "api/nested.cardinality.html",
    "href": "api/nested.cardinality.html",
    "title": "nested.cardinality",
    "section": "",
    "text": "nested.cardinality\nnested.cardinality(col0, *args)\nReturn the size of the map (or the number of entries in the map).\n\n\n\nduckdb example\nresult\n\n\n\n\ncardinality( map([4, 2], [‘a’, ‘b’]) );\n2"
  },
  {
    "objectID": "api/unknown.subtract.html",
    "href": "api/unknown.subtract.html",
    "title": "unknown.subtract",
    "section": "",
    "text": "unknown.subtract\nunknown.subtract(col0)\n\n\n\nduckdb example\nresult\n\n\n\n\nnan\nnan"
  },
  {
    "objectID": "api/nested.len.html",
    "href": "api/nested.len.html",
    "title": "nested.len",
    "section": "",
    "text": "nested.len\nnested.len(col0)\nReturn the length of the list.\n\n\n\nduckdb example\nresult\n\n\n\n\nlen([1, 2, 3])\n3"
  },
  {
    "objectID": "api/dt.epoch.html",
    "href": "api/dt.epoch.html",
    "title": "dt.epoch",
    "section": "",
    "text": "dt.epoch\ndt.epoch(col0)\nConverts a timestamp to the seconds since the epoch\n\n\n\nduckdb example\nresult\n\n\n\n\nepoch(‘2022-11-07 08:43:04’::TIMESTAMP);\n1667810584"
  },
  {
    "objectID": "get-started/basic-types.html",
    "href": "get-started/basic-types.html",
    "title": "Dates and times",
    "section": "",
    "text": "from siuba import *\nfrom siuba.sql import sql_raw\nfrom duckops import all as op\nimport duckops as dop\nfrom duckops._core import lit, _query_call\nfrom duckops import _types\n\nimport duckdb\n\nimport pandas as pd\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\"duckdb:///:memory:\")\ncon = duckdb.connect()\n\ndf = pd.DataFrame({\"date\": pd.to_datetime([\"2021-01-01 01:02:03\"])})\n\ntbl_df = tbl(engine, \"df\", df)\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n\ntbl_df &gt;&gt; mutate(res = _types.Interval(1, \"years\")) &gt;&gt; show_query()\n\nCONVERTING\nSELECT df.date, INTERVAL '1 years' AS res \nFROM df\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\ndate\nres\n\n\n\n\n0\n2021-01-01 01:02:03\n360 days\n\n\n\n\n# .. may have more rows\n\n\n\nimport polars as pl\nimport datetime\n\ninterval = _types.Interval(1, \"years\")\npd.Series([pd.Timestamp(\"2021-02-02\")]) - interval\n-interval + pl.DataFrame({\"a\": datetime.date.today()})[\"a\"]\n\n\nshape: (1,)\n\n\n\na\n\n\ndate\n\n\n\n\n2022-04-10"
  },
  {
    "objectID": "get-started/advanced-programming.html",
    "href": "get-started/advanced-programming.html",
    "title": "Advanced programming",
    "section": "",
    "text": "from sqlalchemy import create_engine\nimport pandas as pd\nfrom siuba import *\nfrom siuba.experimental.pivot import pivot_wider, pivot_longer\n\nimport duckops\nimport duckops.all as dop\n\nfrom duckops.syntax import extract, lam\nfrom duckops.helpers import query_to_tbl, tbl_empty\n\n\nengine = create_engine(\"duckdb:///:memory:\")"
  },
  {
    "objectID": "get-started/advanced-programming.html#re-usable-column-aliases",
    "href": "get-started/advanced-programming.html#re-usable-column-aliases",
    "title": "Advanced programming",
    "section": "Re-usable column aliases",
    "text": "Re-usable column aliases\nSELECT \n     'These are the voyages of the starship Enterprise...' AS intro,\n     instr(intro, 'starship') AS starship_loc,\n     substr(intro, starship_loc + len('starship') + 1) AS trimmed_intro;\n\n(\n    tbl_empty()\n    &gt;&gt; mutate(\n        intro = \"These are the voyages of the starship Enterprise...\",\n        starship_loc = dop.instr(_.intro, \"starship\"),\n        trimmed_intro = dop.substring(_.intro, _.starship_loc + dop.len(\"starship\") + 1)\n    )\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nintro\nstarship_loc\ntrimmed_intro\n\n\n\n\n0\nThese are the voyages of the starship Enterpri...\n30\nEnterprise...\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#dynamic-column-selection",
    "href": "get-started/advanced-programming.html#dynamic-column-selection",
    "title": "Advanced programming",
    "section": "Dynamic column selection",
    "text": "Dynamic column selection\nINSTALL httpfs;\nLOAD httpfs;\nCREATE TABLE trek_facts AS\n    SELECT * FROM 'https://raw.githubusercontent.com/Alex-Monahan/example_datasets/main/Star_Trek-Season_1.csv';\n\nDESCRIBE trek_facts;\nSELECT\n    episode_num,\n    COLUMNS('.*warp.*')\nFROM trek_facts;\nSELECT\n    MAX(COLUMNS('.*warp.*'))\nFROM trek_facts;\n\ntrek_facts = pd.read_csv(\"./data/star_trek-season_1.csv\")\n\ntbl_trek_facts = tbl(engine, \"trek_facts\", trek_facts)\n\n(\n    tbl_trek_facts\n    &gt;&gt; select(_.episode_num, _.contains(\"warp\"))\n)\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nepisode_num\ncnt_warp_speed_orders\nhighest_warp_speed_issued\n\n\n\n\n0\n0\n1\n1\n\n\n1\n1\n0\n0\n\n\n2\n2\n1\n1\n\n\n3\n3\n1\n0\n\n\n4\n4\n0\n0\n\n\n\n\n# .. may have more rows\n\n\n\n(\n    tbl_trek_facts\n    &gt;&gt; summarize(across(_.contains(\"warp\"), dop.max(Fx)))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\ncnt_warp_speed_orders\nhighest_warp_speed_issued\n\n\n\n\n0\n5\n8\n\n\n\n\n# .. may have more rows\n\n\nSELECT\n    episode_num,\n    COLUMNS('.*warp.*')\nFROM trek_facts\nWHERE\n    COLUMNS('.*warp.*') &gt;= 2;\n    -- cnt_warp_speed_orders &gt;= 2 \n    -- AND \n    -- highest_warp_speed_issued &gt;= 2\n\nexpr_warp_cols = _.contains(\"warp\")\n\n(\n    tbl_trek_facts\n    &gt;&gt; select(expr_warp_cols)\n    &gt;&gt; filter(across(expr_warp_cols, Fx &gt;= 2))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\ncnt_warp_speed_orders\nhighest_warp_speed_issued\n\n\n\n\n0\n3\n7\n\n\n1\n2\n7\n\n\n2\n2\n8\n\n\n3\n2\n8\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#columns-with-exclude-and-replace",
    "href": "get-started/advanced-programming.html#columns-with-exclude-and-replace",
    "title": "Advanced programming",
    "section": "Columns() with EXCLUDE and Replace",
    "text": "Columns() with EXCLUDE and Replace\n\nExclude\nSELECT\n    MAX(COLUMNS(* EXCLUDE season_num))\nFROM trek_facts;\n\n(\n    tbl_trek_facts\n    &gt;&gt; select(_.contains(\"\"), -_.season_num)\n    &gt;&gt; summarize(across(_.contains(\"\"), dop.max(Fx)))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nepisode_num\naired_date\ncnt_kirk_hookups\ncnt_downed_redshirts\nbool_aliens_almost_took_over_planet\nbool_aliens_almost_took_over_enterprise\ncnt_vulcan_nerve_pinch\ncnt_warp_speed_orders\nhighest_warp_speed_issued\nbool_hand_phasers_fired\nbool_ship_phasers_fired\nbool_ship_photon_torpedos_fired\ncnt_transporter_pax\ncnt_damn_it_jim_quote\ncnt_im_givin_her_all_shes_got_quote\ncnt_highly_illogical_quote\nbool_enterprise_saved_the_day\n\n\n\n\n0\n29\n1967-04-13\n2\n4\n1\n1\n2\n5\n8\n1\n1\n1\n14\n0\n0\n3\n1\n\n\n\n\n# .. may have more rows\n\n\n\n\nReplace\nSELECT\n    MAX(COLUMNS(* REPLACE aired_date::timestamp AS aired_date))\nFROM trek_facts;\n\nfrom siuba.sql import sql_raw\n\n(\n    tbl_trek_facts \n    # TODO: handle casting\n    &gt;&gt; mutate(aired_date = sql_raw(\"aired_date::timestamp\"))\n    &gt;&gt; summarize(across(_.contains(\"\"), dop.max(Fx)))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nseason_num\nepisode_num\naired_date\ncnt_kirk_hookups\ncnt_downed_redshirts\nbool_aliens_almost_took_over_planet\nbool_aliens_almost_took_over_enterprise\ncnt_vulcan_nerve_pinch\ncnt_warp_speed_orders\nhighest_warp_speed_issued\nbool_hand_phasers_fired\nbool_ship_phasers_fired\nbool_ship_photon_torpedos_fired\ncnt_transporter_pax\ncnt_damn_it_jim_quote\ncnt_im_givin_her_all_shes_got_quote\ncnt_highly_illogical_quote\nbool_enterprise_saved_the_day\n\n\n\n\n0\n1\n29\n1967-04-13\n2\n4\n1\n1\n2\n5\n8\n1\n1\n1\n14\n0\n0\n3\n1\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#columns-with-lambda-functions",
    "href": "get-started/advanced-programming.html#columns-with-lambda-functions",
    "title": "Advanced programming",
    "section": "Columns with lambda functions",
    "text": "Columns with lambda functions\nSELECT\n    episode_num,\n    COLUMNS(col -&gt; col LIKE '%warp%')\nFROM trek_facts\nWHERE\n    COLUMNS(col -&gt; col LIKE '%warp%') &gt;= 2;\n\nexpr_like_warp = _.contains(\"warp\")\n\n(\n    tbl_trek_facts\n    &gt;&gt; select(_.episode_num, expr_like_warp)\n    &gt;&gt; filter(across(expr_like_warp, Fx &gt;= 2))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nepisode_num\ncnt_warp_speed_orders\nhighest_warp_speed_issued\n\n\n\n\n0\n14\n3\n7\n\n\n1\n17\n2\n7\n\n\n2\n18\n2\n8\n\n\n3\n29\n2\n8\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#automatic-json-to-nested-type-conversion",
    "href": "get-started/advanced-programming.html#automatic-json-to-nested-type-conversion",
    "title": "Advanced programming",
    "section": "Automatic JSON to nested type conversion",
    "text": "Automatic JSON to nested type conversion\nINSTALL httpfs;\nLOAD httpfs;\nINSTALL json;\nLOAD json;\n\nSELECT \n     starfleet[10].model AS starship \nFROM 'https://raw.githubusercontent.com/vlad-saling/star-trek-ipsum/master/src/content/content.json';\n\nimport duckdb\n\nduckdb.execute(\"\"\"\nINSTALL httpfs;\nLOAD httpfs;\nINSTALL json;\nLOAD json;\n\nSELECT \n     *\nFROM 'https://raw.githubusercontent.com/vlad-saling/star-trek-ipsum/master/src/content/content.json';\n\"\"\").df()\n\n\n\n\n\n\n\n\nitem\nextra\nstarfleet\n\n\n\n\n0\n[{'paragraph': 'Shields up. I recommend we tra...\n[{'paragraph': 'These are the voyages of the S...\n[{'model': 'USS Leyte Gulf - NCC-71427 - Comma...\n\n\n\n\n\n\n\n\nwith engine.begin() as conn:\n    conn.exec_driver_sql(\"\"\"\nINSTALL httpfs;\nLOAD httpfs;\nINSTALL json;\nLOAD json;\n\"\"\")\n\ntbl_star_trek_ipsum = (\n    query_to_tbl(engine, \"\"\"\n      SELECT \n          *\n      FROM 'https://raw.githubusercontent.com/vlad-saling/star-trek-ipsum/master/src/content/content.json'\n      \"\"\"\n    )\n)\n\n(\n    tbl_star_trek_ipsum\n    &gt;&gt; mutate(starship = dop.json_extract_string(_.starfleet, \"$[10].model\"))\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nitem\nextra\nstarfleet\nstarship\n\n\n\n\n0\n[{'paragraph': 'Shields up. I recommend we tra...\n[{'paragraph': 'These are the voyages of the S...\n[{'model': 'USS Leyte Gulf - NCC-71427 - Comma...\nUSS Vengeance - Developed by Khan Noonien Sing...\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#function-chaining",
    "href": "get-started/advanced-programming.html#function-chaining",
    "title": "Advanced programming",
    "section": "Function chaining",
    "text": "Function chaining\nSELECT \n     ('Make it so')\n          .UPPER()\n          .string_split(' ')\n          .list_aggr('string_agg','.')\n          .concat('.') AS im_not_messing_around_number_one;\n\n# Symbol &gt;&gt; Symbol is returning a PipeCall, not Symbol[PipeCall], which is wrong\nq = (\n    tbl_empty()\n    &gt;&gt; mutate(\n      x = \"Make it so\",\n      res = dop.upper(_.x)\n        &gt;&gt; dop.string_split(_, \" \")\n        &gt;&gt; dop.list_aggr(_, \"string_agg\", \".\")\n        &gt;&gt; dop.concat(_, \".\")\n    )\n    &gt;&gt; show_query()\n)\n\nSELECT anon_1.x, concat(list_aggr(string_split(upper(anon_1.x), ' '), 'string_agg', '.'), '.') AS res \nFROM (SELECT 'Make it so' AS x) AS anon_1"
  },
  {
    "objectID": "get-started/advanced-programming.html#dynamic-pivot-and-unpivot",
    "href": "get-started/advanced-programming.html#dynamic-pivot-and-unpivot",
    "title": "Advanced programming",
    "section": "Dynamic PIVOT and UNPIVOT",
    "text": "Dynamic PIVOT and UNPIVOT\nCREATE TABLE purchases (item VARCHAR, year INT, count INT);\n\nINSERT INTO purchases\n    VALUES ('phasers', 2155, 1035), ('phasers', 2156, 25039), ('phasers', 2157, 95000),\n           ('photon torpedoes', 2155, 255), ('photon torpedoes', 2156, 17899), ('photon torpedoes', 2157, 87492);\n\nFROM purchases;\nCREATE TABLE pivoted_purchases AS\n     PIVOT purchases \n          ON year \n          USING SUM(count) \n          GROUP BY item;\n\nFROM pivoted_purchases;\n\nwith engine.begin() as conn:\n    conn.exec_driver_sql(\"\"\"\nCREATE TABLE purchases (item VARCHAR, year INT, count INT);\n\nINSERT INTO purchases\n    VALUES ('phasers', 2155, 1035), ('phasers', 2156, 25039), ('phasers', 2157, 95000),\n           ('photon torpedoes', 2155, 255), ('photon torpedoes', 2156, 17899), ('photon torpedoes', 2157, 87492);\n\nFROM purchases;\n\"\"\")\n\n\ntbl_purchases = tbl(engine, \"purchases\")\n\ntbl_pivoted_purchases = (\n    tbl_purchases\n    &gt;&gt; pivot_wider(names_from=_.year, values_from=_.count)\n    &gt;&gt; show_query()\n)\n\nSELECT purchases_1.item AS item, max(CASE WHEN (purchases_1.year = 2155) THEN purchases_1.count END) AS \"2155\", max(CASE WHEN (purchases_1.year = 2156) THEN purchases_1.count END) AS \"2156\", max(CASE WHEN (purchases_1.year = 2157) THEN purchases_1.count END) AS \"2157\" \nFROM purchases AS purchases_1 GROUP BY purchases_1.item\n\n\n/Users/machow/.virtualenvs/duckops/lib/python3.10/site-packages/duckdb_engine/__init__.py:160: DuckDBEngineWarning: duckdb-engine doesn't yet support reflection on indices\n  warnings.warn(\n\n\nUNPIVOT pivoted_purchases\n     ON COLUMNS(* EXCLUDE item)\n     INTO\n          NAME year\n          VALUE count;\n\ntbl_pivoted_purchases &gt;&gt; pivot_longer(-_.item)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nitem\nname\nvalue\n\n\n\n\n0\nphasers\n2155\n1035\n\n\n1\nphoton torpedoes\n2155\n255\n\n\n2\nphasers\n2156\n25039\n\n\n3\nphoton torpedoes\n2156\n17899\n\n\n4\nphasers\n2157\n95000\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#list-lambda-functions",
    "href": "get-started/advanced-programming.html#list-lambda-functions",
    "title": "Advanced programming",
    "section": "List lambda functions",
    "text": "List lambda functions\nSELECT \n     (['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'])\n          .list_transform(x -&gt; x.string_split(' ')[1]) AS short_name;\n\nq = (\n  tbl_empty()\n  &gt;&gt; mutate(\n      name = ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'],\n      short_name = dop.list_transform(\n          _[\"name\"],\n          lam(dop.string_split(Fx, \" \") &gt;&gt; extract(_, 1))\n      )\n  )\n  &gt;&gt; show_query()\n)\n\nSELECT anon_1.name, list_transform(anon_1.name, x -&gt; string_split(x, ' ')[1]) AS short_name \nFROM (SELECT ARRAY['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'] AS name) AS anon_1\n\n\nSELECT \n     (['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'])\n          .list_filter(x -&gt; x.contains('1701')) AS the_original;\n\n(\n    tbl_empty()\n    &gt;&gt; mutate(\n        name = ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'],\n        the_original = dop.list_filter(\n            _[\"name\"],\n            lam(dop.contains(Fx, \"1701\"))\n        )\n    )\n    &gt;&gt; show_query()\n)\n\nSELECT anon_1.name, list_filter(anon_1.name, x -&gt; contains(x, '1701')) AS the_original \nFROM (SELECT ARRAY['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'] AS name) AS anon_1\n\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nname\nthe_original\n\n\n\n\n0\n[Enterprise NCC-1701, Voyager NCC-74656, Disco...\n[Enterprise NCC-1701]\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#list-comprehensions",
    "href": "get-started/advanced-programming.html#list-comprehensions",
    "title": "Advanced programming",
    "section": "List comprehensions",
    "text": "List comprehensions\nSELECT \n     [x.string_split(' ')[1] \n     FOR x IN ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'] \n     IF x.contains('1701')] AS ready_to_boldly_go;\n\nfrom duckops.syntax import list_comp\n(\n    tbl_empty()\n    &gt;&gt; mutate(\n        ships = ['Enterprise NCC-1701', 'Voyager NCC-74656', 'Discovery NCC-1031'],\n        res = list_comp(\n            _.ships,\n            dop.string_split(Fx, \" \") &gt;&gt; extract(_, 1),\n            dop.contains(Fx, \"1701\")\n        )\n    )\n)\n\n# Source: lazy query\n# DB Conn: Engine(duckdb:///:memory:)\n# Preview:\n\n\n\n\n\n\n\nships\nres\n\n\n\n\n0\n[Enterprise NCC-1701, Voyager NCC-74656, Disco...\n[Enterprise]\n\n\n\n\n# .. may have more rows"
  },
  {
    "objectID": "get-started/advanced-programming.html#unimplemented",
    "href": "get-started/advanced-programming.html#unimplemented",
    "title": "Advanced programming",
    "section": "Unimplemented",
    "text": "Unimplemented"
  },
  {
    "objectID": "get-started/advanced-programming.html#union-by-name",
    "href": "get-started/advanced-programming.html#union-by-name",
    "title": "Advanced programming",
    "section": "Union by name 🚧",
    "text": "Union by name 🚧\nCREATE TABLE proverbs AS\n     SELECT\n          'Revenge is a dish best served cold' AS klingon_proverb\n     UNION ALL BY NAME\n     SELECT\n          'You will be assimilated' AS borg_proverb,\n          'If winning is not important, why keep score?' AS klingon_proverb;\n\nFROM proverbs;"
  },
  {
    "objectID": "get-started/advanced-programming.html#exploding-struct.",
    "href": "get-started/advanced-programming.html#exploding-struct.",
    "title": "Advanced programming",
    "section": "Exploding struct.*",
    "text": "Exploding struct.*"
  },
  {
    "objectID": "get-started/advanced-programming.html#automatic-struct-creation",
    "href": "get-started/advanced-programming.html#automatic-struct-creation",
    "title": "Advanced programming",
    "section": "Automatic struct creation",
    "text": "Automatic struct creation\nWITH officers AS (\n     SELECT 'Captain' AS rank, 'Jean-Luc Picard' AS name\n     UNION ALL\n     SELECT 'Lieutenant Commander', 'Data'\n)\nFROM officers\nSELECT officers;"
  },
  {
    "objectID": "get-started/advanced-programming.html#union-data-type",
    "href": "get-started/advanced-programming.html#union-data-type",
    "title": "Advanced programming",
    "section": "Union data type",
    "text": "Union data type"
  },
  {
    "objectID": "get-started/advanced-programming.html#from-first-in-select-statements",
    "href": "get-started/advanced-programming.html#from-first-in-select-statements",
    "title": "Advanced programming",
    "section": "From first in select statements",
    "text": "From first in select statements\n💀"
  }
]